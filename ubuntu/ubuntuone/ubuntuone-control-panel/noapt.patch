diff -Naur ubuntuone-control-panel-2.0.0.orig/ubuntuone/controlpanel/gui/gtk/gui.py ubuntuone-control-panel-2.0.0/ubuntuone/controlpanel/gui/gtk/gui.py
--- ubuntuone-control-panel-2.0.0.orig/ubuntuone/controlpanel/gui/gtk/gui.py	2011-09-26 19:21:26.000000000 +0200
+++ ubuntuone-control-panel-2.0.0/ubuntuone/controlpanel/gui/gtk/gui.py	2011-10-19 17:56:45.074867392 +0200
@@ -44,7 +44,7 @@
 # pylint: enable=W0401, W0614
 from ubuntuone.controlpanel.gui.gtk import (
     DBUS_IFACE_GUI, DBUS_BUS_NAME as DBUS_BUS_NAME_GUI,
-    DBUS_PATH as DBUS_PATH_GUI, package_manager)
+    DBUS_PATH as DBUS_PATH_GUI)
 from ubuntuone.controlpanel.gui.gtk.widgets import LabelLoading, PanelTitle
 # Use ubiquity package when ready (LP: #673665)
 from ubuntuone.controlpanel.gui.gtk.widgets import GreyableBin
@@ -879,94 +879,6 @@
         self.is_processing = True
 
 
-class InstallPackage(gtk.VBox, ControlPanelMixin):
-    """A widget to process the install of a package."""
-
-    __gsignals__ = {
-        'finished': (gobject.SIGNAL_RUN_FIRST, gobject.TYPE_NONE, ()),
-    }
-
-    def __init__(self, package_name, message=None):
-        gtk.VBox.__init__(self)
-        ControlPanelMixin.__init__(self, filename='install.ui')
-        self.add(self.itself)
-
-        self.package_name = package_name
-        self.package_manager = package_manager.PackageManager()
-        self.args = {'package_name': self.package_name}
-        self.transaction = None
-
-        self.progress_bar = None
-
-        self.message = message
-        if self.message is None:
-            self.message = INSTALL_PACKAGE % self.args
-        self.reset()
-
-        self.show()
-
-    def reset(self):
-        """Reset this interface."""
-        children = self.itself.get_children()
-        if self.progress_bar in children:
-            self.itself.remove(self.progress_bar)
-        if self.install_button_box not in children:
-            self.itself.pack_start(self.install_button_box)
-        self.install_label.set_markup(self.message)
-
-    @package_manager.inline_callbacks
-    def on_install_button_clicked(self, button):
-        """The install button was clicked."""
-        try:
-            # create the install transaction
-            self.transaction = yield self.package_manager.install(
-                                    self.package_name)
-
-            logger.debug('on_install_button_clicked: transaction is %r',
-                         self.transaction)
-            success = package_manager.aptdaemon.enums.EXIT_SUCCESS
-            if self.transaction == success:
-                self.on_install_finished(None, self.transaction)
-                return
-
-            # create the progress bar and pack it to the box
-            self.progress_bar = package_manager.PackageManagerProgressBar(
-                                    self.transaction)
-            self.progress_bar.show()
-
-            self.itself.remove(self.install_button_box)
-            self.itself.pack_start(self.progress_bar)
-
-            self.transaction.connect('finished', self.on_install_finished)
-            self.install_label.set_markup(INSTALLING % self.args)
-            yield self.transaction.run()
-        except package_manager.aptdaemon.errors.NotAuthorizedError:
-            self.reset()
-        except:  # pylint: disable=W0702
-            logger.exception('on_install_button_clicked')
-            self._set_warning(FAILED_INSTALL % self.args,
-                              self.install_label)
-            if self.progress_bar is not None:
-                self.progress_bar.hide()
-
-    @log_call(logger.info)
-    def on_install_finished(self, transaction, exit_code):
-        """The installation finished."""
-        if self.progress_bar is not None:
-            self.progress_bar.set_sensitive(False)
-
-        logger.info('on_install_finished: installation of %r was %r',
-                    self.package_name, exit_code)
-        if exit_code != package_manager.aptdaemon.enums.EXIT_SUCCESS:
-            if hasattr(transaction, 'error'):
-                logger.error('transaction failed: %r', transaction.error)
-            self._set_warning(FAILED_INSTALL % self.args,
-                              self.install_label)
-        else:
-            self.install_label.set_markup(SUCCESS_INSTALL % self.args)
-            self.emit('finished')
-
-
 class Service(gtk.VBox, ControlPanelMixin):
     """A service."""
 
@@ -1068,8 +980,7 @@
                 dependency_name = dependency
             args = {'plugin_name': dependency_name, 'service_name': service_id}
             message = INSTALL_PLUGIN % args
-            self.dependency = InstallPackage(dependency, message)
-            self.dependency.connect('finished', self.on_depedency_finished)
+            self.self.on_depedency_finished()
 
             self.container.pack_end(self.dependency, expand=False)
             self.check_button.set_sensitive(False)
@@ -1124,7 +1035,6 @@
 
         self.plugin_names = {'contacts': CONTACTS}
 
-        self.package_manager = package_manager.PackageManager()
         self.install_box = None
 
         self._replications_ready = False  # hack to solve LP: #750309
@@ -1140,10 +1050,6 @@
         self.show()
 
     @property
-    def has_desktopcouch(self):
-        """Is desktopcouch installed?"""
-        return self.package_manager.is_installed(DESKTOPCOUCH_PKG)
-
     def on_file_sync_button_clicked(self, *args, **kwargs):
         """The "Show me my U1 folder" button was clicked.
 
@@ -1170,16 +1076,6 @@
             self.itself.remove(self.install_box)
             self.install_box = None
 
-        logger.info('load: has_desktopcouch? %r', self.has_desktopcouch)
-        if not self.has_desktopcouch:
-            self.message.set_text('')
-
-            self.install_box = InstallPackage(DESKTOPCOUCH_PKG)
-            self.install_box.connect('finished', self.load_replications)
-            self.itself.pack_end(self.install_box, expand=False)
-            self.itself.reorder_child(self.install_box, 0)
-        else:
-            self.load_replications()
 
         self.message.stop()
 
@@ -1205,7 +1102,7 @@
 
         for item in info:
             pkg = item['dependency']
-            if not pkg or self.package_manager.is_installed(pkg):
+            if not pkg:
                 pkg = None
 
             sid = item['replication_id']
diff -Naur ubuntuone-control-panel-2.0.0.orig/ubuntuone/controlpanel/gui/gtk/package_manager.py ubuntuone-control-panel-2.0.0/ubuntuone/controlpanel/gui/gtk/package_manager.py
--- ubuntuone-control-panel-2.0.0.orig/ubuntuone/controlpanel/gui/gtk/package_manager.py	2011-09-26 19:21:26.000000000 +0200
+++ ubuntuone-control-panel-2.0.0/ubuntuone/controlpanel/gui/gtk/package_manager.py	1970-01-01 01:00:00.000000000 +0100
@@ -1,62 +0,0 @@
-# -*- coding: utf-8 -*-
-
-# Authors: Natalia B. Bidart <nataliabidart@canonical.com>
-#
-# Copyright 2010 Canonical Ltd.
-#
-# This program is free software: you can redistribute it and/or modify it
-# under the terms of the GNU General Public License version 3, as published
-# by the Free Software Foundation.
-#
-# This program is distributed in the hope that it will be useful, but
-# WITHOUT ANY WARRANTY; without even the implied warranties of
-# MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
-# PURPOSE.  See the GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License along
-# with this program.  If not, see <http://www.gnu.org/licenses/>.
-
-"""Client to manage packages."""
-
-import apt
-import aptdaemon.client
-# pylint: disable=W0404
-import aptdaemon.enums
-
-try:
-    # Unable to import 'defer', pylint: disable=F0401,E0611,W0404
-    from aptdaemon.defer import inline_callbacks, return_value
-except ImportError:
-    # Unable to import 'defer', pylint: disable=F0401,E0611,W0404
-    from defer import inline_callbacks, return_value
-from aptdaemon.gtkwidgets import AptProgressBar
-
-from ubuntuone.controlpanel.logger import setup_logging
-
-
-logger = setup_logging('package_manager')
-
-
-class PackageManagerProgressBar(AptProgressBar):
-    """A progress bar for a transaction."""
-
-
-class PackageManager(object):
-    """Manage packages (check if is installed, install)."""
-
-    def is_installed(self, package_name):
-        """Return whether 'package_name' is installed in this system."""
-        cache = apt.Cache()
-        result = package_name in cache and cache[package_name].is_installed
-        logger.debug('is %r installed? %r', package_name, result)
-        return result
-
-    @inline_callbacks
-    def install(self, package_name):
-        """Install 'package_name' if is not installed in this system."""
-        if self.is_installed(package_name):
-            return_value(aptdaemon.enums.EXIT_SUCCESS)
-
-        client = aptdaemon.client.AptClient()
-        transaction = yield client.install_packages([package_name])
-        return_value(transaction)
