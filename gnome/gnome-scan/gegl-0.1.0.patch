From 72bdbb12db5ca5284767d3011b1144bf142758e0 Mon Sep 17 00:00:00 2001
From: Manuel Osdoba <manuel.osdoba@tu-ilmenau.de>
Date: Sun, 21 Mar 2010 11:00:22 +0000
Subject: Support Babl 0.1.0 as well

---
diff --git a/modules/gsane/gsane-processor.c b/modules/gsane/gsane-processor.c
index cb3526c..c129d18 100644
--- a/modules/gsane/gsane-processor.c
+++ b/modules/gsane/gsane-processor.c
@@ -22,6 +22,7 @@
 #include "gsane-processor.h"
 #include <string.h>
 #include <math.h>
+#include <config.h>
 
 typedef void (*GSaneProcessorFunc) (GSaneProcessor *self, guchar *buf, guint buf_len);
 
@@ -118,7 +119,7 @@ gsane_processor_process_nbit(GSaneProcessor *self, guchar *buf, guint buf_len)
 				   operation */
 	guint src_pos;
 	guint offset;
-	guchar *src, *dest, *buf8 = g_new0(guchar, self->priv->pixels_in_buf * self->priv->format->format.bytes_per_pixel);
+	guchar *src, *dest, *buf8 = g_new0(guchar, self->priv->pixels_in_buf * babl_format_get_bytes_per_pixel(self->priv->format));
 	guint samples_in_buf = self->priv->pixels_in_buf * self->priv->sample_count;
 	for (i = 0 ; i < samples_in_buf ; i++) {
 		/* compute the address of the first byte container sample value */
@@ -180,7 +185,7 @@ gsane_processor_process_three_pass_8bit(GSaneProcessor *self, guchar *buf, guint
 		/* pos of pixel i in buf */
 		src_pos = i * self->priv->bytes_per_pixel;
 		/* pos of pixel i in buf3 */
-		dest_pos = i * self->priv->format->format.bytes_per_pixel + self->priv->sample_offset;
+		dest_pos = i * babl_format_get_bytes_per_pixel(self->priv->format) + self->priv->sample_offset;
 		/* save */
 		memcpy(buf3+dest_pos, buf+src_pos, self->priv->bytes_per_pixel);
 	}
@@ -368,7 +377,7 @@ gsane_processor_prepare_image(GSaneProcessor *self, SANE_Parameters* params, gui
 	self->priv->format = gsane_processor_get_babl_format(self);
 	g_return_val_if_fail(self->priv->format, NULL);
 
-	self->priv->sample_stride	= self->priv->format->format.bytes_per_pixel / MAX(self->priv->sample_count, self->priv->frame_count);
+	self->priv->sample_stride       = babl_format_get_bytes_per_pixel(self->priv->format) / MAX(self->priv->sample_count, self->priv->frame_count);
 	self->priv->max_target_sample_value= (0xFFFFFFFF) >> (32 - self->priv->sample_stride * 8);
 
 	self->priv->buffer = gegl_buffer_new(&extent, self->priv->format);
--
cgit v0.8.3.1
