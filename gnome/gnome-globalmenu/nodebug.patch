diff --git a/libserver/globalmenuadapter.vala b/libserver/globalmenuadapter.vala
index d773fb9..46ba5b5 100644
--- a/libserver/globalmenuadapter.vala
+++ b/libserver/globalmenuadapter.vala
@@ -79,7 +79,7 @@ public class Gnomenu.GlobalMenuAdapter : Gnomenu.Adapter {
 	private void chainup_key_changed(Gtk.Window window) {
 		GLib.Type type = typeof(Gtk.Window);
 		var window_class = (Gtk.WindowClass) type.class_ref();
-		debug("chainup to Gtk.Window keys changed");
+/*		debug("chainup to Gtk.Window keys changed");*/
 		window_class.keys_changed(window);
 	}
 
diff --git a/libserver/globalmenubar.vala b/libserver/globalmenubar.vala
index 01c3351..d979b70 100644
--- a/libserver/globalmenubar.vala
+++ b/libserver/globalmenubar.vala
@@ -162,7 +162,7 @@ public class Gnomenu.GlobalMenuBar : Gnomenu.MenuBar {
 	private void chainup_key_changed(Gtk.Window window) {
 		GLib.Type type = typeof(Gtk.Window);
 		var window_class = (Gtk.WindowClass) type.class_ref();
-		debug("chainup to Gtk.Window keys changed");
+/*		debug("chainup to Gtk.Window keys changed");*/
 		window_class.keys_changed(window);
 	}
 	private void _hierarchy_changed_chain_keys(Gtk.Widget? old_toplevel) {
@@ -188,7 +188,7 @@ public class Gnomenu.GlobalMenuBar : Gnomenu.MenuBar {
 	}
 
 	private void regrab_menu_bar_key() {
-		debug("regrab menu_bar key");
+/*		debug("regrab menu_bar key");*/
 		ungrab_menu_bar_key();
 		grab_menu_bar_key();
 	}
diff --git a/libserver/monitor.vala b/libserver/monitor.vala
index ccfff82..4edab0f 100644
--- a/libserver/monitor.vala
+++ b/libserver/monitor.vala
@@ -153,7 +153,7 @@ internal class Gnomenu.Monitor: GLib.Object {
 		int win_num = -1;
 		if(win != null) win_num = win.get_monitor_num();
 		if(win_num == -1) {
-			debug("fallback to use pointer");
+/*			debug("fallback to use pointer");*/
 			win_num = get_monitor_num_at_pointer();
 		}
 		if(_per_monitor_mode && _monitor_num != -1 
@@ -195,7 +195,7 @@ internal class Gnomenu.Monitor: GLib.Object {
 		update_active_window(wnck_new);
 	}
 	private void update_active_window(Wnck.Window? from_wnck_window) {
-		debug("%p, update_active_window called once", this);
+/*		debug("%p, update_active_window called once", this);*/
 
 		Gnomenu.Window @new = null;
 		if(from_wnck_window != null) {
@@ -215,10 +215,10 @@ internal class Gnomenu.Monitor: GLib.Object {
 			if(_wnck_active_window_is_closed) {
 				replace_active_window(_desktop_window);
 			}
-			debug("%p, not on my monitor", this);
+/*			debug("%p, not on my monitor", this);*/
 			active_window_lost_focus();
 		} else { /* @new is on my monitor */
-			debug("%p, on my monitor", this);
+/*			debug("%p, on my monitor", this);*/
 			replace_dummy_window(null);
 			replace_active_window(@new);
 		}
@@ -261,7 +261,7 @@ internal class Gnomenu.Monitor: GLib.Object {
 
 	private void active_window_moved() {
 		if(_dummy_window != null) {
-			debug("dummy window_moved to life");
+/*			debug("dummy window_moved to life");*/
 			/* there is a dummy window around,
 			 * so the current active window is actually already
 			 * expired. replace it with dummy when the dummy window
@@ -272,7 +272,7 @@ internal class Gnomenu.Monitor: GLib.Object {
 				replace_active_window(save);
 			}
 		} else {
-			debug("active window_moved to death");
+/*			debug("active window_moved to death");*/
 			/* this is no dummy window around,
 			 * so the active window is still in
 			 * focus. if the focused active window
diff --git a/libserver/parser.vala b/libserver/parser.vala
index c05dc89..e34cce8 100644
--- a/libserver/parser.vala
+++ b/libserver/parser.vala
@@ -10,8 +10,8 @@ public class Gnomenu.Parser {
 		MarkupParseContext context = 
 			new MarkupParseContext(parser_functions, 0, parser, null);
 		context.parse(description, -1);
-		debug("Parser consumed: %lf for %lu bytes", timer.elapsed(null),
-				description.size());
+/*		debug("Parser consumed: %lf for %lu bytes", timer.elapsed(null),
+				description.size());*/
 	}
 
 	private class State {
diff --git a/libserver/utils/mnemonickeys.vala b/libserver/utils/mnemonickeys.vala
index 0dcfa14..2c58c42 100644
--- a/libserver/utils/mnemonickeys.vala
+++ b/libserver/utils/mnemonickeys.vala
@@ -20,7 +20,7 @@ internal class Gnomenu.MnemonicKeys {
 			Gnomenu.MenuLabel label = item.get_child() as Gnomenu.MenuLabel;
 			if(label == null) continue;
 			uint keyval = label.mnemonic_keyval;
-			debug("grabbing key for %s:%u", label.label, keyval);
+/**			debug("grabbing key for %s:%u", label.label, keyval);**/
 			window.grab_key(keyval, mods);
 			keys.insert(keyval, item);
 		}
@@ -41,7 +41,7 @@ internal class Gnomenu.MnemonicKeys {
 		Gdk.ModifierType mods = Gdk.ModifierType.MOD1_MASK;
 		if(current_grab != null) {
 			foreach(uint keyval in keys.get_keys()) {
-				debug("ungrabbing %u", keyval);
+/**				debug("ungrabbing %u", keyval);**/
 				current_grab.ungrab_key(keyval, mods);
 			}
 			current_grab.set_key_widget(null);
diff --git a/libserver/widgets/menubar.vala b/libserver/widgets/menubar.vala
index 006c332..f2c134e 100644
--- a/libserver/widgets/menubar.vala
+++ b/libserver/widgets/menubar.vala
@@ -81,7 +81,7 @@ static const string EMPTY_OVERFLOWN_MENU =
 	private MenuItem resolve_item_maybe_from_overflown(MenuItem item) {
 		if(item.is_child_of(_overflown_arrow)) {
 			string path = overflown_path_to_path(item.item_path);
-			debug("real_item is %s", path);
+/*			debug("real_item is %s", path);*/
 			MenuItem real_item = get(path);
 			return real_item;
 		}
@@ -95,7 +95,7 @@ static const string EMPTY_OVERFLOWN_MENU =
 			rebuild_overflown_menu();
 			return;
 		}
-		debug("item %s activated", item.item_path);
+/*		debug("item %s activated", item.item_path);*/
 		activate(resolve_item_maybe_from_overflown(item));
 	}
 
@@ -103,7 +103,7 @@ static const string EMPTY_OVERFLOWN_MENU =
 		if(item == _overflown_arrow) {
 			return;
 		}
-		debug("item %s selected", item.item_path);
+/*		debug("item %s selected", item.item_path);*/
 		select(resolve_item_maybe_from_overflown(item));
 	}
 	internal void emit_deselect(MenuItem item) {
@@ -247,7 +247,7 @@ static const string EMPTY_OVERFLOWN_MENU =
 	private void rebuild_overflown_menu() {
 		/* this is essentially copying the menubar to
 		 * the submenu of the overflown arrow */
-		debug("rebuild_overflown_menu");
+/*		debug("rebuild_overflown_menu");*/
 
 		/* we first serialize this menu to the global menu xml */
 		var xml = Serializer.to_string(this);
diff --git a/libserver/widgets/menuitem.vala b/libserver/widgets/menuitem.vala
index b0436b8..c72d159 100644
--- a/libserver/widgets/menuitem.vala
+++ b/libserver/widgets/menuitem.vala
@@ -501,7 +501,7 @@ public class Gnomenu.MenuItem : Gtk.MenuItem, Gnomenu.Item {
 			Gnomenu.MenuBar menubar = topmost_shell as Gnomenu.MenuBar;
 			menubar.emit_activate(this);
 		} else {
-			debug("activate %s, %p", this.item_path, topmost_shell);
+/*			debug("activate %s, %p", this.item_path, topmost_shell);*/
 			topmost_shell.activate(this);
 		}
 	}
diff --git a/libserver/widgets/menulabel.vala b/libserver/widgets/menulabel.vala
index f3b9222..bda1226 100644
--- a/libserver/widgets/menulabel.vala
+++ b/libserver/widgets/menulabel.vala
@@ -132,7 +132,7 @@ public class Gnomenu.MenuLabel: Gtk.Container {
 		}
 	}
 	public override bool mnemonic_activate (bool arg1) {
-		debug("mnemonic_activate %s", arg1.to_string());
+/*		debug("mnemonic_activate %s", arg1.to_string());*/
 		return _label_widget.mnemonic_activate(arg1);
 	}
 
@@ -146,7 +146,7 @@ public class Gnomenu.MenuLabel: Gtk.Container {
 			return;
 		}
 		child.mnemonic_activate += (obj, arg1) => {
-			debug("mnemonic activate: %s", (obj as Gtk.Label).label);
+/*			debug("mnemonic activate: %s", (obj as Gtk.Label).label);*/
 			return false;
 		};
 		children.append(child as Gtk.Label);
diff --git a/libserver/window.vala b/libserver/window.vala
index 060d35a..01c190d 100644
--- a/libserver/window.vala
+++ b/libserver/window.vala
@@ -131,7 +131,7 @@ public class Gnomenu.Window : GLib.Object {
 
 	public virtual signal void property_notify_event(string prop) {
 		if(prop == WM_TRANSIENT_FOR) {
-			debug("transient property changed");
+/*			debug("transient property changed");*/
 			recompute_transient();
 			menu_context_changed();
 		} else {
@@ -141,7 +141,7 @@ public class Gnomenu.Window : GLib.Object {
 
 	private void rewire_globalmenu_events(string prop) {
 		if(prop == NET_GLOBALMENU_MENU_CONTEXT) {
-			debug("window (%p) prop menu context is reported changed", this);
+/*			debug("window (%p) prop menu context is reported changed", this); */
 			rewire_target.menu_context_changed();
 		} else
 		if(prop == NET_GLOBALMENU_MENU_EVENT) {
@@ -194,7 +194,7 @@ public class Gnomenu.Window : GLib.Object {
 			ulong new_xid = wnck_transient.get_xid();
 			if(old == null || new_xid != old.get_xid()) {
 				transient = foreign_new(new_xid);
-				debug("transient-for changed to = '%s'", transient.get("WM_CLASS"));
+/*				debug("transient-for changed to = '%s'", transient.get("WM_CLASS"));*/
 			}
 		}
 	}
