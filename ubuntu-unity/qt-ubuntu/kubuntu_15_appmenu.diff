appmenu-qt patch for Qt 4.7.3.

diff --git a/src/gui/widgets/qabstractplatformmenubar_p.h b/src/gui/widgets/qabstractplatformmenubar_p.h
new file mode 100644
index 0000000..cb4e5cb
--- /dev/null
+++ b/src/gui/widgets/qabstractplatformmenubar_p.h
@@ -0,0 +1,107 @@
+/****************************************************************************
+**
+** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** No Commercial Usage
+** This file contains pre-release code and may not be distributed.
+** You may use this file in accordance with the terms and conditions
+** contained in the Technology Preview License Agreement accompanying
+** this package.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU Lesser General Public License version 2.1 requirements
+** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights.  These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** If you have questions regarding the use of this file, please contact
+** Nokia at qt-info@nokia.com.
+**
+**
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+#ifndef QABSTRACTPLATFORMMENUBAR_P_H
+#define QABSTRACTPLATFORMMENUBAR_P_H
+
+#include <qfactoryinterface.h>
+#include <qglobal.h>
+#include <qplugin.h>
+
+#ifndef QT_NO_MENUBAR
+
+QT_BEGIN_NAMESPACE
+
+class QAction;
+class QActionEvent;
+class QEvent;
+class QMenuBar;
+class QObject;
+class QWidget;
+
+class QAbstractPlatformMenuBar;
+
+struct QPlatformMenuBarFactoryInterface : public QFactoryInterface
+{
+    virtual QAbstractPlatformMenuBar *create() = 0;
+};
+
+#define QPlatformMenuBarFactoryInterface_iid "com.nokia.qt.QPlatformMenuBarFactoryInterface"
+Q_DECLARE_INTERFACE(QPlatformMenuBarFactoryInterface, QPlatformMenuBarFactoryInterface_iid)
+
+/*!
+    The platform-specific implementation of a menubar
+*/
+class QAbstractPlatformMenuBar
+{
+public:
+    virtual ~QAbstractPlatformMenuBar() {}
+
+    virtual void init(QMenuBar *) = 0;
+
+    virtual void setVisible(bool visible) = 0;
+
+    virtual void actionEvent(QActionEvent *) = 0;
+
+    virtual void handleReparent(QWidget *oldParent, QWidget *newParent, QWidget *oldWindow, QWidget *newWindow) = 0;
+
+    virtual bool allowCornerWidgets() const = 0;
+
+    virtual void popupAction(QAction *) = 0;
+
+    virtual void setNativeMenuBar(bool) = 0;
+
+    virtual bool isNativeMenuBar() const = 0;
+
+    /*!
+        Return true if the native menubar is capable of listening to the
+        shortcut keys. If false is returned, QMenuBar will trigger actions on
+        shortcut itself.
+    */
+    virtual bool shortcutsHandledByNativeMenuBar() const = 0;
+
+    virtual bool menuBarEventFilter(QObject *, QEvent *event) = 0;
+};
+
+QT_END_NAMESPACE
+
+#endif // QT_NO_MENUBAR
+
+#endif // QABSTRACTPLATFORMMENUBAR_P_H
diff --git a/src/gui/widgets/qmenu_mac.mm b/src/gui/widgets/qmenu_mac.mm
index 9f7b130..ef8c0bf 100644
--- a/src/gui/widgets/qmenu_mac.mm
+++ b/src/gui/widgets/qmenu_mac.mm
@@ -1643,7 +1643,7 @@ QMenuBarPrivate::QMacMenuBarPrivate::~QMacMenuBarPrivate()
 }
 
 void
-QMenuBarPrivate::QMacMenuBarPrivate::addAction(QAction *a, QMacMenuAction *before)
+QMenuBarPrivate::QMacMenuBarPrivate::addAction(QAction *a, QAction *before)
 {
     if (a->isSeparator() || !menu)
         return;
@@ -1653,7 +1653,7 @@ QMenuBarPrivate::QMacMenuBarPrivate::addAction(QAction *a, QMacMenuAction *befor
 #ifndef QT_MAC_USE_COCOA
     action->command = qt_mac_menu_static_cmd_id++;
 #endif
-    addAction(action, before);
+    addAction(action, findAction(before));
 }
 
 void
diff --git a/src/gui/widgets/qmenu_p.h b/src/gui/widgets/qmenu_p.h
index 809555d..6be7da9 100644
--- a/src/gui/widgets/qmenu_p.h
+++ b/src/gui/widgets/qmenu_p.h
@@ -154,6 +154,9 @@ public:
 #endif
                       scroll(0), eventLoop(0), tearoff(0), tornoff(0), tearoffHighlighted(0),
                       hasCheckableItems(0), sloppyAction(0), doChildEffects(false)
+#ifdef QT3_SUPPORT
+                      ,emitHighlighted(false)
+#endif
 #ifdef Q_WS_MAC
                       ,mac_menu(0)
 #endif
@@ -163,9 +166,6 @@ public:
 #ifdef Q_WS_S60
                       ,symbian_menu(0)
 #endif
-#ifdef QT3_SUPPORT
-                      ,emitHighlighted(false)
-#endif
     { }
     ~QMenuPrivate()
     {
diff --git a/src/gui/widgets/qmenu_symbian.cpp b/src/gui/widgets/qmenu_symbian.cpp
index 2f9ada6..6fadc34 100644
--- a/src/gui/widgets/qmenu_symbian.cpp
+++ b/src/gui/widgets/qmenu_symbian.cpp
@@ -397,12 +397,12 @@ void QMenuPrivate::QSymbianMenuPrivate::rebuild(bool)
 {
 }
 
-void QMenuBarPrivate::QSymbianMenuBarPrivate::addAction(QAction *a, QSymbianMenuAction *before)
+void QMenuBarPrivate::QSymbianMenuBarPrivate::addAction(QAction *a, QAction *before)
 {
     QSymbianMenuAction *action = new QSymbianMenuAction;
     action->action = a;
     action->command = qt_symbian_menu_static_cmd_id++;
-    addAction(action, before);
+    addAction(action, findAction(before));
 }
 
 void QMenuBarPrivate::QSymbianMenuBarPrivate::addAction(QSymbianMenuAction *action, QSymbianMenuAction *before)
diff --git a/src/gui/widgets/qmenu_wince.cpp b/src/gui/widgets/qmenu_wince.cpp
index 24df6a2..383820a 100644
--- a/src/gui/widgets/qmenu_wince.cpp
+++ b/src/gui/widgets/qmenu_wince.cpp
@@ -506,12 +506,12 @@ void QMenuPrivate::QWceMenuPrivate::removeAction(QWceMenuAction *action)
     rebuild();
 }
 
-void QMenuBarPrivate::QWceMenuBarPrivate::addAction(QAction *a, QWceMenuAction *before)
+void QMenuBarPrivate::QWceMenuBarPrivate::addAction(QAction *a, QAction *before)
 {
     QWceMenuAction *action = new QWceMenuAction;
     action->action = a;
     action->command = qt_wce_menu_static_cmd_id++;
-    addAction(action, before);
+    addAction(action, findAction(before));
 }
 
 void QMenuBarPrivate::QWceMenuBarPrivate::addAction(QWceMenuAction *action, QWceMenuAction *before)
diff --git a/src/gui/widgets/qmenubar.cpp b/src/gui/widgets/qmenubar.cpp
index 6a41c74..4d42ac4 100644
--- a/src/gui/widgets/qmenubar.cpp
+++ b/src/gui/widgets/qmenubar.cpp
@@ -55,6 +55,9 @@
 #include <qtoolbar.h>
 #include <qtoolbutton.h>
 #include <qwhatsthis.h>
+#ifdef Q_WS_X11
+#include <qpluginloader.h>
+#endif
 
 #ifndef QT_NO_MENUBAR
 
@@ -66,6 +69,9 @@
 #include "qmenu_p.h"
 #include "qmenubar_p.h"
 #include "qdebug.h"
+#ifdef Q_WS_X11
+#include "qmenubar_x11_p.h"
+#endif
 
 #ifdef Q_WS_WINCE
 extern bool qt_wince_is_mobile(); //defined in qguifunctions_wce.cpp
@@ -173,7 +179,11 @@ void QMenuBarPrivate::updateGeometries()
         return;
     int q_width = q->width()-(q->style()->pixelMetric(QStyle::PM_MenuBarPanelWidth, 0, q)*2);
     int q_start = -1;
-    if(leftWidget || rightWidget) {
+    if(
+#ifdef Q_WS_X11
+        platformMenuBar->allowCornerWidgets() &&
+#endif
+        (leftWidget || rightWidget)) {
         int vmargin = q->style()->pixelMetric(QStyle::PM_MenuBarVMargin, 0, q)
                       + q->style()->pixelMetric(QStyle::PM_MenuBarPanelWidth, 0, q);
         int hmargin = q->style()->pixelMetric(QStyle::PM_MenuBarHMargin, 0, q)
@@ -204,7 +214,11 @@ void QMenuBarPrivate::updateGeometries()
     calcActionRects(q_width, q_start);
     currentAction = 0;
 #ifndef QT_NO_SHORTCUT
-    if(itemsDirty) {
+    if(
+#ifdef Q_WS_X11
+        !platformMenuBar->shortcutsHandledByNativeMenuBar() &&
+#endif
+        itemsDirty) {
         for(int j = 0; j < shortcutIndexMap.size(); ++j)
             q->releaseShortcut(shortcutIndexMap.value(j));
         shortcutIndexMap.resize(0); // faster than clear
@@ -212,6 +226,12 @@ void QMenuBarPrivate::updateGeometries()
             shortcutIndexMap.append(q->grabShortcut(QKeySequence::mnemonic(actions.at(i)->text())));
     }
 #endif
+#ifdef Q_WS_X11
+    if(q->isNativeMenuBar()) {//nothing to see here folks, move along..
+        itemsDirty = false;
+        return;
+    }
+#endif
     itemsDirty = false;
 
     hiddenActions.clear();
@@ -743,6 +763,11 @@ void QMenuBarPrivate::init()
         QApplication::setAttribute(Qt::AA_DontUseNativeMenuBar, true);
     }
 #endif
+#ifdef Q_WS_X11
+    platformMenuBar = qt_guiPlatformMenuBarFactory()->create();
+    platformMenuBar->init(q);
+#endif
+
     q->setBackgroundRole(QPalette::Button);
     oldWindow = oldParent = 0;
 #ifdef QT3_SUPPORT
@@ -751,6 +776,10 @@ void QMenuBarPrivate::init()
 #ifdef QT_SOFTKEYS_ENABLED
     menuBarAction = 0;
 #endif
+#ifdef Q_WS_X11
+    cornerWidgetToolBar = 0;
+    cornerWidgetContainer = 0;
+#endif
     handleReparent();
     q->setMouseTracking(q->style()->styleHint(QStyle::SH_MenuBar_MouseTracking, 0, q));
 
@@ -821,6 +850,10 @@ QMenuBar::~QMenuBar()
     Q_D(QMenuBar);
     d->symbianDestroyMenuBar();
 #endif
+#ifdef Q_WS_X11
+    Q_D(QMenuBar);
+    delete d->cornerWidgetToolBar;
+#endif
 }
 
 /*!
@@ -1072,11 +1105,16 @@ void QMenuBar::paintEvent(QPaintEvent *e)
 */
 void QMenuBar::setVisible(bool visible)
 {
+#ifdef Q_WS_X11
+    Q_D(QMenuBar);
+    d->platformMenuBar->setVisible(visible);
+#else
 #if defined(Q_WS_MAC) || defined(Q_OS_WINCE) || defined(Q_WS_S60)
     if (isNativeMenuBar())
         return;
 #endif
     QWidget::setVisible(visible);
+#endif // Q_WS_X11
 }
 
 /*!
@@ -1272,6 +1310,9 @@ void QMenuBar::actionEvent(QActionEvent *e)
 {
     Q_D(QMenuBar);
     d->itemsDirty = true;
+#ifdef Q_WS_X11
+    d->platformMenuBar->actionEvent(e);
+#endif
 #if defined (Q_WS_MAC) || defined(Q_OS_WINCE) || defined(Q_WS_S60)
     if (isNativeMenuBar()) {
 #ifdef Q_WS_MAC
@@ -1284,7 +1325,7 @@ void QMenuBar::actionEvent(QActionEvent *e)
         if (!nativeMenuBar)
             return;
         if(e->type() == QEvent::ActionAdded)
-            nativeMenuBar->addAction(e->action(), nativeMenuBar->findAction(e->before()));
+            nativeMenuBar->addAction(e->action(), e->before());
         else if(e->type() == QEvent::ActionRemoved)
             nativeMenuBar->removeAction(e->action());
         else if(e->type() == QEvent::ActionChanged)
@@ -1366,6 +1407,10 @@ void QMenuBarPrivate::handleReparent()
             newWindow->installEventFilter(q);
     }
 
+#ifdef Q_WS_X11
+    platformMenuBar->handleReparent(oldParent, newParent, oldWindow, newWindow);
+#endif
+
     oldParent = newParent;
     oldWindow = newWindow;
 
@@ -1563,6 +1608,11 @@ bool QMenuBar::event(QEvent *e)
 bool QMenuBar::eventFilter(QObject *object, QEvent *event)
 {
     Q_D(QMenuBar);
+#ifdef Q_WS_X11
+    if (d->platformMenuBar->menuBarEventFilter(object, event)) {
+        return true;
+    }
+#endif
     if (object == parent() && object) {
 #ifdef QT3_SUPPORT
         if (d->doAutoResize && event->type() == QEvent::Resize) {
@@ -1656,7 +1706,7 @@ QRect QMenuBar::actionGeometry(QAction *act) const
 QSize QMenuBar::minimumSizeHint() const
 {
     Q_D(const QMenuBar);
-#if defined(Q_WS_MAC) || defined(Q_WS_WINCE) || defined(Q_WS_S60)
+#if defined(Q_WS_MAC) || defined(Q_WS_WINCE) || defined(Q_WS_S60) || defined(Q_WS_X11)
     const bool as_gui_menubar = !isNativeMenuBar();
 #else
     const bool as_gui_menubar = true;
@@ -1679,6 +1729,9 @@ QSize QMenuBar::minimumSizeHint() const
         ret += QSize(2*fw + hmargin, 2*fw + vmargin);
     }
     int margin = 2*vmargin + 2*fw + spaceBelowMenuBar;
+#ifdef Q_WS_X11
+    if (d->platformMenuBar->allowCornerWidgets()) {
+#endif
     if(d->leftWidget) {
         QSize sz = d->leftWidget->minimumSizeHint();
         ret.setWidth(ret.width() + sz.width());
@@ -1691,6 +1744,9 @@ QSize QMenuBar::minimumSizeHint() const
         if(sz.height() + margin > ret.height())
             ret.setHeight(sz.height() + margin);
     }
+#ifdef Q_WS_X11
+    }
+#endif
     if(as_gui_menubar) {
         QStyleOptionMenuItem opt;
         opt.rect = rect();
@@ -1712,7 +1768,7 @@ QSize QMenuBar::minimumSizeHint() const
 QSize QMenuBar::sizeHint() const
 {
     Q_D(const QMenuBar);
-#if defined(Q_WS_MAC) || defined(Q_WS_WINCE) || defined(Q_WS_S60)
+#if defined(Q_WS_MAC) || defined(Q_WS_WINCE) || defined(Q_WS_S60) || defined(Q_WS_X11)
     const bool as_gui_menubar = !isNativeMenuBar();
 #else
     const bool as_gui_menubar = true;
@@ -1738,6 +1794,9 @@ QSize QMenuBar::sizeHint() const
         ret += QSize(fw + hmargin, fw + vmargin);
     }
     int margin = 2*vmargin + 2*fw + spaceBelowMenuBar;
+#ifdef Q_WS_X11
+    if(d->platformMenuBar->allowCornerWidgets()) {
+#endif
     if(d->leftWidget) {
         QSize sz = d->leftWidget->sizeHint();
         ret.setWidth(ret.width() + sz.width());
@@ -1750,6 +1809,9 @@ QSize QMenuBar::sizeHint() const
         if(sz.height() + margin > ret.height())
             ret.setHeight(sz.height() + margin);
     }
+#ifdef Q_WS_X11
+    }
+#endif
     if(as_gui_menubar) {
         QStyleOptionMenuItem opt;
         opt.rect = rect();
@@ -1771,7 +1833,7 @@ QSize QMenuBar::sizeHint() const
 int QMenuBar::heightForWidth(int) const
 {
     Q_D(const QMenuBar);
-#if defined(Q_WS_MAC) || defined(Q_WS_WINCE) || defined(Q_WS_S60)
+#if defined(Q_WS_MAC) || defined(Q_WS_WINCE) || defined(Q_WS_S60) || defined(Q_WS_X11)
     const bool as_gui_menubar = !isNativeMenuBar();
 #else
     const bool as_gui_menubar = true;
@@ -1791,10 +1853,16 @@ int QMenuBar::heightForWidth(int) const
         height += 2*vmargin;
     }
     int margin = 2*vmargin + 2*fw + spaceBelowMenuBar;
+#ifdef Q_WS_X11
+    if(d->platformMenuBar->allowCornerWidgets()) {
+#endif
     if(d->leftWidget)
         height = qMax(d->leftWidget->sizeHint().height() + margin, height);
     if(d->rightWidget)
         height = qMax(d->rightWidget->sizeHint().height() + margin, height);
+#ifdef Q_WS_X11
+    }
+#endif
     if(as_gui_menubar) {
         QStyleOptionMenuItem opt;
         opt.init(this);
@@ -1814,7 +1882,15 @@ void QMenuBarPrivate::_q_internalShortcutActivated(int id)
 {
     Q_Q(QMenuBar);
     QAction *act = actions.at(id);
-    setCurrentAction(act, true, true);
+#ifdef Q_WS_X11
+    if (q->isNativeMenuBar()) {
+        platformMenuBar->popupAction(act);
+    } else {
+#endif
+        setCurrentAction(act, true, true);
+#ifdef Q_WS_X11
+    }
+#endif
     if (act && !act->menu()) {
         activateAction(act, QAction::Trigger);
         //100 is the same as the default value in QPushButton::animateClick
@@ -1835,6 +1911,39 @@ void QMenuBarPrivate::_q_updateLayout()
     }
 }
 
+#ifdef Q_WS_X11
+void QMenuBarPrivate::updateCornerWidgetToolBar()
+{
+    Q_Q(QMenuBar);
+    if (!cornerWidgetToolBar) {
+        QMainWindow *window = qobject_cast<QMainWindow *>(q->window());
+        if (!window) {
+            qWarning() << "Menubar parent is not a QMainWindow, not showing corner widgets";
+            return;
+        }
+        cornerWidgetToolBar = window->addToolBar(QApplication::translate("QMenuBar", "Corner Toolbar"));
+        cornerWidgetToolBar->setObjectName(QLatin1String("CornerToolBar"));
+        cornerWidgetContainer = new QWidget;
+        cornerWidgetToolBar->addWidget(cornerWidgetContainer);
+        new QHBoxLayout(cornerWidgetContainer);
+    } else {
+        QLayout *layout = cornerWidgetContainer->layout();
+        while (layout->count() > 0) {
+            layout->takeAt(0);
+        }
+    }
+    if (leftWidget) {
+        leftWidget->setParent(cornerWidgetContainer);
+        cornerWidgetContainer->layout()->addWidget(leftWidget);
+    }
+    if (rightWidget) {
+        rightWidget->setParent(cornerWidgetContainer);
+        cornerWidgetContainer->layout()->addWidget(rightWidget);
+    }
+}
+#endif
+
+
 /*!
     \fn void QMenuBar::setCornerWidget(QWidget *widget, Qt::Corner corner)
 
@@ -1867,10 +1976,18 @@ void QMenuBar::setCornerWidget(QWidget *w, Qt::Corner corner)
         return;
     }
 
+#ifdef Q_WS_X11
+    if(!d->platformMenuBar->allowCornerWidgets()) {
+        d->updateCornerWidgetToolBar();
+    } else {
+#endif
     if (w) {
         w->setParent(this);
         w->installEventFilter(this);
     }
+#ifdef Q_WS_X11
+    }
+#endif
 
     d->_q_updateLayout();
 }
@@ -1920,6 +2037,9 @@ QWidget *QMenuBar::cornerWidget(Qt::Corner corner) const
 void QMenuBar::setNativeMenuBar(bool nativeMenuBar)
 {
     Q_D(QMenuBar);
+#ifdef Q_WS_X11
+    d->platformMenuBar->setNativeMenuBar(nativeMenuBar);
+#else
     if (d->nativeMenuBar == -1 || (nativeMenuBar != bool(d->nativeMenuBar))) {
         d->nativeMenuBar = nativeMenuBar;
 #ifdef Q_WS_MAC
@@ -1944,15 +2064,20 @@ void QMenuBar::setNativeMenuBar(bool nativeMenuBar)
 	    setVisible(true);
 #endif
     }
+#endif // Q_WS_X11
 }
 
 bool QMenuBar::isNativeMenuBar() const
 {
     Q_D(const QMenuBar);
+#ifdef Q_WS_X11
+    return d->platformMenuBar->isNativeMenuBar();
+#else
     if (d->nativeMenuBar == -1) {
         return !QApplication::instance()->testAttribute(Qt::AA_DontUseNativeMenuBar);
     }
     return d->nativeMenuBar;
+#endif
 }
 
 /*!
diff --git a/src/gui/widgets/qmenubar_p.h b/src/gui/widgets/qmenubar_p.h
index 1ac694e..9a1f758 100644
--- a/src/gui/widgets/qmenubar_p.h
+++ b/src/gui/widgets/qmenubar_p.h
@@ -47,7 +47,7 @@
 //  -------------
 //
 // This file is not part of the Qt API.  It exists purely as an
-// implementation detail.  This header file may change from version to
+// platformMenuBarementation detail.  This header file may change from version to
 // version without notice, or even be removed.
 //
 // We mean it.
@@ -61,6 +61,10 @@
 #include "qguifunctions_wince.h"
 #endif
 
+#ifdef Q_WS_X11
+#include "qabstractplatformmenubar_p.h"
+#endif
+
 #ifndef QT_NO_MENUBAR
 #ifdef Q_WS_S60
 class CCoeControl;
@@ -71,21 +75,27 @@ class CEikMenuBar;
 QT_BEGIN_NAMESPACE
 
 #ifndef QT_NO_MENUBAR
+class QToolBar;
 class QMenuBarExtension;
 class QMenuBarPrivate : public QWidgetPrivate
 {
     Q_DECLARE_PUBLIC(QMenuBar)
 public:
     QMenuBarPrivate() : itemsDirty(0), currentAction(0), mouseDown(0),
-                         closePopupMode(0), defaultPopDown(1), popupState(0), keyboardState(0), altPressed(0),
-                         nativeMenuBar(-1), doChildEffects(false)
+                         closePopupMode(0), defaultPopDown(1), popupState(0), keyboardState(0), altPressed(0)
+#ifndef Q_WS_X11
+                         , nativeMenuBar(-1)
+#endif
+                         , doChildEffects(false)
 #ifdef QT3_SUPPORT
                          , doAutoResize(false)
 #endif
 #ifdef Q_WS_MAC
                          , mac_menubar(0)
 #endif
-
+#ifdef Q_WS_X11
+                         , platformMenuBar(0)
+#endif
 #ifdef Q_WS_WINCE
                          , wce_menubar(0), wceClassicMenu(false)
 #endif
@@ -96,6 +106,9 @@ public:
         { }
     ~QMenuBarPrivate()
         {
+#ifdef Q_WS_X11
+            delete platformMenuBar;
+#endif
 #ifdef Q_WS_MAC
             delete mac_menubar;
 #endif
@@ -136,8 +149,9 @@ public:
     uint keyboardState : 1, altPressed : 1;
     QPointer<QWidget> keyboardFocusWidget;
 
-
+#ifndef Q_WS_X11
     int nativeMenuBar : 3;  // Only has values -1, 0, and 1
+#endif
     //firing of events
     void activateAction(QAction *, QAction::ActionEvent);
 
@@ -173,6 +187,9 @@ public:
 #ifdef QT3_SUPPORT
     bool doAutoResize;
 #endif
+#ifdef Q_WS_X11
+    QAbstractPlatformMenuBar *platformMenuBar;
+#endif
 #ifdef Q_WS_MAC
     //mac menubar binding
     struct QMacMenuBarPrivate {
@@ -181,7 +198,7 @@ public:
         QMacMenuBarPrivate();
         ~QMacMenuBarPrivate();
 
-        void addAction(QAction *, QMacMenuAction* =0);
+        void addAction(QAction *, QAction* =0);
         void addAction(QMacMenuAction *, QMacMenuAction* =0);
         void syncAction(QMacMenuAction *);
         inline void syncAction(QAction *a) { syncAction(findAction(a)); }
@@ -220,7 +237,7 @@ public:
 
         QWceMenuBarPrivate(QMenuBarPrivate *menubar);
         ~QWceMenuBarPrivate();
-        void addAction(QAction *, QWceMenuAction* =0);
+        void addAction(QAction *, QAction* =0);
         void addAction(QWceMenuAction *, QWceMenuAction* =0);
         void syncAction(QWceMenuAction *);
         inline void syncAction(QAction *a) { syncAction(findAction(a)); }
@@ -250,7 +267,7 @@ public:
         QMenuBarPrivate *d;
         QSymbianMenuBarPrivate(QMenuBarPrivate *menubar);
         ~QSymbianMenuBarPrivate();
-        void addAction(QAction *, QSymbianMenuAction* =0);
+        void addAction(QAction *, QAction* =0);
         void addAction(QSymbianMenuAction *, QSymbianMenuAction* =0);
         void syncAction(QSymbianMenuAction *);
         inline void syncAction(QAction *a) { syncAction(findAction(a)); }
@@ -273,6 +290,12 @@ public:
 #ifdef QT_SOFTKEYS_ENABLED
     QAction *menuBarAction;
 #endif
+
+#ifdef Q_WS_X11
+    void updateCornerWidgetToolBar();
+    QToolBar *cornerWidgetToolBar;
+    QWidget *cornerWidgetContainer;
+#endif
 };
 #endif
 
diff --git a/src/gui/widgets/qmenubar_x11.cpp b/src/gui/widgets/qmenubar_x11.cpp
new file mode 100644
index 0000000..37c085f
--- /dev/null
+++ b/src/gui/widgets/qmenubar_x11.cpp
@@ -0,0 +1,138 @@
+/****************************************************************************
+**
+** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** No Commercial Usage
+** This file contains pre-release code and may not be distributed.
+** You may use this file in accordance with the terms and conditions
+** contained in the Technology Preview License Agreement accompanying
+** this package.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU Lesser General Public License version 2.1 requirements
+** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights.  These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** If you have questions regarding the use of this file, please contact
+** Nokia at qt-info@nokia.com.
+**
+**
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+#include "qmenubar_x11_p.h"
+
+#ifndef QT_NO_MENUBAR
+
+#include "qapplication.h"
+#include "qdebug.h"
+#include "qevent.h"
+#include "qmenu.h"
+#include "qmenubar.h"
+
+#include <private/qfactoryloader_p.h>
+
+QT_BEGIN_NAMESPACE
+
+QX11MenuBar::~QX11MenuBar()
+{
+}
+
+void QX11MenuBar::init(QMenuBar *_menuBar)
+{
+    nativeMenuBar = -1;
+    menuBar = _menuBar;
+}
+
+void QX11MenuBar::setVisible(bool visible)
+{
+    menuBar->QWidget::setVisible(visible);
+}
+
+void QX11MenuBar::actionEvent(QActionEvent *e)
+{
+    Q_UNUSED(e);
+}
+
+void QX11MenuBar::handleReparent(QWidget *oldParent, QWidget *newParent, QWidget *oldWindow, QWidget *newWindow)
+{
+    Q_UNUSED(oldParent)
+    Q_UNUSED(newParent)
+    Q_UNUSED(oldWindow)
+    Q_UNUSED(newWindow)
+}
+
+bool QX11MenuBar::allowCornerWidgets() const
+{
+    return true;
+}
+
+void QX11MenuBar::popupAction(QAction *)
+{
+}
+
+void QX11MenuBar::setNativeMenuBar(bool value)
+{
+    if (nativeMenuBar == -1 || (value != bool(nativeMenuBar))) {
+        nativeMenuBar = value;
+    }
+}
+
+bool QX11MenuBar::isNativeMenuBar() const
+{
+    return false;
+}
+
+bool QX11MenuBar::shortcutsHandledByNativeMenuBar() const
+{
+    return false;
+}
+
+bool QX11MenuBar::menuBarEventFilter(QObject *, QEvent *)
+{
+    return false;
+}
+
+struct QX11MenuBarFactory : public QPlatformMenuBarFactoryInterface
+{
+    QAbstractPlatformMenuBar *create() { return new QX11MenuBar; }
+    virtual QStringList keys() const { return QStringList(); }
+};
+
+QPlatformMenuBarFactoryInterface *qt_guiPlatformMenuBarFactory()
+{
+    static QPlatformMenuBarFactoryInterface *factory = 0;
+    if (!factory) {
+#ifndef QT_NO_LIBRARY
+        QFactoryLoader loader(QPlatformMenuBarFactoryInterface_iid, QLatin1String("/menubar"));
+        factory = qobject_cast<QPlatformMenuBarFactoryInterface *>(loader.instance(QLatin1String("default")));
+#endif // QT_NO_LIBRARY
+        if(!factory) {
+            static QX11MenuBarFactory def;
+            factory = &def;
+        }
+    }
+    return factory;
+}
+
+QT_END_NAMESPACE
+
+#endif // QT_NO_MENUBAR
diff --git a/src/gui/widgets/qmenubar_x11_p.h b/src/gui/widgets/qmenubar_x11_p.h
new file mode 100644
index 0000000..1c43b04
--- /dev/null
+++ b/src/gui/widgets/qmenubar_x11_p.h
@@ -0,0 +1,86 @@
+/****************************************************************************
+**
+** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** No Commercial Usage
+** This file contains pre-release code and may not be distributed.
+** You may use this file in accordance with the terms and conditions
+** contained in the Technology Preview License Agreement accompanying
+** this package.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU Lesser General Public License version 2.1 requirements
+** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights.  These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** If you have questions regarding the use of this file, please contact
+** Nokia at qt-info@nokia.com.
+**
+**
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+#ifndef QX11MENUBAR_P_H
+#define QX11MENUBAR_P_H
+
+#ifndef QT_NO_MENUBAR
+
+#include "qabstractplatformmenubar_p.h"
+
+QT_BEGIN_NAMESPACE
+
+class QMenuBar;
+
+class QX11MenuBar : public QAbstractPlatformMenuBar
+{
+public:
+    ~QX11MenuBar();
+
+    virtual void init(QMenuBar *);
+
+    virtual void setVisible(bool visible);
+
+    virtual void actionEvent(QActionEvent *e);
+
+    virtual void handleReparent(QWidget *oldParent, QWidget *newParent, QWidget *oldWindow, QWidget *newWindow);
+
+    virtual bool allowCornerWidgets() const;
+
+    virtual void popupAction(QAction*);
+
+    virtual void setNativeMenuBar(bool);
+    virtual bool isNativeMenuBar() const;
+
+    virtual bool shortcutsHandledByNativeMenuBar() const;
+    virtual bool menuBarEventFilter(QObject *, QEvent *event);
+
+private:
+    QMenuBar *menuBar;
+    int nativeMenuBar : 3;  // Only has values -1, 0, and 1
+};
+
+QPlatformMenuBarFactoryInterface *qt_guiPlatformMenuBarFactory();
+
+QT_END_NAMESPACE
+
+#endif // QT_NO_MENUBAR
+
+#endif /* QX11MENUBAR_P_H */
diff --git a/src/gui/widgets/widgets.pri b/src/gui/widgets/widgets.pri
index 937b8d6..bd8a735 100644
--- a/src/gui/widgets/widgets.pri
+++ b/src/gui/widgets/widgets.pri
@@ -144,6 +144,14 @@ SOURCES += \
         widgets/qplaintextedit.cpp \
         widgets/qprintpreviewwidget.cpp
 
+x11: {
+    HEADERS += \
+        widgets/qabstractplatformmenubar_p.h
+
+    SOURCES += \
+        widgets/qmenubar_x11.cpp
+}
+
 !embedded:mac {
     HEADERS += widgets/qmacnativewidget_mac.h \
                widgets/qmaccocoaviewcontainer_mac.h
