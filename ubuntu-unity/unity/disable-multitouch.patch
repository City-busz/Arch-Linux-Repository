diff -Naur unity-4.24.0.orig/CMakeLists.txt unity-4.24.0/CMakeLists.txt
--- unity-4.24.0.orig/CMakeLists.txt	2011-10-12 14:02:40.000000000 +0200
+++ unity-4.24.0/CMakeLists.txt	2011-11-12 18:08:29.953890912 +0100
@@ -121,7 +121,7 @@
 #
 # Compiz Plugins
 #
-set (UNITY_PLUGIN_DEPS "compiz;nux-1.0 >= 1.2.2;libbamf3;dee-1.0;gio-2.0;gio-unix-2.0;dbusmenu-glib-0.4;x11;libstartup-notification-1.0;gthread-2.0;indicator3-0.4;atk;unity-misc >= 0.4.0;gconf-2.0;libutouch-geis;gtk+-3.0 >= 3.1;sigc++-2.0;json-glib-1.0;libnotify;gnome-desktop-3.0")
+set (UNITY_PLUGIN_DEPS "compiz;nux-1.0 >= 1.2.2;libbamf3;dee-1.0;gio-2.0;gio-unix-2.0;dbusmenu-glib-0.4;x11;libstartup-notification-1.0;gthread-2.0;indicator3-0.4;atk;unity-misc >= 0.4.0;gconf-2.0;gtk+-3.0 >= 3.1;sigc++-2.0;json-glib-1.0;libnotify;gnome-desktop-3.0")
 
 
 find_package (Compiz REQUIRED)
diff -Naur unity-4.24.0.orig/plugins/unityshell/src/GeisAdapter.cpp unity-4.24.0/plugins/unityshell/src/GeisAdapter.cpp
--- unity-4.24.0.orig/plugins/unityshell/src/GeisAdapter.cpp	2011-10-12 14:02:40.000000000 +0200
+++ unity-4.24.0/plugins/unityshell/src/GeisAdapter.cpp	1970-01-01 01:00:00.000000000 +0100
@@ -1,497 +0,0 @@
-// -*- Mode: C++; indent-tabs-mode: nil; tab-width: 2 -*-
-/*
- * Copyright (C) 2010 Canonical Ltd
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 3 as
- * published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- *
- * Authored by: Jason Smith <jason.smith@canonical.com>
- */
-
-#include <glib.h>
-#include <gdk/gdkx.h>
-#include "GeisAdapter.h"
-
-GeisAdapter* GeisAdapter::_default = 0;
-
-/* static */
-GeisAdapter*
-GeisAdapter::Default()
-{
-  if (!_default)
-    return _default = new GeisAdapter();  // should be using a dictionary
-  return _default;
-}
-
-GeisAdapter::GeisAdapter()
-{
-  RegisterRootInstance();
-}
-
-GeisAdapter::~GeisAdapter()
-{
-}
-
-void
-GeisAdapter::Run()
-{
-  int fd = -1;
-  GeisStatus status;
-
-  status = geis_configuration_get_value(_root_instance, GEIS_CONFIG_UNIX_FD, &fd);
-
-  if (status != GEIS_STATUS_SUCCESS)
-    return;
-
-  _watch_id = g_io_add_watch(g_io_channel_unix_new(fd),
-                             G_IO_IN,
-                             &GeisAdapter::OnWatchIn,
-                             this);
-}
-
-gboolean
-GeisAdapter::OnWatchIn(GIOChannel* source, GIOCondition condition, gpointer data)
-{
-  GeisAdapter* self = static_cast<GeisAdapter*>(data);
-  geis_event_dispatch(self->_root_instance);
-  return true;
-}
-
-void
-GeisAdapter::InputDeviceAdded(void* cookie, GeisInputDeviceId device_id, void* attrs)
-{
-}
-
-
-void
-GeisAdapter::InputDeviceChanged(void* cookie, GeisInputDeviceId device_id, void* attrs)
-{
-}
-
-
-void
-GeisAdapter::InputDeviceRemoved(void* cookie, GeisInputDeviceId device_id, void* attrs)
-{
-}
-
-void
-GeisAdapter::GestureAdded(void* cookie, GeisGestureType gesture_type, GeisGestureId gesture_id, GeisSize count, GeisGestureAttr* attrs)
-{
-}
-
-void
-GeisAdapter::GestureRemoved(void* cookie, GeisGestureType gesture_type, GeisGestureId gesture_id, GeisSize count, GeisGestureAttr* attrs)
-{
-}
-
-void
-GeisAdapter::GestureStart(void* cookie, GeisGestureType gesture_type, GeisGestureId gesture_id, GeisSize count, GeisGestureAttr* attrs)
-{
-  GeisAdapter* self = static_cast<GeisAdapter*>(cookie);
-
-  if (gesture_type == GEIS_GESTURE_PRIMITIVE_DRAG)
-  {
-    GeisDragData* data = self->ProcessDragGesture(count, attrs);
-    data->id = gesture_id;
-    self->drag_start.emit(data);
-    g_free(data);
-  }
-  else if (gesture_type == GEIS_GESTURE_PRIMITIVE_ROTATE)
-  {
-    GeisRotateData* data = self->ProcessRotateGesture(count, attrs);
-    data->id = gesture_id;
-    self->rotate_start.emit(data);
-    g_free(data);
-  }
-  else if (gesture_type == GEIS_GESTURE_PRIMITIVE_PINCH)
-  {
-    GeisPinchData* data = self->ProcessPinchGesture(count, attrs);
-    data->id = gesture_id;
-    self->pinch_start.emit(data);
-    g_free(data);
-  }
-  else if (gesture_type == GEIS_GESTURE_PRIMITIVE_TAP)
-  {
-    GeisTapData* data = self->ProcessTapGesture(count, attrs);
-    data->id = gesture_id;
-    self->tap.emit(data);
-    g_free(data);
-  }
-  else if (gesture_type == GEIS_GESTURE_PRIMITIVE_TOUCH)
-  {
-    GeisTouchData* data = self->ProcessTouchGesture(count, attrs);
-    data->id = gesture_id;
-    self->touch_start.emit(data);
-    g_free(data);
-  }
-}
-
-void
-GeisAdapter::GestureUpdate(void* cookie, GeisGestureType gesture_type, GeisGestureId gesture_id, GeisSize count, GeisGestureAttr* attrs)
-{
-  GeisAdapter* self = static_cast<GeisAdapter*>(cookie);
-
-  if (gesture_type == GEIS_GESTURE_PRIMITIVE_DRAG)
-  {
-    GeisDragData* data = self->ProcessDragGesture(count, attrs);
-    data->id = gesture_id;
-    self->drag_update.emit(data);
-    g_free(data);
-  }
-  else if (gesture_type == GEIS_GESTURE_PRIMITIVE_ROTATE)
-  {
-    GeisRotateData* data = self->ProcessRotateGesture(count, attrs);
-    data->id = gesture_id;
-    self->rotate_update.emit(data);
-    g_free(data);
-  }
-  else if (gesture_type == GEIS_GESTURE_PRIMITIVE_PINCH)
-  {
-    GeisPinchData* data = self->ProcessPinchGesture(count, attrs);
-    data->id = gesture_id;
-    self->pinch_update.emit(data);
-    g_free(data);
-  }
-  else if (gesture_type == GEIS_GESTURE_PRIMITIVE_TAP)
-  {
-    GeisTapData* data = self->ProcessTapGesture(count, attrs);
-    data->id = gesture_id;
-    self->tap.emit(data);
-    g_free(data);
-  }
-  else if (gesture_type == GEIS_GESTURE_PRIMITIVE_TOUCH)
-  {
-    GeisTouchData* data = self->ProcessTouchGesture(count, attrs);
-    data->id = gesture_id;
-    self->touch_update.emit(data);
-    g_free(data);
-  }
-}
-
-void
-GeisAdapter::GestureFinish(void* cookie, GeisGestureType gesture_type, GeisGestureId gesture_id, GeisSize count, GeisGestureAttr* attrs)
-{
-  GeisAdapter* self = static_cast<GeisAdapter*>(cookie);
-
-  if (gesture_type == GEIS_GESTURE_PRIMITIVE_DRAG)
-  {
-    GeisDragData* data = self->ProcessDragGesture(count, attrs);
-    data->id = gesture_id;
-    self->drag_finish.emit(data);
-    g_free(data);
-  }
-  else if (gesture_type == GEIS_GESTURE_PRIMITIVE_ROTATE)
-  {
-    GeisRotateData* data = self->ProcessRotateGesture(count, attrs);
-    data->id = gesture_id;
-    self->rotate_finish.emit(data);
-    g_free(data);
-  }
-  else if (gesture_type == GEIS_GESTURE_PRIMITIVE_PINCH)
-  {
-    GeisPinchData* data = self->ProcessPinchGesture(count, attrs);
-    data->id = gesture_id;
-    self->pinch_finish.emit(data);
-    g_free(data);
-  }
-  else if (gesture_type == GEIS_GESTURE_PRIMITIVE_TAP)
-  {
-    GeisTapData* data = self->ProcessTapGesture(count, attrs);
-    data->id = gesture_id;
-    self->tap.emit(data);
-    g_free(data);
-  }
-  else if (gesture_type == GEIS_GESTURE_PRIMITIVE_TOUCH)
-  {
-    GeisTouchData* data = self->ProcessTouchGesture(count, attrs);
-    data->id = gesture_id;
-    self->touch_finish.emit(data);
-    g_free(data);
-  }
-}
-
-GeisAdapter::GeisTapData* GeisAdapter::ProcessTapGesture(GeisSize count, GeisGestureAttr* attrs)
-{
-  GeisTapData* result = (GeisTapData*) g_malloc0(sizeof(GeisTapData));
-
-  int i;
-  for (i = 0; i < (int) count; i++)
-  {
-    GeisGestureAttr attr = attrs[i];
-    if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_DEVICE_ID))
-      result->device_id = attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_CHILD_WINDOW_ID))
-      result->window = (Window) attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_TIMESTAMP))
-      result->timestamp = attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_FOCUS_X))
-      result->focus_x = attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_FOCUS_Y))
-      result->focus_y = attr.integer_val;
-    else if (g_str_equal (attr.name, GEIS_GESTURE_ATTRIBUTE_TOUCHES))
-      result->touches = attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_GESTURE_NAME))
-    {
-      if (!g_strcmp0(attr.string_val, GEIS_GESTURE_TYPE_TAP1))
-        result->touches = 1;
-      else if (!g_strcmp0(attr.string_val, GEIS_GESTURE_TYPE_TAP2))
-        result->touches = 2;
-      else if (!g_strcmp0(attr.string_val, GEIS_GESTURE_TYPE_TAP3))
-        result->touches = 3;
-      else if (!g_strcmp0(attr.string_val, GEIS_GESTURE_TYPE_TAP4))
-        result->touches = 4;
-      else if (!g_strcmp0(attr.string_val, GEIS_GESTURE_TYPE_TAP5))
-        result->touches = 5;
-    }
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_TAP_TIME))
-      result->tap_length_ms = attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_POSITION_X))
-      result->position_x = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_POSITION_Y))
-      result->position_y = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_BOUNDINGBOX_X1))
-      result->bound_x1 = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_BOUNDINGBOX_Y1))
-      result->bound_y1 = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_BOUNDINGBOX_X2))
-      result->bound_x2 = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_BOUNDINGBOX_Y2))
-      result->bound_y2 = attr.float_val;
-  }
-
-  return result;
-}
-
-GeisAdapter::GeisTouchData* GeisAdapter::ProcessTouchGesture(GeisSize count, GeisGestureAttr* attrs)
-{
-  GeisTouchData* result = (GeisTouchData*) g_malloc0(sizeof(GeisTouchData));
-
-  int i;
-  for (i = 0; i < (int) count; i++)
-  {
-    GeisGestureAttr attr = attrs[i];
-    if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_DEVICE_ID))
-      result->device_id = attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_CHILD_WINDOW_ID))
-      result->window = (Window) attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_TIMESTAMP))
-      result->timestamp = attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_FOCUS_X))
-      result->focus_x = attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_FOCUS_Y))
-      result->focus_y = attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_TOUCHES))
-      result->touches = attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_BOUNDINGBOX_X1))
-      result->bound_x1 = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_BOUNDINGBOX_Y1))
-      result->bound_y1 = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_BOUNDINGBOX_X2))
-      result->bound_x2 = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_BOUNDINGBOX_Y2))
-      result->bound_y2 = attr.float_val;
-  }
-
-  return result;
-}
-
-GeisAdapter::GeisDragData* GeisAdapter::ProcessDragGesture(GeisSize count, GeisGestureAttr* attrs)
-{
-  GeisDragData* result = (GeisDragData*) g_malloc0(sizeof(GeisDragData));
-
-  int i;
-  for (i = 0; i < (int) count; i++)
-  {
-    GeisGestureAttr attr = attrs[i];
-    if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_DEVICE_ID))
-      result->device_id = attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_CHILD_WINDOW_ID))
-      result->window = (Window) attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_TIMESTAMP))
-      result->timestamp = attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_FOCUS_X))
-      result->focus_x = attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_FOCUS_Y))
-      result->focus_y = attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_TOUCHES))
-      result->touches = attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_POSITION_X))
-      result->position_x = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_POSITION_Y))
-      result->position_y = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_VELOCITY_X))
-      result->velocity_x = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_VELOCITY_Y))
-      result->velocity_y = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_DELTA_X))
-      result->delta_x = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_DELTA_Y))
-      result->delta_y = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_BOUNDINGBOX_X1))
-      result->bound_x1 = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_BOUNDINGBOX_Y1))
-      result->bound_y1 = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_BOUNDINGBOX_X2))
-      result->bound_x2 = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_BOUNDINGBOX_Y2))
-      result->bound_y2 = attr.float_val;
-  }
-
-  return result;
-}
-
-GeisAdapter::GeisPinchData* GeisAdapter::ProcessPinchGesture(GeisSize count, GeisGestureAttr* attrs)
-{
-  GeisPinchData* result = (GeisPinchData*) g_malloc0(sizeof(GeisPinchData));
-
-  int i;
-  for (i = 0; i < (int) count; i++)
-  {
-    GeisGestureAttr attr = attrs[i];
-    if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_DEVICE_ID))
-      result->device_id = attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_CHILD_WINDOW_ID))
-      result->window = (Window) attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_TIMESTAMP))
-      result->timestamp = attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_FOCUS_X))
-      result->focus_x = attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_FOCUS_Y))
-      result->focus_y = attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_TOUCHES))
-      result->touches = attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_RADIUS))
-      result->radius = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_RADIUS_DELTA))
-      result->radius_delta = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_RADIAL_VELOCITY))
-      result->radius_velocity = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_BOUNDINGBOX_X1))
-      result->bound_x1 = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_BOUNDINGBOX_Y1))
-      result->bound_y1 = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_BOUNDINGBOX_X2))
-      result->bound_x2 = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_BOUNDINGBOX_Y2))
-      result->bound_y2 = attr.float_val;
-  }
-
-  return result;
-}
-
-GeisAdapter::GeisRotateData* GeisAdapter::ProcessRotateGesture(GeisSize count, GeisGestureAttr* attrs)
-{
-  GeisRotateData* result = (GeisRotateData*) g_malloc0(sizeof(GeisRotateData));
-
-  int i;
-  for (i = 0; i < (int) count; i++)
-  {
-    GeisGestureAttr attr = attrs[i];
-    if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_DEVICE_ID))
-      result->device_id = attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_CHILD_WINDOW_ID))
-      result->window = (Window) attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_TIMESTAMP))
-      result->timestamp = attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_FOCUS_X))
-      result->focus_x = attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_FOCUS_Y))
-      result->focus_y = attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_TOUCHES))
-      result->touches = attr.integer_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_ANGLE))
-      result->angle = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_ANGLE_DELTA))
-      result->angle_delta = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_ANGULAR_VELOCITY))
-      result->angle_velocity = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_BOUNDINGBOX_X1))
-      result->bound_x1 = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_BOUNDINGBOX_Y1))
-      result->bound_y1 = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_BOUNDINGBOX_X2))
-      result->bound_x2 = attr.float_val;
-    else if (g_str_equal(attr.name, GEIS_GESTURE_ATTRIBUTE_BOUNDINGBOX_Y2))
-      result->bound_y2 = attr.float_val;
-  }
-
-  return result;
-}
-
-static const char* s_gestures[] =
-{
-  GEIS_GESTURE_TYPE_DRAG3, GEIS_GESTURE_TYPE_TAP3, GEIS_GESTURE_TYPE_ROTATE3, GEIS_GESTURE_TYPE_PINCH3, GEIS_GESTURE_TYPE_TOUCH3,
-  GEIS_GESTURE_TYPE_DRAG4, GEIS_GESTURE_TYPE_TAP4, GEIS_GESTURE_TYPE_ROTATE4, GEIS_GESTURE_TYPE_PINCH4, GEIS_GESTURE_TYPE_TOUCH4,
-  GEIS_GESTURE_TYPE_SYSTEM,
-  NULL
-};
-
-void
-GeisAdapter::RegisterRootInstance()
-{
-  static GeisInputFuncs input_funcs =
-  {
-    &GeisAdapter::InputDeviceAdded,
-    &GeisAdapter::InputDeviceChanged,
-    &GeisAdapter::InputDeviceRemoved
-  };
-
-  static GeisGestureFuncs gesture_funcs =
-  {
-    &GeisAdapter::GestureAdded,
-    &GeisAdapter::GestureRemoved,
-    &GeisAdapter::GestureStart,
-    &GeisAdapter::GestureUpdate,
-    &GeisAdapter::GestureFinish
-  };
-
-  GeisStatus status = GEIS_UNKNOWN_ERROR;
-
-  GeisXcbWinInfo xcb_win_info;
-  xcb_win_info.display_name  = NULL,
-               xcb_win_info.screenp       = NULL,
-                            xcb_win_info.window_id     = gdk_x11_get_default_root_xwindow();
-
-  GeisWinInfo win_info =
-  {
-    GEIS_XCB_FULL_WINDOW,
-    &xcb_win_info
-  };
-  GeisInstance instance;
-
-  status = geis_init(&win_info, &instance);
-  if (status != GEIS_STATUS_SUCCESS)
-  {
-    fprintf(stderr, "error in geis_init\n");
-    return;
-  }
-
-  status = geis_input_devices(instance, &input_funcs, this);
-  if (status != GEIS_STATUS_SUCCESS)
-  {
-    fprintf(stderr, "error subscribing to input devices\n");
-    return;;
-  }
-
-  status = geis_subscribe(instance,
-                          GEIS_ALL_INPUT_DEVICES,
-                          s_gestures,
-                          &gesture_funcs,
-                          this);
-  if (status != GEIS_STATUS_SUCCESS)
-  {
-    fprintf(stderr, "error subscribing to gestures\n");
-    return;
-  }
-
-  _root_instance = instance;
-}
diff -Naur unity-4.24.0.orig/plugins/unityshell/src/GeisAdapter.h unity-4.24.0/plugins/unityshell/src/GeisAdapter.h
--- unity-4.24.0.orig/plugins/unityshell/src/GeisAdapter.h	2011-10-12 14:02:40.000000000 +0200
+++ unity-4.24.0/plugins/unityshell/src/GeisAdapter.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,177 +0,0 @@
-// -*- Mode: C++; indent-tabs-mode: nil; tab-width: 2 -*-
-/*
- * Copyright (C) 2010 Canonical Ltd
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 3 as
- * published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * aint with this program.  If not, see <http://www.gnu.org/licenses/>.
- *
- * Authored by: Jason Smith <jason.smith@canonical.com>
- */
-
-#ifndef GEISADAPTER_H
-#define GEISADAPTER_H
-
-/* Compiz */
-#include <sigc++/sigc++.h>
-#include <geis/geis.h>
-#include <Nux/Nux.h>
-
-class GeisAdapter : public sigc::trackable
-{
-public:
-  static GeisAdapter* Default();
-
-  ~GeisAdapter();
-
-  void Run();
-
-  typedef struct _GeisTapData
-  {
-    int id;
-    int device_id;
-    Window window;
-    int touches;
-    int timestamp;
-    int focus_x;
-    int focus_y;
-    int tap_length_ms;
-    float position_x;
-    float position_y;
-    float bound_x1;
-    float bound_y1;
-    float bound_x2;
-    float bound_y2;
-  } GeisTapData;
-
-  typedef struct _GeisDragData
-  {
-    int id;
-    int device_id;
-    Window window;
-    int touches;
-    int timestamp;
-    int focus_x;
-    int focus_y;
-    float delta_x;
-    float delta_y;
-    float velocity_x;
-    float velocity_y;
-    float position_x;
-    float position_y;
-    float bound_x1;
-    float bound_y1;
-    float bound_x2;
-    float bound_y2;
-  } GeisDragData;
-
-  typedef struct _GeisRotateData
-  {
-    int id;
-    int device_id;
-    Window window;
-    int touches;
-    int timestamp;
-    int focus_x;
-    int focus_y;
-    float angle;
-    float angle_delta;
-    float angle_velocity;
-    float bound_x1;
-    float bound_y1;
-    float bound_x2;
-    float bound_y2;
-  } GeisRotateData;
-
-  typedef struct _GeisPinchData
-  {
-    int id;
-    int device_id;
-    Window window;
-    int touches;
-    int timestamp;
-    int focus_x;
-    int focus_y;
-    float radius;
-    float radius_delta;
-    float radius_velocity;
-    float bound_x1;
-    float bound_y1;
-    float bound_x2;
-    float bound_y2;
-  } GeisPinchData;
-
-  typedef struct _GeisTouchData
-  {
-    int id;
-    int device_id;
-    Window window;
-    int touches;
-    int timestamp;
-    int focus_x;
-    int focus_y;
-    float bound_x1;
-    float bound_y1;
-    float bound_x2;
-    float bound_y2;
-  } GeisTouchData;
-
-  sigc::signal<void, GeisTapData*> tap;
-
-  sigc::signal<void, GeisDragData*> drag_start;
-  sigc::signal<void, GeisDragData*> drag_update;
-  sigc::signal<void, GeisDragData*> drag_finish;
-
-  sigc::signal<void, GeisRotateData*> rotate_start;
-  sigc::signal<void, GeisRotateData*> rotate_update;
-  sigc::signal<void, GeisRotateData*> rotate_finish;
-
-  sigc::signal<void, GeisPinchData*> pinch_start;
-  sigc::signal<void, GeisPinchData*> pinch_update;
-  sigc::signal<void, GeisPinchData*> pinch_finish;
-
-  sigc::signal<void, GeisTouchData*> touch_start;
-  sigc::signal<void, GeisTouchData*> touch_update;
-  sigc::signal<void, GeisTouchData*> touch_finish;
-protected:
-  GeisAdapter();
-
-  static gboolean OnWatchIn(GIOChannel* source, GIOCondition condition, gpointer data);
-
-  static void InputDeviceAdded(void* cookie, GeisInputDeviceId device_id, void* attrs);
-  static void InputDeviceChanged(void* cookie, GeisInputDeviceId device_id, void* attrs);
-  static void InputDeviceRemoved(void* cookie, GeisInputDeviceId device_id, void* attrs);
-
-  static void GestureAdded(void* cookie, GeisGestureType gesture_type, GeisGestureId gesture_id, GeisSize attr_count, GeisGestureAttr* attrs);
-  static void GestureRemoved(void* cookie, GeisGestureType gesture_type, GeisGestureId gesture_id, GeisSize attr_count, GeisGestureAttr* attrs);
-
-  static void GestureStart(void* cookie, GeisGestureType gesture_type, GeisGestureId gesture_id, GeisSize attr_count, GeisGestureAttr* attrs);
-  static void GestureUpdate(void* cookie, GeisGestureType gesture_type, GeisGestureId gesture_id, GeisSize attr_count, GeisGestureAttr* attrs);
-  static void GestureFinish(void* cookie, GeisGestureType gesture_type, GeisGestureId gesture_id, GeisSize attr_count, GeisGestureAttr* attrs);
-
-  GeisTapData*     ProcessTapGesture(GeisSize attr_count, GeisGestureAttr* attrs);
-  GeisDragData*    ProcessDragGesture(GeisSize attr_count, GeisGestureAttr* attrs);
-  GeisPinchData*   ProcessPinchGesture(GeisSize attr_count, GeisGestureAttr* attrs);
-  GeisRotateData* ProcessRotateGesture(GeisSize attr_count, GeisGestureAttr* attrs);
-  GeisTouchData*   ProcessTouchGesture(GeisSize attr_count, GeisGestureAttr* attrs);
-
-private:
-  void RegisterRootInstance();
-
-  GeisInstance _root_instance;
-
-  guint _watch_id;
-
-  static GeisAdapter* _default;
-
-};
-
-#endif
diff -Naur unity-4.24.0.orig/plugins/unityshell/src/GestureEngine.cpp unity-4.24.0/plugins/unityshell/src/GestureEngine.cpp
--- unity-4.24.0.orig/plugins/unityshell/src/GestureEngine.cpp	2011-10-12 14:02:40.000000000 +0200
+++ unity-4.24.0/plugins/unityshell/src/GestureEngine.cpp	1970-01-01 01:00:00.000000000 +0100
@@ -1,296 +0,0 @@
-/*
- * GestureEngine.cpp
- * This file is part of Unity
- *
- * Copyright (C) 2011 - Canonical Ltd.
- *
- * Unity is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * Unity is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Unity; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin St, Fifth Floor,
- * Boston, MA  02110-1301  USA
- */
-
-#include <X11/cursorfont.h>
-
-#include "ubus-server.h"
-#include "UBusMessages.h"
-#include "GestureEngine.h"
-#include "PluginAdapter.h"
-
-GestureEngine::GestureEngine(CompScreen* screen)
-{
-  _screen = screen;
-
-  _drag_id = 0;
-  _pinch_id = 0;
-  _touch_id = 0;
-  _drag_grab = 0;
-  _pinch_grab = 0;
-  _fleur_cursor = XCreateFontCursor (screen->dpy (), XC_fleur);
-
-  GeisAdapter* adapter = GeisAdapter::Default();
-
-  adapter->tap.connect(sigc::mem_fun(this, &GestureEngine::OnTap));
-
-  adapter->drag_start.connect(sigc::mem_fun(this, &GestureEngine::OnDragStart));
-  adapter->drag_update.connect(sigc::mem_fun(this, &GestureEngine::OnDragUpdate));
-  adapter->drag_finish.connect(sigc::mem_fun(this, &GestureEngine::OnDragFinish));
-
-  adapter->rotate_start.connect(sigc::mem_fun(this, &GestureEngine::OnRotateStart));
-  adapter->rotate_update.connect(sigc::mem_fun(this, &GestureEngine::OnRotateUpdate));
-  adapter->rotate_finish.connect(sigc::mem_fun(this, &GestureEngine::OnRotateFinish));
-
-  adapter->pinch_start.connect(sigc::mem_fun(this, &GestureEngine::OnPinchStart));
-  adapter->pinch_update.connect(sigc::mem_fun(this, &GestureEngine::OnPinchUpdate));
-  adapter->pinch_finish.connect(sigc::mem_fun(this, &GestureEngine::OnPinchFinish));
-
-  adapter->touch_start.connect(sigc::mem_fun(this, &GestureEngine::OnTouchStart));
-  adapter->touch_update.connect(sigc::mem_fun(this, &GestureEngine::OnTouchUpdate));
-  adapter->touch_finish.connect(sigc::mem_fun(this, &GestureEngine::OnTouchFinish));
-}
-
-GestureEngine::~GestureEngine()
-{
-		if (_fleur_cursor)
-	XFreeCursor (screen->dpy (), _fleur_cursor);
-}
-
-void
-GestureEngine::OnTap(GeisAdapter::GeisTapData* data)
-{
-  if (data->touches == 4)
-  {
-    UBusServer* ubus = ubus_server_get_default();
-    ubus_server_send_message(ubus, UBUS_DASH_EXTERNAL_ACTIVATION, NULL);
-  }
-}
-
-CompWindow*
-GestureEngine::FindCompWindow(Window window)
-{
-  CompWindow* result = _screen->findTopLevelWindow(window);
-
-  while (!result)
-  {
-    Window parent, root;
-    Window* children = NULL;
-    unsigned int nchildren;
-
-    XQueryTree(_screen->dpy(), window, &root, &parent, &children, &nchildren);
-
-    if (children)
-      XFree(children);
-
-    if (parent == root)
-      break;
-
-    window = parent;
-    result = _screen->findTopLevelWindow(window);
-  }
-
-  if (result)
-  {
-    if (!(result->type() & (CompWindowTypeUtilMask |
-                            CompWindowTypeNormalMask |
-                            CompWindowTypeDialogMask |
-                            CompWindowTypeModalDialogMask)))
-      result = 0;
-  }
-
-  return result;
-}
-
-void
-GestureEngine::OnDragStart(GeisAdapter::GeisDragData* data)
-{
-  if (data->touches == 3)
-  {
-    _drag_window = FindCompWindow(data->window);
-
-
-    if (!_drag_window)
-      return;
-
-    if (!(_drag_window->actions() & CompWindowActionMoveMask))
-    {
-      _drag_window = 0;
-      return;
-    }
-
-    /* Don't allow windows to be dragged if completely maximized */
-    if ((_drag_window->state() & MAXIMIZE_STATE) == MAXIMIZE_STATE)
-    {
-      _drag_window = 0;
-      return;
-    }
-
-    if (_drag_grab)
-      _screen->removeGrab(_drag_grab, NULL);
-    _drag_id = data->id;
-    _drag_grab = _screen->pushGrab(_fleur_cursor, "unity");
-    _drag_window->grabNotify (_drag_window->serverGeometry ().x (),
-                              _drag_window->serverGeometry ().y (),
-                              0, CompWindowGrabMoveMask | CompWindowGrabButtonMask);
-  }
-}
-
-/* FIXME: CompScreen::warpPointer filters out motion events which
- * other plugins may need to process, but for most cases in core
- * they should be filtered out. */
-void
-GestureEngine::OnDragUpdate(GeisAdapter::GeisDragData* data)
-{
-  if (_drag_id == data->id && _drag_window)
-  {
-    unsigned int px = std::max (std::min (pointerX + static_cast <int> (data->delta_x), screen->width ()), 0);
-    unsigned int py = std::max (std::min (pointerY + static_cast <int> (data->delta_y), screen->height ()), 0);
-
-    if (_drag_window->state () & CompWindowStateMaximizedVertMask)
-      py = pointerY;
-    if (_drag_window->state () & CompWindowStateMaximizedHorzMask)
-      px = pointerX;
-
-    XWarpPointer(screen->dpy (),
-     None, screen->root (),
-     0, 0, 0, 0,
-     px, py);
-
-    XSync(screen->dpy (), false);
-    _drag_window->move(px - pointerX, py - pointerY, false);
-
-    pointerX = px;
-    pointerY = py;
-  }
-}
-
-void
-GestureEngine::OnDragFinish(GeisAdapter::GeisDragData* data)
-{
-  if (_drag_id == data->id && _drag_window)
-  {
-    _drag_window->ungrabNotify ();
-    _drag_window->syncPosition();
-    EndDrag();
-  }
-}
-
-void
-GestureEngine::EndDrag()
-{
-  if (_drag_id && _drag_window)
-  {
-    _screen->removeGrab(_drag_grab, NULL);
-    _drag_grab = 0;
-    _drag_window = 0;
-    _drag_id = 0;
-  }
-}
-
-void
-GestureEngine::OnRotateStart(GeisAdapter::GeisRotateData* data)
-{
-
-}
-void
-GestureEngine::OnRotateUpdate(GeisAdapter::GeisRotateData* data)
-{
-
-}
-void
-GestureEngine::OnRotateFinish(GeisAdapter::GeisRotateData* data)
-{
-
-}
-
-void
-GestureEngine::OnTouchStart(GeisAdapter::GeisTouchData* data)
-{
-  if (data->touches == 3)
-  {
-    CompWindow* result = FindCompWindow(data->window);
-
-    if (result)
-    {
-      PluginAdapter::Default()->ShowGrabHandles(result, false);
-      _touch_id = data->id;
-      _touch_window = result;
-    }
-  }
-}
-
-void
-GestureEngine::OnTouchUpdate(GeisAdapter::GeisTouchData* data)
-{
-
-}
-
-void
-GestureEngine::OnTouchFinish(GeisAdapter::GeisTouchData* data)
-{
-  if (_touch_id == data->id)
-  {
-    if (_touch_window)
-      PluginAdapter::Default()->ShowGrabHandles(_touch_window, true);
-    _touch_id = 0;
-    _touch_window = 0;
-  }
-}
-
-void
-GestureEngine::OnPinchStart(GeisAdapter::GeisPinchData* data)
-{
-  if (data->touches == 3)
-  {
-    _pinch_window = FindCompWindow(data->window);
-
-    if (!_pinch_window)
-      return;
-
-    _pinch_id = data->id;
-    _pinch_start_radius = data->radius;
-
-    if (_pinch_grab)
-      _screen->removeGrab(_pinch_grab, NULL);
-    _pinch_grab = _screen->pushGrab(_screen->invisibleCursor(), "unity");
-  }
-}
-void
-GestureEngine::OnPinchUpdate(GeisAdapter::GeisPinchData* data)
-{
-  if (data->id != _pinch_id)
-    return;
-
-  float delta_radius = data->radius - _pinch_start_radius;
-  if (delta_radius > 110.0f)
-  {
-    _pinch_window->maximize(MAXIMIZE_STATE);
-    _pinch_start_radius = data->radius;
-    EndDrag();
-  }
-  else if (delta_radius < -110.0f)
-  {
-    _pinch_window->maximize(0);
-    _pinch_start_radius = data->radius;
-    EndDrag();
-  }
-}
-void
-GestureEngine::OnPinchFinish(GeisAdapter::GeisPinchData* data)
-{
-  if (_pinch_id == data->id && _pinch_window)
-  {
-    _screen->removeGrab(_pinch_grab, NULL);
-    _pinch_grab = 0;
-    _pinch_id = 0;
-  }
-}
diff -Naur unity-4.24.0.orig/plugins/unityshell/src/GestureEngine.h unity-4.24.0/plugins/unityshell/src/GestureEngine.h
--- unity-4.24.0.orig/plugins/unityshell/src/GestureEngine.h	2011-10-12 14:02:40.000000000 +0200
+++ unity-4.24.0/plugins/unityshell/src/GestureEngine.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,70 +0,0 @@
-/*
- * GestureEngine.h
- * This file is part of Unity
- *
- * Copyright (C) 2011 - Canonical Ltd.
- *
- * Unity is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * Unity is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Unity; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin St, Fifth Floor,
- * Boston, MA  02110-1301  USA
- */
-
-#include <core/core.h>
-
-#include <sigc++/sigc++.h>
-#include <Nux/Nux.h>
-#include "GeisAdapter.h"
-
-class GestureEngine : public sigc::trackable
-{
-public:
-  GestureEngine(CompScreen* screen);
-  virtual ~GestureEngine();
-
-  void OnTap(GeisAdapter::GeisTapData* data);
-
-  void OnDragStart(GeisAdapter::GeisDragData* data);
-  void OnDragUpdate(GeisAdapter::GeisDragData* data);
-  void OnDragFinish(GeisAdapter::GeisDragData* data);
-
-  void OnRotateStart(GeisAdapter::GeisRotateData* data);
-  void OnRotateUpdate(GeisAdapter::GeisRotateData* data);
-  void OnRotateFinish(GeisAdapter::GeisRotateData* data);
-
-  void OnPinchStart(GeisAdapter::GeisPinchData* data);
-  void OnPinchUpdate(GeisAdapter::GeisPinchData* data);
-  void OnPinchFinish(GeisAdapter::GeisPinchData* data);
-
-  void OnTouchStart(GeisAdapter::GeisTouchData* data);
-  void OnTouchUpdate(GeisAdapter::GeisTouchData* data);
-  void OnTouchFinish(GeisAdapter::GeisTouchData* data);
-
-  void EndDrag();
-private:
-  CompWindow* FindCompWindow(Window window);
-
-  CompScreen* _screen;
-  CompWindow* _drag_window;
-  CompWindow* _pinch_window;
-  CompWindow* _touch_window;
-  CompScreen::GrabHandle _drag_grab;
-  CompScreen::GrabHandle _pinch_grab;
-
-  int _drag_id;
-  int _pinch_id;
-  int _touch_id;
-
-  float _pinch_start_radius;
-  Cursor _fleur_cursor;
-};
diff -Naur unity-4.24.0.orig/plugins/unityshell/src/Launcher.cpp unity-4.24.0/plugins/unityshell/src/Launcher.cpp
--- unity-4.24.0.orig/plugins/unityshell/src/Launcher.cpp	2011-10-12 14:02:40.000000000 +0200
+++ unity-4.24.0/plugins/unityshell/src/Launcher.cpp	2011-11-12 18:10:42.702441566 +0100
@@ -187,11 +187,6 @@
   plugin_adapter.compiz_screen_viewport_switch_started.connect(sigc::mem_fun(this, &Launcher::OnViewPortSwitchStarted));
   plugin_adapter.compiz_screen_viewport_switch_ended.connect(sigc::mem_fun(this, &Launcher::OnViewPortSwitchEnded));
 
-  GeisAdapter& adapter = *(GeisAdapter::Default());
-  adapter.drag_start.connect(sigc::mem_fun(this, &Launcher::OnDragStart));
-  adapter.drag_update.connect(sigc::mem_fun(this, &Launcher::OnDragUpdate));
-  adapter.drag_finish.connect(sigc::mem_fun(this, &Launcher::OnDragFinish));
-
   display.changed.connect(sigc::mem_fun(this, &Launcher::OnDisplayChanged));
 
   _current_icon       = NULL;
@@ -397,50 +392,6 @@
 }
 
 void
-Launcher::OnDragStart(GeisAdapter::GeisDragData* data)
-{
-  if (_drag_out_id && _drag_out_id == data->id)
-    return;
-
-  if (data->touches == 4)
-  {
-    _drag_out_id = data->id;
-    if (_hidden)
-    {
-      _drag_out_delta_x = 0.0f;
-    }
-    else
-    {
-      _drag_out_delta_x = DRAG_OUT_PIXELS;
-      _hide_machine->SetQuirk(LauncherHideMachine::MT_DRAG_OUT, false);
-    }
-  }
-}
-
-void
-Launcher::OnDragUpdate(GeisAdapter::GeisDragData* data)
-{
-  if (data->id == _drag_out_id)
-  {
-    _drag_out_delta_x = CLAMP(_drag_out_delta_x + data->delta_x, 0.0f, DRAG_OUT_PIXELS);
-    EnsureAnimation();
-  }
-}
-
-void
-Launcher::OnDragFinish(GeisAdapter::GeisDragData* data)
-{
-  if (data->id == _drag_out_id)
-  {
-    if (_drag_out_delta_x >= DRAG_OUT_PIXELS - 90.0f)
-      _hide_machine->SetQuirk(LauncherHideMachine::MT_DRAG_OUT, true);
-    SetTimeStruct(&_times[TIME_DRAG_OUT], &_times[TIME_DRAG_OUT], ANIM_DURATION_SHORT);
-    _drag_out_id = 0;
-    EnsureAnimation();
-  }
-}
-
-void
 Launcher::startKeyNavMode()
 {
   SetStateKeyNav(true);
diff -Naur unity-4.24.0.orig/plugins/unityshell/src/Launcher.h unity-4.24.0/plugins/unityshell/src/Launcher.h
--- unity-4.24.0.orig/plugins/unityshell/src/Launcher.h	2011-10-12 14:02:40.000000000 +0200
+++ unity-4.24.0/plugins/unityshell/src/Launcher.h	2011-11-12 18:11:00.897995790 +0100
@@ -32,7 +32,6 @@
 #include "BackgroundEffectHelper.h"
 #include "DNDCollectionWindow.h"
 #include "DndData.h"
-#include "GeisAdapter.h"
 #include "Introspectable.h"
 #include "LauncherIcon.h"
 #include "LauncherDragWindow.h"
@@ -247,10 +246,6 @@
   void OnWindowMapped(guint32 xid);
   void OnWindowUnmapped(guint32 xid);
 
-  void OnDragStart(GeisAdapter::GeisDragData* data);
-  void OnDragUpdate(GeisAdapter::GeisDragData* data);
-  void OnDragFinish(GeisAdapter::GeisDragData* data);
-
   void OnPluginStateChanged();
 
   void OnViewPortSwitchStarted();
diff -Naur unity-4.24.0.orig/plugins/unityshell/src/unityshell.cpp unity-4.24.0/plugins/unityshell/src/unityshell.cpp
--- unity-4.24.0.orig/plugins/unityshell/src/unityshell.cpp	2011-10-12 14:02:40.000000000 +0200
+++ unity-4.24.0/plugins/unityshell/src/unityshell.cpp	2011-11-12 18:11:53.241462268 +0100
@@ -29,7 +29,6 @@
 #include "Launcher.h"
 #include "LauncherIcon.h"
 #include "LauncherController.h"
-#include "GeisAdapter.h"
 #include "DevicesSettings.h"
 #include "PluginAdapter.h"
 #include "QuicklistManager.h"
@@ -96,7 +95,6 @@
   , controller(nullptr)
   , panelController(nullptr)
   , switcherController(nullptr)
-  , gestureEngine(nullptr)
   , wt(nullptr)
   , launcherWindow(nullptr)
   , panelWindow(nullptr)
@@ -294,9 +292,6 @@
      g_timeout_add(0, &UnityScreen::initPluginActions, this);
      super_keypressed_ = false;
 
-     GeisAdapter::Default()->Run();
-     gestureEngine = new GestureEngine(screen);
-
      CompString name(PKGDATADIR"/panel-shadow.png");
      CompString pname("unityshell");
      CompSize size(1, 20);
diff -Naur unity-4.24.0.orig/plugins/unityshell/src/unityshell.h unity-4.24.0/plugins/unityshell/src/unityshell.h
--- unity-4.24.0.orig/plugins/unityshell/src/unityshell.h	2011-10-12 14:02:40.000000000 +0200
+++ unity-4.24.0/plugins/unityshell/src/unityshell.h	2011-11-12 18:12:14.780145431 +0100
@@ -38,7 +38,6 @@
 #include "PanelController.h"
 #include "PlacesStyle.h"
 #include "UScreen.h"
-#include "GestureEngine.h"
 #include "DebugDBusInterface.h"
 #include "SwitcherController.h"
 #include "UBusWrapper.h"
@@ -281,7 +280,6 @@
   DashController::Ptr     dashController;
   PanelController*        panelController;
   SwitcherController*     switcherController;
-  GestureEngine*          gestureEngine;
   nux::WindowThread*      wt;
   nux::BaseWindow*        launcherWindow;
   nux::BaseWindow*        panelWindow;
diff -Naur unity-4.24.0.orig/tests/CMakeLists.txt unity-4.24.0/tests/CMakeLists.txt
--- unity-4.24.0.orig/tests/CMakeLists.txt	2011-10-12 14:02:40.000000000 +0200
+++ unity-4.24.0/tests/CMakeLists.txt	2011-11-12 18:12:39.441970984 +0100
@@ -260,8 +260,6 @@
                 ${UNITY_SRC}/LauncherHoverMachine.h
                 ${UNITY_SRC}/LauncherDragWindow.cpp
                 ${UNITY_SRC}/LauncherDragWindow.h
-                ${UNITY_SRC}/GeisAdapter.cpp
-                ${UNITY_SRC}/GeisAdapter.h
                 ${UNITY_SRC}/WindowManager.h
                 ${UNITY_SRC}/WindowManager.cpp
                 ${UNITY_SRC}/IconRenderer.cpp
