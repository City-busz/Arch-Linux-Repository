Description: Patch to make GNOME Media Player use vlc 1.1.0
 This patch makes GNOME Media Player use VLC 1.1.0 to fix FTBFS in
 Maverick.
Author: Bilal Akhtar <bilalakhtar96@yahoo.com>

--- a/src/vlc_engine.cc
+++ b/src/vlc_engine.cc
@@ -35,8 +35,6 @@
 	instance		= NULL;
 	media_player	= NULL;
 
-	libvlc_exception_init (&exception);
-
 	int i = 0;
 	const char * vlc_argv[50];
 
@@ -66,18 +64,13 @@
 		g_debug("Deinterlacer disabled");
 	}
 
-	instance = libvlc_new (i, vlc_argv, &exception);
-	check_exception("To use the VLC engine you must install VLC");
-
-	media_player = libvlc_media_player_new(instance, &exception);
-	check_exception();
+	instance = libvlc_new (i, vlc_argv);
 
-	libvlc_audio_set_volume(instance, DEFAULT_VOLUME, &exception);
-	check_exception();
+	media_player = libvlc_media_player_new(instance);
+	libvlc_audio_set_volume(media_player, DEFAULT_VOLUME);
 
-	event_manager = libvlc_media_player_event_manager(media_player, &exception);
-	libvlc_event_attach(event_manager, libvlc_MediaPlayerEndReached, end_reached_callback, NULL, &exception);
-	check_exception();
+	event_manager = libvlc_media_player_event_manager(media_player);
+	libvlc_event_attach(event_manager, libvlc_MediaPlayerEndReached, end_reached_callback, NULL);
 
 	g_message("VLC engine created");
 }
@@ -103,30 +96,9 @@
 	g_debug("VLC engine destroyed");
 }
 
-void VlcEngine::check_exception(const Glib::ustring& message)
-{
-	if (libvlc_exception_raised(&exception))
-	{
-		Glib::ustring text;
-		Glib::ustring exception_message = libvlc_exception_get_message(&exception);
-
-		if (message.empty())
-		{
-			text = exception_message;
-		}
-		else
-		{
-			text = Glib::ustring::compose("%1: %2", message, exception_message);
-		}
-
-		throw Exception(text);
-	}
-}
-
 void VlcEngine::set_window(int window)
 {
-	libvlc_media_player_set_xwindow(media_player, window, &exception);
-	check_exception();
+	libvlc_media_player_set_xwindow(media_player, window);
 }
 
 void VlcEngine::pause(gboolean state)
@@ -135,13 +107,12 @@
 	{
 		if (state)
 		{
-			libvlc_media_player_pause(media_player, &exception);
+			libvlc_media_player_pause(media_player);
 		}
 		else
 		{
-			libvlc_media_player_play(media_player, &exception);
+			libvlc_media_player_play(media_player);
 		}
-		check_exception();
 	}
 }
 
@@ -149,8 +120,7 @@
 {
 	if (has_media())
 	{
-		libvlc_media_player_play(media_player, &exception);
-		check_exception();
+		libvlc_media_player_play(media_player);
 	}
 }
 
@@ -158,17 +128,10 @@
 {
 	if (has_media())
 	{
-		libvlc_media_t* media = libvlc_media_player_get_media(media_player, &exception);
-		check_exception();
-
-		libvlc_media_player_stop(media_player, &exception);
-		check_exception();
-
-		libvlc_media_player_set_media(media_player, NULL, &exception);
-		check_exception();
-
+		libvlc_media_t* media = libvlc_media_player_get_media(media_player);
+		libvlc_media_player_stop(media_player);
+		libvlc_media_player_set_media(media_player, NULL);
 		libvlc_media_release(media);
-		check_exception();
 	}
 }
 
@@ -181,12 +144,8 @@
 
 	stop();
 	
-	libvlc_media_t* media = libvlc_media_new(instance, mrl.c_str(), &exception);
-	check_exception();
-
-	libvlc_media_player_set_media(media_player, media, &exception);
-	check_exception();
-
+	libvlc_media_t* media = libvlc_media_new_path(instance, mrl.c_str());
+	libvlc_media_player_set_media(media_player, media);
 	libvlc_media_release(media);
 }
 
@@ -206,16 +165,14 @@
 		}
 		else
 		{
-			libvlc_media_player_set_time(media_player, new_time, &exception);
-			check_exception();
+			libvlc_media_player_set_time(media_player, new_time);
 		}
 	}
 }
 
 bool VlcEngine::has_media()
 {
-	libvlc_media_t* media = libvlc_media_player_get_media(media_player, &exception);
-	check_exception();
+	libvlc_media_t* media = libvlc_media_player_get_media(media_player);
 	return media != NULL;
 }
 
@@ -225,11 +182,10 @@
 
 	if (has_media())
 	{
-		result = libvlc_media_player_get_time(media_player, &exception);
-		check_exception();
+		result = libvlc_media_player_get_time(media_player);
 	}
 	
-    return result;
+	return result;
 }
 
 int VlcEngine::get_length()
@@ -238,11 +194,10 @@
 
 	if (has_media())
 	{
-		result = libvlc_media_player_get_length(media_player, &exception);
-		check_exception();
+		result = libvlc_media_player_get_length(media_player);
 	}
 	
-    return result;
+	return result;
 }
 
 float VlcEngine::get_percentage()
@@ -251,8 +206,7 @@
 	
 	if (has_media())
 	{
-		result = libvlc_media_player_get_position(media_player, &exception);
-		check_exception();
+		result = libvlc_media_player_get_position(media_player);
 	}
 	
 	return result;
@@ -262,30 +216,19 @@
 {
 	if (has_media())
 	{
-		libvlc_media_player_set_position(media_player, percentage, &exception);
-		check_exception();
+		libvlc_media_player_set_position(media_player, percentage);
 	}
 }
 
 void VlcEngine::set_volume(double value)
 {
-if (has_media())
-{
-libvlc_audio_set_volume(instance, value, &exception);
-check_exception(); 
-}
+	if (has_media())
+	{
+		libvlc_audio_set_volume(media_player, value);
+	}
 }
 
 double VlcEngine::get_volume()
 {
-if (has_media())
-{
-int returnn=libvlc_audio_get_volume(instance,&exception);
-check_exception();
-return returnn;
-}
-else
-{
-return 0;
-}
+	return has_media() ? libvlc_audio_get_volume(media_player) : 0;
 }
--- a/src/vlc_engine.h
+++ b/src/vlc_engine.h
@@ -28,11 +28,8 @@
 private:
 	libvlc_instance_t*		instance;
 	libvlc_media_player_t*	media_player;
-	libvlc_exception_t		exception;
 	libvlc_event_manager_t* event_manager;
 	
-	void check_exception(const Glib::ustring& message = "");
-	
 public:
 	VlcEngine(bool use_ffmpeg_demux = false);
 	~VlcEngine();
