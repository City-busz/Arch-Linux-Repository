diff -Naur src.orig/Platform/Makefile src.new/Platform/Makefile
--- src.orig/Platform/Makefile	2012-02-19 11:29:26.000000000 +0100
+++ src.new/Platform/Makefile	2012-03-04 02:58:15.968590924 +0100
@@ -37,7 +37,7 @@
 
 ifeq ($(CONFIG),GNOME_DEBUG)
 ASSEMBLY_COMPILER_COMMAND = dmcs
-ASSEMBLY_COMPILER_FLAGS =  -noconfig -codepage:utf8 -warn:3 -optimize- -debug -define:DEBUG -pkg:gnome-sharp-2.0 -pkg:gio-sharp-2.0  "-define:UNIX,DEBUG,GNOME"
+ASSEMBLY_COMPILER_FLAGS =  -noconfig -codepage:utf8 -warn:3 -optimize- -debug -define:DEBUG -pkg:gtk-sharp-2.0 -pkg:gio-sharp-2.0  "-define:UNIX,DEBUG,GNOME"
 ASSEMBLY = bin/Debug/Platform.dll
 ASSEMBLY_MDB = $(ASSEMBLY).mdb
 COMPILE_TARGET = library
@@ -51,7 +51,7 @@
 
 ifeq ($(CONFIG),GNOME_RELEASE)
 ASSEMBLY_COMPILER_COMMAND = dmcs
-ASSEMBLY_COMPILER_FLAGS =  -noconfig -codepage:utf8 -warn:3 -optimize+ -pkg:gnome-sharp-2.0 -pkg:gio-sharp-2.0  "-define:UNIX,GNOME"
+ASSEMBLY_COMPILER_FLAGS =  -noconfig -codepage:utf8 -warn:3 -optimize+ -pkg:gtk-sharp-2.0 -pkg:gio-sharp-2.0  "-define:UNIX,GNOME"
 ASSEMBLY = bin/Release/Platform.dll
 ASSEMBLY_MDB = 
 COMPILE_TARGET = library
@@ -103,7 +103,9 @@
 	src/Unix/IO/DkDriveInfoProvider.cs \
 	src/Win32/IO/Win32DriveInfoProvider.cs \
 	src/Win32/IO/AudioCdWin32.cs \
-	src/Gnome/IO/GioDriveInfoProvider.cs 
+	src/Gnome/IO/GioDriveInfoProvider.cs \
+	src/Gnome/GnomeDesktop/DesktopThumbnailFactory.cs \
+	src/Gnome/GnomeDesktop/DesktopThumbnailSize.cs 
 
 DATA_FILES = 
 
diff -Naur src.orig/Platform/src/Common/Mime/MimeIconLookup.cs src.new/Platform/src/Common/Mime/MimeIconLookup.cs
--- src.orig/Platform/src/Common/Mime/MimeIconLookup.cs	2012-02-19 11:29:26.000000000 +0100
+++ src.new/Platform/src/Common/Mime/MimeIconLookup.cs	2012-03-04 03:11:26.870452689 +0100
@@ -69,16 +69,13 @@
 				return iconName;
 #if GNOME
 			//iconName = GnomeNative.gnome_icon_lookup(GnomeNative.gtk_icon_theme_get_default(), IntPtr.Zero, null, null, IntPtr.Zero, mimeType, 0, IntPtr.Zero);
-			global::Gnome.IconLookupResultFlags result;
-			iconName = global::Gnome.Icon.Lookup(
-				Gtk.IconTheme.Default,
-				null,
-				null,
-				null,
-				null,
-				mimeType,
-				global::Gnome.IconLookupFlags.None,
-				out result);
+			GLib.ThemedIcon icon = (GLib.ThemedIcon) GLib.Content.TypeGetIcon (mimeType);
+			for (int i = 0; i < icon.Names.Length; i++) {
+				if (Gtk.IconTheme.Default.HasIcon (icon.Names[i])) {
+	 				iconName = icon.Names[i];
+					break;
+				}
+			}
 #else
 			// TODO : find a portable implementation
 			iconName = null;
diff -Naur src.orig/Platform/src/Common/Mime/MimeType.cs src.new/Platform/src/Common/Mime/MimeType.cs
--- src.orig/Platform/src/Common/Mime/MimeType.cs	2012-02-19 11:29:26.000000000 +0100
+++ src.new/Platform/src/Common/Mime/MimeType.cs	2012-03-04 02:58:15.975257171 +0100
@@ -28,8 +28,6 @@
 		static MimeType() {
 //			if (!Platform.Gnome.GnomeNative.gnome_vfs_initialized())
 //				Platform.Gnome.GnomeNative.gnome_vfs_init();
-			if (!global::Gnome.Vfs.Vfs.Initialized)
-				global::Gnome.Vfs.Vfs.Initialize();
 		}
 #endif
 		public static string GetMimeTypeForFile(string filename) {
@@ -37,8 +35,9 @@
 #if GNOME
 			// gnome vfs backend
 			// (returns null if the file does not exist)
-			string uri = global::Gnome.Vfs.Uri.GetUriFromLocalPath(filename);
-			mimeType = global::Gnome.Vfs.MimeType.GetMimeTypeForUri(uri);
+			GLib.File file = GLib.FileFactory.NewForPath(filename);
+			GLib.FileInfo info = file.QueryInfo ("standard::content-type", GLib.FileQueryInfoFlags.None, null);
+			mimeType = info.ContentType;
 //			mimeType = Platform.Gnome.GnomeNative.gnome_vfs_get_mime_type(filename);
 #elif UNIX
 			// mono winforms backend
diff -Naur src.orig/Platform/src/Gnome/GnomeDesktop/DesktopThumbnailFactory.cs src.new/Platform/src/Gnome/GnomeDesktop/DesktopThumbnailFactory.cs
--- src.orig/Platform/src/Gnome/GnomeDesktop/DesktopThumbnailFactory.cs	1970-01-01 01:00:00.000000000 +0100
+++ src.new/Platform/src/Gnome/GnomeDesktop/DesktopThumbnailFactory.cs	2012-03-04 02:58:15.985256573 +0100
@@ -0,0 +1,107 @@
+// This file was generated by the Gtk# code generator.
+// Any changes made will be lost if regenerated.
+
+#if GNOME
+namespace Gnome {
+
+	using System;
+	using System.Collections;
+	using System.Runtime.InteropServices;
+
+#region Autogenerated code
+	public class DesktopThumbnailFactory : GLib.Object {
+
+		public DesktopThumbnailFactory(IntPtr raw) : base(raw) {}
+
+		[DllImport("gnome-desktop-2")]
+		static extern IntPtr gnome_desktop_thumbnail_factory_new(int size);
+
+		public DesktopThumbnailFactory (Gnome.DesktopThumbnailSize size) : base (IntPtr.Zero)
+		{
+			if (GetType () != typeof (DesktopThumbnailFactory)) {
+				throw new InvalidOperationException ("Can't override this constructor.");
+			}
+			Raw = gnome_desktop_thumbnail_factory_new((int) size);
+		}
+
+		[DllImport("gnome-desktop-2")]
+		static extern bool gnome_desktop_thumbnail_factory_has_valid_failed_thumbnail(IntPtr raw, IntPtr uri, IntPtr mtime);
+
+		public bool HasValidFailedThumbnail(string uri, System.DateTime mtime) {
+			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
+			bool raw_ret = gnome_desktop_thumbnail_factory_has_valid_failed_thumbnail(Handle, native_uri, GLib.Marshaller.DateTimeTotime_t (mtime));
+			bool ret = raw_ret;
+			GLib.Marshaller.Free (native_uri);
+			return ret;
+		}
+
+		[DllImport("gnome-desktop-2")]
+		static extern void gnome_desktop_thumbnail_factory_save_thumbnail(IntPtr raw, IntPtr thumbnail, IntPtr uri, IntPtr original_mtime);
+
+		public void SaveThumbnail(Gdk.Pixbuf thumbnail, string uri, System.DateTime original_mtime) {
+			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
+			gnome_desktop_thumbnail_factory_save_thumbnail(Handle, thumbnail == null ? IntPtr.Zero : thumbnail.Handle, native_uri, GLib.Marshaller.DateTimeTotime_t (original_mtime));
+			GLib.Marshaller.Free (native_uri);
+		}
+
+		[DllImport("gnome-desktop-2")]
+		static extern IntPtr gnome_desktop_thumbnail_factory_generate_thumbnail(IntPtr raw, IntPtr uri, IntPtr mime_type);
+
+		public Gdk.Pixbuf GenerateThumbnail(string uri, string mime_type) {
+			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
+			IntPtr native_mime_type = GLib.Marshaller.StringToPtrGStrdup (mime_type);
+			IntPtr raw_ret = gnome_desktop_thumbnail_factory_generate_thumbnail(Handle, native_uri, native_mime_type);
+			Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixbuf;
+			GLib.Marshaller.Free (native_uri);
+			GLib.Marshaller.Free (native_mime_type);
+			return ret;
+		}
+
+		[DllImport("gnome-desktop-2")]
+		static extern IntPtr gnome_desktop_thumbnail_factory_get_type();
+
+		public static new GLib.GType GType { 
+			get {
+				IntPtr raw_ret = gnome_desktop_thumbnail_factory_get_type();
+				GLib.GType ret = new GLib.GType(raw_ret);
+				return ret;
+			}
+		}
+
+		[DllImport("gnome-desktop-2")]
+		static extern bool gnome_desktop_thumbnail_factory_can_thumbnail(IntPtr raw, IntPtr uri, IntPtr mime_type, IntPtr mtime);
+
+		public bool CanThumbnail(string uri, string mime_type, System.DateTime mtime) {
+			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
+			IntPtr native_mime_type = GLib.Marshaller.StringToPtrGStrdup (mime_type);
+			bool raw_ret = gnome_desktop_thumbnail_factory_can_thumbnail(Handle, native_uri, native_mime_type, GLib.Marshaller.DateTimeTotime_t (mtime));
+			bool ret = raw_ret;
+			GLib.Marshaller.Free (native_uri);
+			GLib.Marshaller.Free (native_mime_type);
+			return ret;
+		}
+
+		[DllImport("gnome-desktop-2")]
+		static extern void gnome_desktop_thumbnail_factory_create_failed_thumbnail(IntPtr raw, IntPtr uri, IntPtr mtime);
+
+		public void CreateFailedThumbnail(string uri, System.DateTime mtime) {
+			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
+			gnome_desktop_thumbnail_factory_create_failed_thumbnail(Handle, native_uri, GLib.Marshaller.DateTimeTotime_t (mtime));
+			GLib.Marshaller.Free (native_uri);
+		}
+
+		[DllImport("gnome-desktop-2")]
+		static extern IntPtr gnome_desktop_thumbnail_factory_lookup(IntPtr raw, IntPtr uri, IntPtr mtime);
+
+		public string Lookup(string uri, System.DateTime mtime) {
+			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
+			IntPtr raw_ret = gnome_desktop_thumbnail_factory_lookup(Handle, native_uri, GLib.Marshaller.DateTimeTotime_t (mtime));
+			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
+			GLib.Marshaller.Free (native_uri);
+			return ret;
+		}
+
+#endregion
+	}
+}
+#endif
diff -Naur src.orig/Platform/src/Gnome/GnomeDesktop/DesktopThumbnailSize.cs src.new/Platform/src/Gnome/GnomeDesktop/DesktopThumbnailSize.cs
--- src.orig/Platform/src/Gnome/GnomeDesktop/DesktopThumbnailSize.cs	1970-01-01 01:00:00.000000000 +0100
+++ src.new/Platform/src/Gnome/GnomeDesktop/DesktopThumbnailSize.cs	2012-03-04 02:58:15.985256573 +0100
@@ -0,0 +1,18 @@
+// This file was generated by the Gtk# code generator.
+// Any changes made will be lost if regenerated.
+
+#if GNOME
+namespace Gnome {
+
+	using System;
+	using System.Runtime.InteropServices;
+
+#region Autogenerated code
+	public enum DesktopThumbnailSize {
+
+		Normal,
+		Large,
+	}
+#endregion
+}
+#endif
diff -Naur src.orig/Platform/src/Gnome/ThumbnailGenerator.cs src.new/Platform/src/Gnome/ThumbnailGenerator.cs
--- src.orig/Platform/src/Gnome/ThumbnailGenerator.cs	2012-02-19 11:29:26.000000000 +0100
+++ src.new/Platform/src/Gnome/ThumbnailGenerator.cs	2012-03-04 02:58:15.985256573 +0100
@@ -26,15 +26,15 @@
 {
 	internal class ThumbnailGenerator : Platform.Common.IThumbnailGenerator
 	{	
-		private const ThumbnailSize THUMB_SIZE = ThumbnailSize.Normal; // 100 pix
+		private const DesktopThumbnailSize THUMB_SIZE = DesktopThumbnailSize.Normal; // 100 pix
 		
-		private ThumbnailFactory tf;
+		private DesktopThumbnailFactory tf;
 		private Pixbuf thumbnail;
 		private bool disposed;
 		
 		public ThumbnailGenerator() {
 			disposed = false;
-			tf = new ThumbnailFactory(THUMB_SIZE);
+			tf = new DesktopThumbnailFactory(THUMB_SIZE);
 		}
 		
 		public bool GenerateThumbnail(FileInfo fi, string mimeType) {
@@ -43,7 +43,7 @@
 				thumbnail = null;
 			}
 			
-			string uri = global::Gnome.Vfs.Uri.GetUriFromLocalPath(fi.FullName);
+			string uri = new Uri(fi.FullName).ToString();
 			if (tf.CanThumbnail(uri, mimeType, fi.LastWriteTime)) {
 				thumbnail = tf.GenerateThumbnail(uri, mimeType);
 				if (thumbnail != null)
