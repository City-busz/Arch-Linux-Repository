diff -Naur synapse-0.2.8.2.orig/src/core/common-actions.vala synapse-0.2.8.2/src/core/common-actions.vala
--- synapse-0.2.8.2.orig/src/core/common-actions.vala	2011-11-02 16:34:19.000000000 +0100
+++ synapse-0.2.8.2/src/core/common-actions.vala	2011-12-20 22:47:52.000000000 +0100
@@ -360,7 +360,7 @@
       actions.add (new ClipboardCopy ());
     }
 
-    public ResultSet? find_for_match (Query query, Match match)
+    public ResultSet? find_for_match (ref Query query, Match match)
     {
       bool query_empty = query.query_string == "";
       var results = new ResultSet ();
diff -Naur synapse-0.2.8.2.orig/src/core/config-service.vala synapse-0.2.8.2/src/core/config-service.vala
--- synapse-0.2.8.2.orig/src/core/config-service.vala	2011-11-02 16:34:19.000000000 +0100
+++ synapse-0.2.8.2/src/core/config-service.vala	2011-12-20 22:48:36.000000000 +0100
@@ -56,7 +56,7 @@
       
       var parser = new Parser ();
       config_file_name = 
-        Path.build_filename (Environment.get_user_config_dir (), "synapse",
+        GLib.Path.build_filename (Environment.get_user_config_dir (), "synapse",
                              "config.json");
       try
       {
@@ -177,7 +177,7 @@
       generator.pretty = true;
       generator.set_root (root_node);
 
-      DirUtils.create_with_parents (Path.get_dirname (config_file_name), 0755);
+      DirUtils.create_with_parents (GLib.Path.get_dirname (config_file_name), 0755);
       generator.to_file (config_file_name);
     }
   }
diff -Naur synapse-0.2.8.2.orig/src/core/data-sink.vala synapse-0.2.8.2/src/core/data-sink.vala
--- synapse-0.2.8.2.orig/src/core/data-sink.vala	2011-11-02 16:34:19.000000000 +0100
+++ synapse-0.2.8.2/src/core/data-sink.vala	2011-12-20 22:49:22.000000000 +0100
@@ -552,7 +552,7 @@
       {
         if (!action_plugin.enabled) continue;
         if (!action_plugin.handles_unknown ()) continue;
-        rs.add_all (action_plugin.find_for_match (q, match));
+        rs.add_all (action_plugin.find_for_match (ref q, match));
       }
 
       return rs.get_sorted_list ();
@@ -566,7 +566,7 @@
       foreach (var action_plugin in action_plugins)
       {
         if (!action_plugin.enabled) continue;
-        rs.add_all (action_plugin.find_for_match (q, match));
+        rs.add_all (action_plugin.find_for_match (ref q, match));
       }
       
       return rs.get_sorted_list ();
diff -Naur synapse-0.2.8.2.orig/src/core/dbus-service.vala synapse-0.2.8.2/src/core/dbus-service.vala
--- synapse-0.2.8.2.orig/src/core/dbus-service.vala	2011-11-02 16:34:19.000000000 +0100
+++ synapse-0.2.8.2/src/core/dbus-service.vala	2011-12-20 22:51:56.000000000 +0100
@@ -25,23 +25,21 @@
   {
     public const string UNIQUE_NAME = "org.freedesktop.DBus";
     public const string OBJECT_PATH = "/org/freedesktop/DBus";
-    public const string INTERFACE_NAME = "org.freedesktop.DBus";
 
-    public abstract async string[] list_queued_owners (string name) throws DBus.Error;
-    public abstract async string[] list_names () throws DBus.Error;
-    public abstract async string[] list_activatable_names () throws DBus.Error;
-    public abstract async bool name_has_owner (string name) throws DBus.Error;
+    public abstract async string[] list_queued_owners (string name) throws IOError;
+    public abstract async string[] list_names () throws IOError;
+    public abstract async string[] list_activatable_names () throws IOError;
+    public abstract async bool name_has_owner (string name) throws IOError;
     public signal void name_owner_changed (string name,
                                            string old_owner,
                                            string new_owner);
     public abstract async uint32 start_service_by_name (string name,
-                                               uint32 flags) throws DBus.Error;
-    public abstract async string get_name_owner (string name) throws DBus.Error;
+                                               uint32 flags) throws IOError;
+    public abstract async string get_name_owner (string name) throws IOError;
   }
   
   public class DBusService : Object
   {
-    private DBus.Connection connection;
     private FreeDesktopDBus proxy;
     private Gee.Set<string> owned_names;
     private Gee.Set<string> activatable_names;
@@ -110,11 +108,6 @@
     {
       return name in system_activatable_names;
     }
-    
-    public static DBus.Connection get_session_bus ()
-    {
-      return get_default ().connection;
-    }
 
     public signal void initialization_done ();
     
@@ -123,11 +116,9 @@
       string[] names;
       try
       {
-        connection = DBus.Bus.get (DBus.BusType.SESSION);
-        proxy = (FreeDesktopDBus)
-          connection.get_object (FreeDesktopDBus.UNIQUE_NAME,
-                                 FreeDesktopDBus.OBJECT_PATH,
-                                 FreeDesktopDBus.INTERFACE_NAME);
+        proxy = Bus.get_proxy_sync (BusType.SESSION,
+                                    FreeDesktopDBus.UNIQUE_NAME,
+                                    FreeDesktopDBus.OBJECT_PATH);
 
         proxy.name_owner_changed.connect (this.name_owner_changed);
         names = yield proxy.list_names ();
@@ -150,11 +141,10 @@
 
       try
       {
-        var sys_connection = DBus.Bus.get (DBus.BusType.SYSTEM);
-        var sys_proxy = (FreeDesktopDBus)
-          sys_connection.get_object (FreeDesktopDBus.UNIQUE_NAME,
-                                     FreeDesktopDBus.OBJECT_PATH,
-                                     FreeDesktopDBus.INTERFACE_NAME);
+        FreeDesktopDBus sys_proxy = Bus.get_proxy_sync (
+                                            BusType.SYSTEM,
+                                            FreeDesktopDBus.UNIQUE_NAME,
+                                            FreeDesktopDBus.OBJECT_PATH);
 
         names = yield sys_proxy.list_activatable_names ();
         foreach (unowned string system_act in names)
diff -Naur synapse-0.2.8.2.orig/src/core/desktop-file-service.vala synapse-0.2.8.2/src/core/desktop-file-service.vala
--- synapse-0.2.8.2.orig/src/core/desktop-file-service.vala	2011-11-02 17:12:38.000000000 +0100
+++ synapse-0.2.8.2/src/core/desktop-file-service.vala	2011-12-20 22:52:54.000000000 +0100
@@ -414,7 +414,6 @@
     {
       try
       {
-#if VALA_0_14
         uint8[] file_contents;
         bool success = yield file.load_contents_async (null, out file_contents);
         if (success)
@@ -422,16 +421,7 @@
           var keyfile = new KeyFile ();
           keyfile.load_from_data ((string) file_contents,
                                   file_contents.length, 0);
-#else
-        size_t len;
-        string contents;
-        bool success = yield file.load_contents_async (null, 
-                                                       out contents, out len);
-        if (success)
-        {
-          var keyfile = new KeyFile ();
-          keyfile.load_from_data (contents, len, 0);
-#endif
+
           var dfi = new DesktopFileInfo.for_keyfile (file.get_path (), keyfile);
           if (dfi.is_valid)
           {
diff -Naur synapse-0.2.8.2.orig/src/core/plugin.vala synapse-0.2.8.2/src/core/plugin.vala
--- synapse-0.2.8.2.orig/src/core/plugin.vala	2011-11-02 16:34:19.000000000 +0100
+++ synapse-0.2.8.2/src/core/plugin.vala	2011-12-20 22:53:38.000000000 +0100
@@ -49,7 +49,7 @@
 
   public interface ActionProvider : Activatable
   {
-    public abstract ResultSet? find_for_match (Query query, Match match);
+    public abstract ResultSet? find_for_match (ref Query query, Match match);
     public virtual bool handles_unknown ()
     {
       return false;
diff -Naur synapse-0.2.8.2.orig/src/plugins/banshee-plugin.vala synapse-0.2.8.2/src/plugins/banshee-plugin.vala
--- synapse-0.2.8.2.orig/src/plugins/banshee-plugin.vala	2011-11-02 16:34:19.000000000 +0100
+++ synapse-0.2.8.2/src/plugins/banshee-plugin.vala	2011-12-20 22:58:58.000000000 +0100
@@ -25,30 +25,27 @@
   interface BansheePlayerEngine : Object {
       public const string UNIQUE_NAME = "org.bansheeproject.Banshee";
       public const string OBJECT_PATH = "/org/bansheeproject/Banshee/PlayerEngine";
-      public const string INTERFACE_NAME = "org.bansheeproject.Banshee.PlayerEngine";
-      
-      public abstract void play () throws DBus.Error;
-      public abstract void pause () throws DBus.Error;
-      public abstract void open (string uri) throws DBus.Error;
+
+      public abstract void play () throws IOError;
+      public abstract void pause () throws IOError;
+      public abstract void open (string uri) throws IOError;
   }
   
   [DBus (name = "org.bansheeproject.Banshee.PlaybackController")]
   interface BansheePlaybackController : Object {
       public const string UNIQUE_NAME = "org.bansheeproject.Banshee";
       public const string OBJECT_PATH = "/org/bansheeproject/Banshee/PlaybackController";
-      public const string INTERFACE_NAME = "org.bansheeproject.Banshee.PlaybackController";
-      
-      public abstract void next (bool restart) throws DBus.Error;
-      public abstract void previous (bool restart) throws DBus.Error;
+
+      public abstract void next (bool restart) throws IOError;
+      public abstract void previous (bool restart) throws IOError;
   }
   
   [DBus (name = "org.bansheeproject.Banshee.PlayQueue")]
   interface BansheePlayQueue : Object {
       public const string UNIQUE_NAME = "org.bansheeproject.Banshee";
       public const string OBJECT_PATH = "/org/bansheeproject/Banshee/SourceManager/PlayQueue";
-      public const string INTERFACE_NAME = "org.bansheeproject.Banshee.PlayQueue";
-      
-      public abstract void enqueue_uri (string uri, bool prepend) throws DBus.Error;
+
+      public abstract void enqueue_uri (string uri, bool prepend) throws IOError;
   }
   
   public class BansheeActions: Object, Activatable, ItemProvider, ActionProvider
@@ -150,12 +147,11 @@
       public override void do_action ()
       {
         try {
-          var conn = DBus.Bus.get(DBus.BusType.SESSION);
-          var player = (BansheePlayerEngine) conn.get_object (BansheePlayerEngine.UNIQUE_NAME,
-                                                              BansheePlayerEngine.OBJECT_PATH,
-                                                              BansheePlayerEngine.INTERFACE_NAME);
+          BansheePlayerEngine player = Bus.get_proxy_sync (BusType.SESSION,
+                                           BansheePlayerEngine.UNIQUE_NAME,
+                                           BansheePlayerEngine.OBJECT_PATH);
           player.play ();
-        } catch (DBus.Error e) {
+        } catch (IOError e) {
           stderr.printf ("Banshee is not available.\n%s", e.message);
         }
       }
@@ -177,12 +173,11 @@
       public override void do_action ()
       {
         try {
-          var conn = DBus.Bus.get(DBus.BusType.SESSION);
-          var player = (BansheePlayerEngine) conn.get_object (BansheePlayerEngine.UNIQUE_NAME,
-                                                              BansheePlayerEngine.OBJECT_PATH,
-                                                              BansheePlayerEngine.INTERFACE_NAME);
+          BansheePlayerEngine player = Bus.get_proxy_sync (BusType.SESSION,
+                                           BansheePlayerEngine.UNIQUE_NAME,
+                                           BansheePlayerEngine.OBJECT_PATH);
           player.pause ();
-        } catch (DBus.Error e) {
+        } catch (IOError e) {
           stderr.printf ("Banshee is not available.\n%s", e.message);
         }
       }
@@ -200,12 +195,11 @@
       public override void do_action ()
       {
         try {
-          var conn = DBus.Bus.get(DBus.BusType.SESSION);
-          var player = (BansheePlaybackController) conn.get_object (BansheePlaybackController.UNIQUE_NAME,
-                                                                    BansheePlaybackController.OBJECT_PATH,
-                                                                    BansheePlaybackController.INTERFACE_NAME);
+          BansheePlaybackController player = Bus.get_proxy_sync (BusType.SESSION,
+                                           BansheePlaybackController.UNIQUE_NAME,
+                                           BansheePlaybackController.OBJECT_PATH);
           player.next (false);
-        } catch (DBus.Error e) {
+        } catch (IOError e) {
           stderr.printf ("Banshee is not available.\n%s", e.message);
         }
       }
@@ -223,12 +217,11 @@
       public override void do_action ()
       {
         try {
-          var conn = DBus.Bus.get(DBus.BusType.SESSION);
-          var player = (BansheePlaybackController) conn.get_object (BansheePlaybackController.UNIQUE_NAME,
-                                                                    BansheePlaybackController.OBJECT_PATH,
-                                                                    BansheePlaybackController.INTERFACE_NAME);
+          BansheePlaybackController player = Bus.get_proxy_sync (BusType.SESSION,
+                                           BansheePlaybackController.UNIQUE_NAME,
+                                           BansheePlaybackController.OBJECT_PATH);
           player.previous (false);
-        } catch (DBus.Error e) {
+        } catch (IOError e) {
           stderr.printf ("Banshee is not available.\n%s", e.message);
         }
       }
@@ -252,12 +245,11 @@
         return_if_fail ((uri.file_type & QueryFlags.AUDIO) != 0 ||
                         (uri.file_type & QueryFlags.VIDEO) != 0);
         try {
-          var conn = DBus.Bus.get(DBus.BusType.SESSION);
-          var player = (BansheePlayQueue) conn.get_object (BansheePlayQueue.UNIQUE_NAME,
-                                                           BansheePlayQueue.OBJECT_PATH,
-                                                           BansheePlayQueue.INTERFACE_NAME);
+          BansheePlayQueue player = Bus.get_proxy_sync (BusType.SESSION,
+                                           BansheePlayQueue.UNIQUE_NAME,
+                                           BansheePlayQueue.OBJECT_PATH);
           player.enqueue_uri (uri.uri, false);
-        } catch (DBus.Error e) {
+        } catch (IOError e) {
           stderr.printf ("Banshee is not available.\n%s", e.message);
         }
       }
@@ -295,13 +287,12 @@
         return_if_fail ((uri.file_type & QueryFlags.AUDIO) != 0 ||
                         (uri.file_type & QueryFlags.VIDEO) != 0);
         try {
-          var conn = DBus.Bus.get(DBus.BusType.SESSION);
-          var player = (BansheePlayerEngine) conn.get_object (BansheePlayerEngine.UNIQUE_NAME,
-                                                              BansheePlayerEngine.OBJECT_PATH,
-                                                              BansheePlayerEngine.INTERFACE_NAME);
+          BansheePlayerEngine player = Bus.get_proxy_sync (BusType.SESSION,
+                                           BansheePlayerEngine.UNIQUE_NAME,
+                                           BansheePlayerEngine.OBJECT_PATH);
           player.open (uri.uri);
           player.play ();
-        } catch (DBus.Error e) {
+        } catch (IOError e) {
           stderr.printf ("Banshee is not available.\n%s", e.message);
         }
       }
@@ -367,7 +358,7 @@
       return result;
     }
 
-    public ResultSet? find_for_match (Query query, Match match)
+    public ResultSet? find_for_match (ref Query query, Match match)
     {
       bool query_empty = query.query_string == "";
       var results = new ResultSet ();
diff -Naur synapse-0.2.8.2.orig/src/plugins/chat-actions-plugin.vala synapse-0.2.8.2/src/plugins/chat-actions-plugin.vala
--- synapse-0.2.8.2.orig/src/plugins/chat-actions-plugin.vala	2011-11-02 16:34:19.000000000 +0100
+++ synapse-0.2.8.2/src/plugins/chat-actions-plugin.vala	2011-12-20 22:59:29.000000000 +0100
@@ -156,7 +156,7 @@
       actions.add (new SendMessageTo ());
     }
 
-    public ResultSet? find_for_match (Query query, Match match)
+    public ResultSet? find_for_match (ref Query query, Match match)
     {
       bool query_empty = query.query_string == "";
       var results = new ResultSet ();
diff -Naur synapse-0.2.8.2.orig/src/plugins/desktop-file-plugin.vala synapse-0.2.8.2/src/plugins/desktop-file-plugin.vala
--- synapse-0.2.8.2.orig/src/plugins/desktop-file-plugin.vala	2011-11-02 16:34:19.000000000 +0100
+++ synapse-0.2.8.2/src/plugins/desktop-file-plugin.vala	2011-12-20 22:59:45.000000000 +0100
@@ -288,7 +288,7 @@
     
     private Gee.Map<string, Gee.List<OpenWithAction> > mimetype_map;
 
-    public ResultSet? find_for_match (Query query, Match match)
+    public ResultSet? find_for_match (ref Query query, Match match)
     {
       if (match.match_type != MatchType.GENERIC_URI) return null;
 
diff -Naur synapse-0.2.8.2.orig/src/plugins/devhelp-search.vala synapse-0.2.8.2/src/plugins/devhelp-search.vala
--- synapse-0.2.8.2.orig/src/plugins/devhelp-search.vala	2011-11-02 16:34:19.000000000 +0100
+++ synapse-0.2.8.2/src/plugins/devhelp-search.vala	2011-12-20 23:00:14.000000000 +0100
@@ -115,7 +115,7 @@
     
     private Regex symbol_re;
 
-    public ResultSet? find_for_match (Query query, Match match)
+    public ResultSet? find_for_match (ref Query query, Match match)
     {
       if (!has_devhelp || match.match_type != MatchType.UNKNOWN ||
           !(QueryFlags.ACTIONS in query.query_type))
diff -Naur synapse-0.2.8.2.orig/src/plugins/dictionary.vala synapse-0.2.8.2/src/plugins/dictionary.vala
--- synapse-0.2.8.2.orig/src/plugins/dictionary.vala	2011-11-02 16:34:19.000000000 +0100
+++ synapse-0.2.8.2/src/plugins/dictionary.vala	2011-12-20 23:00:27.000000000 +0100
@@ -103,7 +103,7 @@
       return has_dictionary;
     }
 
-    public ResultSet? find_for_match (Query query, Match match)
+    public ResultSet? find_for_match (ref Query query, Match match)
     {
       if (!has_dictionary || match.match_type != MatchType.UNKNOWN ||
           !(QueryFlags.ACTIONS in query.query_type))
diff -Naur synapse-0.2.8.2.orig/src/plugins/file-op-plugin.vala synapse-0.2.8.2/src/plugins/file-op-plugin.vala
--- synapse-0.2.8.2.orig/src/plugins/file-op-plugin.vala	2011-11-02 16:34:19.000000000 +0100
+++ synapse-0.2.8.2/src/plugins/file-op-plugin.vala	2011-12-20 23:00:51.000000000 +0100
@@ -155,7 +155,7 @@
       actions.add (new RenameTo ());
     }
 
-    public ResultSet? find_for_match (Query query, Match match)
+    public ResultSet? find_for_match (ref Query query, Match match)
     {
       bool query_empty = query.query_string == "";
       var results = new ResultSet ();
diff -Naur synapse-0.2.8.2.orig/src/plugins/gnome-screensaver-plugin.vala synapse-0.2.8.2/src/plugins/gnome-screensaver-plugin.vala
--- synapse-0.2.8.2.orig/src/plugins/gnome-screensaver-plugin.vala	2011-11-02 16:34:19.000000000 +0100
+++ synapse-0.2.8.2/src/plugins/gnome-screensaver-plugin.vala	2011-12-20 23:01:40.000000000 +0100
@@ -26,9 +26,8 @@
   {
     public const string UNIQUE_NAME = "org.gnome.ScreenSaver";
     public const string OBJECT_PATH = "/org/gnome/ScreenSaver";
-    public const string INTERFACE_NAME = "org.gnome.ScreenSaver";
-    
-    public abstract async void lock () throws DBus.Error;
+
+    public abstract async void lock () throws IOError;
   }
 
   public class GnomeScreenSaverPlugin: Object, Activatable, ItemProvider
@@ -70,11 +69,9 @@
     
     public static void lock_screen ()
     {
-      var connection = DBusService.get_session_bus ();
-      var dbus_interface = (GnomeScreenSaver)
-        connection.get_object (GnomeScreenSaver.UNIQUE_NAME,
-                               GnomeScreenSaver.OBJECT_PATH,
-                               GnomeScreenSaver.INTERFACE_NAME);
+      GnomeScreenSaver dbus_interface = Bus.get_proxy_sync (BusType.SESSION,
+                                               GnomeScreenSaver.UNIQUE_NAME,
+                                               GnomeScreenSaver.OBJECT_PATH);
 
       // we need the async variant cause Screensaver doesn't send the reply
       dbus_interface.lock.begin ();
diff -Naur synapse-0.2.8.2.orig/src/plugins/gnome-session-plugin.vala synapse-0.2.8.2/src/plugins/gnome-session-plugin.vala
--- synapse-0.2.8.2.orig/src/plugins/gnome-session-plugin.vala	2011-11-02 16:34:19.000000000 +0100
+++ synapse-0.2.8.2/src/plugins/gnome-session-plugin.vala	2011-12-20 23:03:31.000000000 +0100
@@ -26,12 +26,11 @@
   {
     public const string UNIQUE_NAME = "org.gnome.SessionManager";
     public const string OBJECT_PATH = "/org/gnome/SessionManager";
-    public const string INTERFACE_NAME = "org.gnome.SessionManager";
 
-    public abstract bool can_shutdown () throws DBus.Error;
-    public abstract void shutdown () throws DBus.Error;
-    public abstract void request_reboot () throws DBus.Error;
-    public abstract void logout (uint32 mode = 0) throws DBus.Error;
+    public abstract bool can_shutdown () throws IOError;
+    public abstract void shutdown () throws IOError;
+    public abstract void request_reboot () throws IOError;
+    public abstract void logout (uint32 mode = 0) throws IOError;
   }
 
   public class GnomeSessionPlugin: Object, Activatable, ItemProvider
@@ -69,15 +68,13 @@
       {
         try
         {
-          var connection = DBus.Bus.get (DBus.BusType.SESSION);
-          var dbus_interface = (GnomeSessionManager)
-            connection.get_object (GnomeSessionManager.UNIQUE_NAME,
-                                   GnomeSessionManager.OBJECT_PATH,
-                                   GnomeSessionManager.INTERFACE_NAME);
+          GnomeSessionManager dbus_interface = Bus.get_proxy_sync (BusType.SESSION,
+                                                   GnomeSessionManager.UNIQUE_NAME,
+                                                   GnomeSessionManager.OBJECT_PATH);
 
           dbus_interface.shutdown ();
         }
-        catch (DBus.Error err)
+        catch (IOError err)
         {
           warning ("%s", err.message);
         }
@@ -105,15 +102,13 @@
       {
         try
         {
-          var connection = DBus.Bus.get (DBus.BusType.SESSION);
-          var dbus_interface = (GnomeSessionManager)
-            connection.get_object (GnomeSessionManager.UNIQUE_NAME,
-                                   GnomeSessionManager.OBJECT_PATH,
-                                   GnomeSessionManager.INTERFACE_NAME);
+          GnomeSessionManager dbus_interface = Bus.get_proxy_sync (BusType.SESSION,
+                                                   GnomeSessionManager.UNIQUE_NAME,
+                                                   GnomeSessionManager.OBJECT_PATH);
 
           dbus_interface.request_reboot ();
         }
-        catch (DBus.Error err)
+        catch (IOError err)
         {
           warning ("%s", err.message);
         }
@@ -141,11 +136,9 @@
       {
         try
         {
-          var connection = DBusService.get_session_bus ();
-          var dbus_interface = (GnomeSessionManager)
-            connection.get_object (GnomeSessionManager.UNIQUE_NAME,
-                                   GnomeSessionManager.OBJECT_PATH,
-                                   GnomeSessionManager.INTERFACE_NAME);
+          GnomeSessionManager dbus_interface = Bus.get_proxy_sync (BusType.SESSION,
+                                                   GnomeSessionManager.UNIQUE_NAME,
+                                                   GnomeSessionManager.OBJECT_PATH);
 
           /*
            * 0: Normal.
@@ -154,7 +147,7 @@
            */
           dbus_interface.logout (1);
         }
-        catch (DBus.Error err)
+        catch (IOError err)
         {
           warning ("%s", err.message);
         }
diff -Naur synapse-0.2.8.2.orig/src/plugins/hybrid-search-plugin.vala synapse-0.2.8.2/src/plugins/hybrid-search-plugin.vala
--- synapse-0.2.8.2.orig/src/plugins/hybrid-search-plugin.vala	2011-11-02 16:34:19.000000000 +0100
+++ synapse-0.2.8.2/src/plugins/hybrid-search-plugin.vala	2011-12-20 23:04:52.000000000 +0100
@@ -120,6 +120,7 @@
 
       try
       {
+        uint8[] file_contents;
         string contents;
         size_t len;
         bool load_ok;
@@ -127,8 +128,7 @@
         try
         {
           load_ok = yield recent.load_contents_async (null,
-                                                      out contents,
-                                                      out len);
+                                                      out file_contents);
         }
         catch (GLib.Error load_error)
         {
@@ -142,12 +142,14 @@
             Environment.get_user_data_dir (), RECENT_XML_NAME, null));
 
           load_ok = yield recent.load_contents_async (null,
-                                                      out contents,
-                                                      out len);
+                                                      out file_contents);
         }
 
         if (load_ok)
         {
+          contents = (string) file_contents;
+          len = file_contents.length;
+
           // load all uris from recently-used bookmark file
           var bf = new BookmarkFile ();
           bf.load_from_data (contents, len);
diff -Naur synapse-0.2.8.2.orig/src/plugins/imgur-plugin.vala synapse-0.2.8.2/src/plugins/imgur-plugin.vala
--- synapse-0.2.8.2.orig/src/plugins/imgur-plugin.vala	2011-11-02 16:34:19.000000000 +0100
+++ synapse-0.2.8.2/src/plugins/imgur-plugin.vala	2011-12-20 23:05:21.000000000 +0100
@@ -280,7 +280,7 @@
       actions = new Gee.ArrayList<ImgUrAction> ();
     }
 
-    public ResultSet? find_for_match (Query q, Match match)
+    public ResultSet? find_for_match (ref Query q, Match match)
     {
       if (!actions[0].valid_for_match (match)) return null;
 
diff -Naur synapse-0.2.8.2.orig/src/plugins/launchpad-plugin.vala synapse-0.2.8.2/src/plugins/launchpad-plugin.vala
--- synapse-0.2.8.2.orig/src/plugins/launchpad-plugin.vala	2011-11-02 16:34:19.000000000 +0100
+++ synapse-0.2.8.2/src/plugins/launchpad-plugin.vala	2011-12-20 23:05:35.000000000 +0100
@@ -348,7 +348,7 @@
       return result;
     }
     
-    public ResultSet? find_for_match (Query query, Match match)
+    public ResultSet? find_for_match (ref Query q, Match match)
     {
       return null;
     }
diff -Naur synapse-0.2.8.2.orig/src/plugins/locate-plugin.vala synapse-0.2.8.2/src/plugins/locate-plugin.vala
--- synapse-0.2.8.2.orig/src/plugins/locate-plugin.vala	2011-11-02 16:34:19.000000000 +0100
+++ synapse-0.2.8.2/src/plugins/locate-plugin.vala	2011-12-20 23:05:48.000000000 +0100
@@ -200,7 +200,7 @@
       return result;
     }
 
-    public ResultSet? find_for_match (Query q, Match match)
+    public ResultSet? find_for_match (ref Query q, Match match)
     {
       var our_results = QueryFlags.AUDIO | QueryFlags.DOCUMENTS
         | QueryFlags.IMAGES | QueryFlags.UNCATEGORIZED | QueryFlags.VIDEO;
diff -Naur synapse-0.2.8.2.orig/src/plugins/opensearch.vala synapse-0.2.8.2/src/plugins/opensearch.vala
--- synapse-0.2.8.2.orig/src/plugins/opensearch.vala	2011-11-02 16:34:19.000000000 +0100
+++ synapse-0.2.8.2/src/plugins/opensearch.vala	2011-12-20 23:06:54.000000000 +0100
@@ -313,10 +313,14 @@
         var f = File.new_for_path (xml_path);
         try
         {
+          uint8[] file_contents;
           string contents;
           size_t len;
-          
-          yield f.load_contents_async (null, out contents, out len, null);
+
+          yield f.load_contents_async (null, out file_contents, null);
+          contents = (string) file_contents;
+          len = file_contents.length;
+
           parser = new OpenSearchParser ();
           parser.parse (contents);
           if (parser.has_valid_result ())
@@ -339,7 +343,7 @@
       return true;
     }
 
-    public ResultSet? find_for_match (Query query, Match match)
+    public ResultSet? find_for_match (ref Query query, Match match)
     {
       if (match.match_type != MatchType.UNKNOWN &&
           match.match_type != MatchType.TEXT)
diff -Naur synapse-0.2.8.2.orig/src/plugins/pastebin-plugin.vala synapse-0.2.8.2/src/plugins/pastebin-plugin.vala
--- synapse-0.2.8.2.orig/src/plugins/pastebin-plugin.vala	2011-11-02 16:34:19.000000000 +0100
+++ synapse-0.2.8.2/src/plugins/pastebin-plugin.vala	2011-12-21 00:05:23.069816907 +0100
@@ -282,7 +282,7 @@
       //actions.add (new PastebinToContactAction ());
     }
 
-    public ResultSet? find_for_match (Query q, Match match)
+    public ResultSet? find_for_match (ref Query q, Match match)
     {
       if (!actions[0].valid_for_match (match)) return null;
 
diff -Naur synapse-0.2.8.2.orig/src/plugins/pidgin-plugin.vala synapse-0.2.8.2/src/plugins/pidgin-plugin.vala
--- synapse-0.2.8.2.orig/src/plugins/pidgin-plugin.vala	2011-11-02 16:34:19.000000000 +0100
+++ synapse-0.2.8.2/src/plugins/pidgin-plugin.vala	2011-12-20 23:09:37.000000000 +0100
@@ -26,24 +26,23 @@
   interface PurpleInterface : Object {
       public const string UNIQUE_NAME = "im.pidgin.purple.PurpleService";
       public const string OBJECT_PATH = "/im/pidgin/purple/PurpleObject";
-      public const string INTERFACE_NAME = "im.pidgin.purple.PurpleInterface";
-      
-      public abstract string purple_account_get_protocol_name (int account) throws DBus.Error;
-      public abstract int purple_buddy_get_account (int buddy) throws DBus.Error;
-      public abstract string purple_buddy_get_name (int buddy) throws DBus.Error;
-      public abstract string purple_buddy_get_alias (int buddy) throws DBus.Error;
-      public abstract string purple_buddy_icon_get_full_path (int icon) throws DBus.Error;
-      public abstract int purple_buddy_get_icon (int buddy) throws DBus.Error;
-      public abstract int purple_buddy_is_online (int buddy) throws DBus.Error;
-      
-      public abstract int[] purple_accounts_get_all_active () throws DBus.Error;
-      public abstract int[] purple_find_buddies (int account, string pattern = "") throws DBus.Error;
-      
-      public abstract int purple_conversation_new (int type, int account, string name) throws DBus.Error;
-      public abstract void purple_conversation_present (int conv) throws DBus.Error;
-      public abstract int purple_conv_im (int conv) throws DBus.Error;
-      public abstract void purple_conv_im_send (int im, string mess) throws DBus.Error;
-      
+
+      public abstract string purple_account_get_protocol_name (int account) throws IOError;
+      public abstract int purple_buddy_get_account (int buddy) throws IOError;
+      public abstract string purple_buddy_get_name (int buddy) throws IOError;
+      public abstract string purple_buddy_get_alias (int buddy) throws IOError;
+      public abstract string purple_buddy_icon_get_full_path (int icon) throws IOError;
+      public abstract int purple_buddy_get_icon (int buddy) throws IOError;
+      public abstract int purple_buddy_is_online (int buddy) throws IOError;
+
+      public abstract int[] purple_accounts_get_all_active () throws IOError;
+      public abstract int[] purple_find_buddies (int account, string pattern = "") throws IOError;
+
+      public abstract int purple_conversation_new (int type, int account, string name) throws IOError;
+      public abstract void purple_conversation_present (int conv) throws IOError;
+      public abstract int purple_conv_im (int conv) throws IOError;
+      public abstract void purple_conv_im_send (int im, string mess) throws IOError;
+
       public abstract signal void account_added (int acc);
       public abstract signal void account_removed (int acc);
       public abstract signal void buddy_added (int buddy);
@@ -51,9 +50,9 @@
       public abstract signal void buddy_signed_on (int buddy);
       public abstract signal void buddy_signed_off (int buddy);
       public abstract signal void buddy_icon_changed (int buddy);
-      
-      public abstract void serv_send_file (int conn, string who, string file) throws DBus.Error;
-      public abstract int purple_account_get_connection (int account) throws DBus.Error;
+
+      public abstract void serv_send_file (int conn, string who, string file) throws IOError;
+      public abstract int purple_account_get_connection (int account) throws IOError;
   }
 
   public class PidginPlugin: Object, Activatable, ItemProvider, ActionProvider
@@ -195,7 +194,7 @@
           return;
         }
         p.serv_send_file (conn, contact.name, path);
-      } catch (DBus.Error err)
+      } catch (IOError err)
       {
         Utils.Logger.warning (this, "Cannot send file to %s", contact.title);
       }
@@ -211,7 +210,7 @@
           p.purple_conv_im_send (im, message);
         }
         if (present) p.purple_conversation_present (conv);
-      } catch (DBus.Error err)
+      } catch (IOError err)
       {
         Utils.Logger.warning (this, "Cannot open chat for %s", contact.title);
       }
@@ -229,12 +228,10 @@
     {
       p = null;
 
-      var conn = DBusService.get_session_bus ();
-      p = (PurpleInterface) conn.get_object (PurpleInterface.UNIQUE_NAME,
-                                             PurpleInterface.OBJECT_PATH,
-                                             PurpleInterface.INTERFACE_NAME);
-      
-      
+      PurpleInterface p = Bus.get_proxy_sync (BusType.SESSION,
+                                   PurpleInterface.UNIQUE_NAME,
+                                   PurpleInterface.OBJECT_PATH);
+
       if (p != null)
       {
         init_contacts.begin (
@@ -318,7 +315,7 @@
       });
     }
     
-    public ResultSet? find_for_match (Query query, Match match)
+    public ResultSet? find_for_match (ref Query query, Match match)
     {
       if (p == null) return null;
       bool query_empty = query.query_string == "";
@@ -353,7 +350,7 @@
       return results;
     }
     
-    private async void get_contact (int buddy, int account = -1, string? protocol = null) throws DBus.Error
+    private async void get_contact (int buddy, int account = -1, string? protocol = null) throws IOError
     {
       if (p == null) return;
       string prot = protocol;
@@ -396,7 +393,7 @@
           }
         }
       
-      } catch (DBus.Error err) {
+      } catch (IOError err) {
         Utils.Logger.warning (this, "Cannot load Pidgin contacts");
       }
     }
diff -Naur synapse-0.2.8.2.orig/src/plugins/rhythmbox-plugin.vala synapse-0.2.8.2/src/plugins/rhythmbox-plugin.vala
--- synapse-0.2.8.2.orig/src/plugins/rhythmbox-plugin.vala	2011-11-02 16:34:19.000000000 +0100
+++ synapse-0.2.8.2/src/plugins/rhythmbox-plugin.vala	2011-12-20 23:27:16.000000000 +0100
@@ -26,33 +26,30 @@
   interface RhythmboxShell : Object {
       public const string UNIQUE_NAME = "org.gnome.Rhythmbox";
       public const string OBJECT_PATH = "/org/gnome/Rhythmbox/Shell";
-      public const string INTERFACE_NAME = "org.gnome.Rhythmbox.Shell";
-      
+
       [DBus (name = "addToQueue")]
-      public abstract void add_to_queue (string uri) throws DBus.Error;
+      public abstract void add_to_queue (string uri) throws IOError;
       /*
       [DBus (name = "clearQueue")]
       public abstract void clear_queue () throws DBus.Error;
       */
       [DBus (name = "loadURI")]
-      public abstract void load_uri (string uri, bool b) throws DBus.Error;
-      
+      public abstract void load_uri (string uri, bool b) throws IOError;
   }
 
   [DBus (name = "org.gnome.Rhythmbox.Player")]
   interface RhythmboxPlayer : Object {
       public const string UNIQUE_NAME = "org.gnome.Rhythmbox";
       public const string OBJECT_PATH = "/org/gnome/Rhythmbox/Player";
-      public const string INTERFACE_NAME = "org.gnome.Rhythmbox.Shell";
-      
+
       [DBus (name = "getPlaying")]
-      public abstract bool get_playing () throws DBus.Error;
+      public abstract bool get_playing () throws IOError;
       [DBus (name = "next")]
-      public abstract void next () throws DBus.Error;
+      public abstract void next () throws IOError;
       [DBus (name = "previous")]
-      public abstract void previous () throws DBus.Error;
+      public abstract void previous () throws IOError;
       [DBus (name = "playPause")]
-      public abstract void play_pause (bool b) throws DBus.Error;
+      public abstract void play_pause (bool b) throws IOError;
   }
   
   public class RhythmboxActions: Object, Activatable, ItemProvider, ActionProvider
@@ -163,10 +160,9 @@
         try
         {
           bool player_opened = DBusService.get_default ().name_has_owner (RhythmboxPlayer.UNIQUE_NAME);
-          var conn = DBusService.get_session_bus ();
-          var player = (RhythmboxPlayer) conn.get_object (RhythmboxPlayer.UNIQUE_NAME,
-                                                          RhythmboxPlayer.OBJECT_PATH,
-                                                          RhythmboxPlayer.INTERFACE_NAME);
+          RhythmboxPlayer player = Bus.get_proxy_sync (BusType.SESSION,
+                                           RhythmboxPlayer.UNIQUE_NAME,
+                                           RhythmboxPlayer.OBJECT_PATH);
           player.play_pause (true);
           if (!player_opened)
           {
@@ -188,7 +184,7 @@
             });
           }
         }
-        catch (DBus.Error e)
+        catch (IOError e)
         {
           Utils.Logger.warning (this, "Rythmbox is not available.\n%s", e.message);
         }
@@ -228,12 +224,11 @@
       public override void do_action ()
       {
         try {
-          var conn = DBusService.get_session_bus ();
-          var player = (RhythmboxPlayer) conn.get_object (RhythmboxPlayer.UNIQUE_NAME,
-                                                          RhythmboxPlayer.OBJECT_PATH,
-                                                          RhythmboxPlayer.INTERFACE_NAME);
+          RhythmboxPlayer player = Bus.get_proxy_sync (BusType.SESSION,
+                                           RhythmboxPlayer.UNIQUE_NAME,
+                                           RhythmboxPlayer.OBJECT_PATH);
           player.next ();
-        } catch (DBus.Error e) {
+        } catch (IOError e) {
           stderr.printf ("Rythmbox is not available.\n%s", e.message);
         }
       }
@@ -251,13 +246,12 @@
       public override void do_action ()
       {
         try {
-          var conn = DBusService.get_session_bus ();
-          var player = (RhythmboxPlayer) conn.get_object (RhythmboxPlayer.UNIQUE_NAME,
-                                                          RhythmboxPlayer.OBJECT_PATH,
-                                                          RhythmboxPlayer.INTERFACE_NAME);
+          RhythmboxPlayer player = Bus.get_proxy_sync (BusType.SESSION,
+                                           RhythmboxPlayer.UNIQUE_NAME,
+                                           RhythmboxPlayer.OBJECT_PATH);
           player.previous ();
           player.previous ();
-        } catch (DBus.Error e) {
+        } catch (IOError e) {
           stderr.printf ("Rythmbox is not available.\n%s", e.message);
         }
       }
@@ -280,17 +274,18 @@
         UriMatch uri = match as UriMatch;
         return_if_fail ((uri.file_type & QueryFlags.AUDIO) != 0);
         try {
-          var conn = DBusService.get_session_bus ();
-          var shell = (RhythmboxShell) conn.get_object (RhythmboxShell.UNIQUE_NAME,
-                                                        RhythmboxShell.OBJECT_PATH,
-                                                        RhythmboxShell.INTERFACE_NAME);
-          var player = (RhythmboxPlayer) conn.get_object (RhythmboxPlayer.UNIQUE_NAME,
-                                                          RhythmboxPlayer.OBJECT_PATH,
-                                                          RhythmboxPlayer.INTERFACE_NAME);
+          RhythmboxShell shell = Bus.get_proxy_sync (BusType.SESSION,
+                                           RhythmboxShell.UNIQUE_NAME,
+                                           RhythmboxShell.OBJECT_PATH);
+
+          RhythmboxPlayer player = Bus.get_proxy_sync (BusType.SESSION,
+                                           RhythmboxPlayer.UNIQUE_NAME,
+                                           RhythmboxPlayer.OBJECT_PATH);
+
           shell.add_to_queue (uri.uri);
           if (!player.get_playing())
             player.play_pause (true);
-        } catch (DBus.Error e) {
+        } catch (IOError e) {
           stderr.printf ("Rythmbox is not available.\n%s", e.message);
         }
       }
@@ -327,17 +322,18 @@
         UriMatch uri = match as UriMatch;
         return_if_fail ((uri.file_type & QueryFlags.AUDIO) != 0);
         try {
-          var conn = DBusService.get_session_bus ();
-          var shell = (RhythmboxShell) conn.get_object (RhythmboxShell.UNIQUE_NAME,
-                                                        RhythmboxShell.OBJECT_PATH,
-                                                        RhythmboxShell.INTERFACE_NAME);
-          var player = (RhythmboxPlayer) conn.get_object (RhythmboxPlayer.UNIQUE_NAME,
-                                                          RhythmboxPlayer.OBJECT_PATH,
-                                                          RhythmboxPlayer.INTERFACE_NAME);
+          RhythmboxShell shell = Bus.get_proxy_sync (BusType.SESSION,
+                                           RhythmboxShell.UNIQUE_NAME,
+                                           RhythmboxShell.OBJECT_PATH);
+
+          RhythmboxPlayer player = Bus.get_proxy_sync (BusType.SESSION,
+                                           RhythmboxPlayer.UNIQUE_NAME,
+                                           RhythmboxPlayer.OBJECT_PATH);
+
           if (!player.get_playing())
             player.play_pause (true);
           shell.load_uri (uri.uri, true);
-        } catch (DBus.Error e) {
+        } catch (IOError e) {
           stderr.printf ("Rythmbox is not available.\n%s", e.message);
         }
       }
@@ -392,7 +388,7 @@
       return result;
     }
 
-    public ResultSet? find_for_match (Query query, Match match)
+    public ResultSet? find_for_match (ref Query query, Match match)
     {
       bool query_empty = query.query_string == "";
       var results = new ResultSet ();
diff -Naur synapse-0.2.8.2.orig/src/plugins/selection-plugin.vala synapse-0.2.8.2/src/plugins/selection-plugin.vala
--- synapse-0.2.8.2.orig/src/plugins/selection-plugin.vala	2011-11-02 16:34:19.000000000 +0100
+++ synapse-0.2.8.2/src/plugins/selection-plugin.vala	2011-12-20 23:28:08.000000000 +0100
@@ -107,12 +107,6 @@
       // we will only search in the "Actions" category
       return (QueryFlags.ACTIONS in query.query_type);
     }
-    
-#if VALA_0_12
-    // strangely enough the 0.10 variant is correct here
-    // FIXME: remove once official 0.12 is out and 0.11.x aren't used anymore
-    private delegate void ClipboardTextReceivedFunc (Gtk.Clipboard cb, string? text);
-#endif
 
     public async ResultSet? search (Query query) throws SearchError
     {
@@ -134,21 +128,11 @@
       
       if (cb_changed)
       {
-#if VALA_0_12
-        ClipboardTextReceivedFunc f = (cb, text) =>
-        {
-          cb_text = text;
-          search.callback ();
-        };
-
-        clipboard.request_text ((Gtk.ClipboardTextReceivedFunc) f);
-#else
         clipboard.request_text ((cb, text) =>
         {
           cb_text = text;
           search.callback ();
         });
-#endif
       }
       else
       {
diff -Naur synapse-0.2.8.2.orig/src/plugins/system-management.vala synapse-0.2.8.2/src/plugins/system-management.vala
--- synapse-0.2.8.2.orig/src/plugins/system-management.vala	2011-11-02 16:41:54.000000000 +0100
+++ synapse-0.2.8.2/src/plugins/system-management.vala	2011-12-20 23:33:28.000000000 +0100
@@ -26,14 +26,13 @@
   {
     public const string UNIQUE_NAME = "org.freedesktop.UPower";
     public const string OBJECT_PATH = "/org/freedesktop/UPower";
-    public const string INTERFACE_NAME = "org.freedesktop.UPower";
 
-    public abstract async void hibernate () throws DBus.Error;
-    public abstract async void suspend () throws DBus.Error;
-    public abstract async bool hibernate_allowed () throws DBus.Error;
-    public abstract async bool suspend_allowed () throws DBus.Error;
-    
-    public abstract async void about_to_sleep () throws DBus.Error;
+    public abstract async void hibernate () throws IOError;
+    public abstract async void suspend () throws IOError;
+    public abstract async bool hibernate_allowed () throws IOError;
+    public abstract async bool suspend_allowed () throws IOError;
+
+    public abstract async void about_to_sleep () throws IOError;
   }
 
   [DBus (name = "org.freedesktop.ConsoleKit.Manager")]
@@ -41,12 +40,11 @@
   {
     public const string UNIQUE_NAME = "org.freedesktop.ConsoleKit";
     public const string OBJECT_PATH = "/org/freedesktop/ConsoleKit/Manager";
-    public const string INTERFACE_NAME = "org.freedesktop.ConsoleKit.Manager";
-    
-    public abstract void restart () throws DBus.Error;
-    public abstract void stop () throws DBus.Error;
-    public abstract async bool can_restart () throws DBus.Error;
-    public abstract async bool can_stop () throws DBus.Error;
+
+    public abstract void restart () throws IOError;
+    public abstract void stop () throws IOError;
+    public abstract async bool can_restart () throws IOError;
+    public abstract async bool can_stop () throws IOError;
   }
 
   public class SystemManagementPlugin: Object, Activatable, ItemProvider
@@ -100,15 +98,13 @@
       {
         try
         {
-          var connection = DBus.Bus.get (DBus.BusType.SYSTEM);
-          var dbus_interface = (UPowerObject)
-            connection.get_object (UPowerObject.UNIQUE_NAME,
-                                   UPowerObject.OBJECT_PATH,
-                                   UPowerObject.INTERFACE_NAME);
+          UPowerObject dbus_interface = Bus.get_proxy_sync (BusType.SYSTEM,
+                                           UPowerObject.UNIQUE_NAME,
+                                           UPowerObject.OBJECT_PATH);
 
           allowed = yield dbus_interface.hibernate_allowed ();
         }
-        catch (DBus.Error err)
+        catch (IOError err)
         {
           allowed = false;
         }
@@ -125,11 +121,9 @@
       {
         try
         {
-          var connection = DBus.Bus.get (DBus.BusType.SYSTEM);
-          var dbus_interface = (UPowerObject)
-            connection.get_object (UPowerObject.UNIQUE_NAME,
-                                   UPowerObject.OBJECT_PATH,
-                                   UPowerObject.INTERFACE_NAME);
+          UPowerObject dbus_interface = Bus.get_proxy_sync (BusType.SYSTEM,
+                                           UPowerObject.UNIQUE_NAME,
+                                           UPowerObject.OBJECT_PATH);
 
           try
           {
@@ -144,7 +138,7 @@
 
           yield dbus_interface.suspend ();
         }
-        catch (DBus.Error err)
+        catch (IOError err)
         {
           warning ("%s", err.message);
         }
@@ -174,15 +168,13 @@
       {
         try
         {
-          var connection = DBus.Bus.get (DBus.BusType.SYSTEM);
-          var dbus_interface = (UPowerObject)
-            connection.get_object (UPowerObject.UNIQUE_NAME,
-                                   UPowerObject.OBJECT_PATH,
-                                   UPowerObject.INTERFACE_NAME);
+          UPowerObject dbus_interface = Bus.get_proxy_sync (BusType.SYSTEM,
+                                           UPowerObject.UNIQUE_NAME,
+                                           UPowerObject.OBJECT_PATH);
 
           allowed = yield dbus_interface.hibernate_allowed ();
         }
-        catch (DBus.Error err)
+        catch (IOError err)
         {
           allowed = false;
         }
@@ -199,11 +191,9 @@
       {
         try
         {
-          var connection = DBus.Bus.get (DBus.BusType.SYSTEM);
-          var dbus_interface = (UPowerObject)
-            connection.get_object (UPowerObject.UNIQUE_NAME,
-                                   UPowerObject.OBJECT_PATH,
-                                   UPowerObject.INTERFACE_NAME);
+          UPowerObject dbus_interface = Bus.get_proxy_sync (BusType.SYSTEM,
+                                           UPowerObject.UNIQUE_NAME,
+                                           UPowerObject.OBJECT_PATH);
 
           try
           {
@@ -217,7 +207,7 @@
           yield;
           dbus_interface.hibernate ();
         }
-        catch (DBus.Error err)
+        catch (IOError err)
         {
           warning ("%s", err.message);
         }
@@ -247,15 +237,13 @@
       {
         try
         {
-          var connection = DBus.Bus.get (DBus.BusType.SYSTEM);
-          var dbus_interface = (ConsoleKitObject)
-            connection.get_object (ConsoleKitObject.UNIQUE_NAME,
-                                   ConsoleKitObject.OBJECT_PATH,
-                                   ConsoleKitObject.INTERFACE_NAME);
+          ConsoleKitObject dbus_interface = Bus.get_proxy_sync (BusType.SYSTEM,
+                                           ConsoleKitObject.UNIQUE_NAME,
+                                           ConsoleKitObject.OBJECT_PATH);
 
           allowed = yield dbus_interface.can_stop ();
         }
-        catch (DBus.Error err)
+        catch (IOError err)
         {
           allowed = false;
         }
@@ -272,15 +260,13 @@
       {
         try
         {
-          var connection = DBus.Bus.get (DBus.BusType.SYSTEM);
-          var dbus_interface = (ConsoleKitObject)
-            connection.get_object (ConsoleKitObject.UNIQUE_NAME,
-                                   ConsoleKitObject.OBJECT_PATH,
-                                   ConsoleKitObject.INTERFACE_NAME);
+          ConsoleKitObject dbus_interface = Bus.get_proxy_sync (BusType.SYSTEM,
+                                           ConsoleKitObject.UNIQUE_NAME,
+                                           ConsoleKitObject.OBJECT_PATH);
 
           dbus_interface.stop ();
         }
-        catch (DBus.Error err)
+        catch (IOError err)
         {
           warning ("%s", err.message);
         }
@@ -305,15 +291,13 @@
       {
         try
         {
-          var connection = DBus.Bus.get (DBus.BusType.SYSTEM);
-          var dbus_interface = (ConsoleKitObject)
-            connection.get_object (ConsoleKitObject.UNIQUE_NAME,
-                                   ConsoleKitObject.OBJECT_PATH,
-                                   ConsoleKitObject.INTERFACE_NAME);
+          ConsoleKitObject dbus_interface = Bus.get_proxy_sync (BusType.SYSTEM,
+                                           ConsoleKitObject.UNIQUE_NAME,
+                                           ConsoleKitObject.OBJECT_PATH);
 
           allowed = yield dbus_interface.can_restart ();
         }
-        catch (DBus.Error err)
+        catch (IOError err)
         {
           allowed = false;
         }
@@ -330,15 +314,13 @@
       {
         try
         {
-          var connection = DBus.Bus.get (DBus.BusType.SYSTEM);
-          var dbus_interface = (ConsoleKitObject)
-            connection.get_object (ConsoleKitObject.UNIQUE_NAME,
-                                   ConsoleKitObject.OBJECT_PATH,
-                                   ConsoleKitObject.INTERFACE_NAME);
+          ConsoleKitObject dbus_interface = Bus.get_proxy_sync (BusType.SYSTEM,
+                                           ConsoleKitObject.UNIQUE_NAME,
+                                           ConsoleKitObject.OBJECT_PATH);
 
           dbus_interface.restart ();
         }
-        catch (DBus.Error err)
+        catch (IOError err)
         {
           warning ("%s", err.message);
         }
diff -Naur synapse-0.2.8.2.orig/src/plugins/zeitgeist-related.vala synapse-0.2.8.2/src/plugins/zeitgeist-related.vala
--- synapse-0.2.8.2.orig/src/plugins/zeitgeist-related.vala	2011-11-02 16:34:19.000000000 +0100
+++ synapse-0.2.8.2/src/plugins/zeitgeist-related.vala	2011-12-20 23:33:54.000000000 +0100
@@ -235,7 +235,7 @@
       return null;
     }
 
-    public ResultSet? find_for_match (Query q, Match match)
+    public ResultSet? find_for_match (ref Query q, Match match)
     {
       /*
       var our_results = QueryFlags.APPLICATIONS | QueryFlags.AUDIO
