Description: backport GtkStatusIcon support to get proper icon transparency
Origin: backport, from trunk thanks to Eric Work
Bug: http://sourceforge.net/tracker/?func=detail&aid=2788746&group_id=87005&atid=581686
Bug-Ubuntu: https://bugs.launchpad.net/ubuntu/+source/liferea/+bug/101980

--- liferea-1.6.4.orig/src/ui/Makefile.in
+++ liferea-1.6.4/src/ui/Makefile.in
@@ -50,7 +50,6 @@ libliui_a_AR = $(AR) $(ARFLAGS)
 libliui_a_LIBADD =
 am_libliui_a_OBJECTS = libliui_a-auth_dialog.$(OBJEXT) \
 	libliui_a-browser_tabs.$(OBJEXT) \
-	libliui_a-eggtrayicon.$(OBJEXT) \
 	libliui_a-enclosure_list_view.$(OBJEXT) \
 	libliui_a-itemview.$(OBJEXT) \
 	libliui_a-liferea_dialog.$(OBJEXT) \
@@ -251,7 +250,6 @@ libliui_a_CFLAGS = $(PACKAGE_CFLAGS) $(D
 libliui_a_SOURCES = \
 	auth_dialog.c auth_dialog.h \
 	browser_tabs.c browser_tabs.h \
-	eggtrayicon.c eggtrayicon.h \
 	enclosure_list_view.c enclosure_list_view.h \
 	itemview.c itemview.h \
 	liferea_dialog.c liferea_dialog.h \
@@ -326,7 +324,6 @@ distclean-compile:
 
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libliui_a-auth_dialog.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libliui_a-browser_tabs.Po@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libliui_a-eggtrayicon.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libliui_a-enclosure_list_view.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libliui_a-itemview.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libliui_a-liferea_dialog.Po@am__quote@
@@ -400,20 +397,6 @@ libliui_a-browser_tabs.obj: browser_tabs
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libliui_a_CFLAGS) $(CFLAGS) -c -o libliui_a-browser_tabs.obj `if test -f 'browser_tabs.c'; then $(CYGPATH_W) 'browser_tabs.c'; else $(CYGPATH_W) '$(srcdir)/browser_tabs.c'; fi`
 
-libliui_a-eggtrayicon.o: eggtrayicon.c
-@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libliui_a_CFLAGS) $(CFLAGS) -MT libliui_a-eggtrayicon.o -MD -MP -MF $(DEPDIR)/libliui_a-eggtrayicon.Tpo -c -o libliui_a-eggtrayicon.o `test -f 'eggtrayicon.c' || echo '$(srcdir)/'`eggtrayicon.c
-@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/libliui_a-eggtrayicon.Tpo $(DEPDIR)/libliui_a-eggtrayicon.Po
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='eggtrayicon.c' object='libliui_a-eggtrayicon.o' libtool=no @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libliui_a_CFLAGS) $(CFLAGS) -c -o libliui_a-eggtrayicon.o `test -f 'eggtrayicon.c' || echo '$(srcdir)/'`eggtrayicon.c
-
-libliui_a-eggtrayicon.obj: eggtrayicon.c
-@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libliui_a_CFLAGS) $(CFLAGS) -MT libliui_a-eggtrayicon.obj -MD -MP -MF $(DEPDIR)/libliui_a-eggtrayicon.Tpo -c -o libliui_a-eggtrayicon.obj `if test -f 'eggtrayicon.c'; then $(CYGPATH_W) 'eggtrayicon.c'; else $(CYGPATH_W) '$(srcdir)/eggtrayicon.c'; fi`
-@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/libliui_a-eggtrayicon.Tpo $(DEPDIR)/libliui_a-eggtrayicon.Po
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='eggtrayicon.c' object='libliui_a-eggtrayicon.obj' libtool=no @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libliui_a_CFLAGS) $(CFLAGS) -c -o libliui_a-eggtrayicon.obj `if test -f 'eggtrayicon.c'; then $(CYGPATH_W) 'eggtrayicon.c'; else $(CYGPATH_W) '$(srcdir)/eggtrayicon.c'; fi`
-
 libliui_a-enclosure_list_view.o: enclosure_list_view.c
 @am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libliui_a_CFLAGS) $(CFLAGS) -MT libliui_a-enclosure_list_view.o -MD -MP -MF $(DEPDIR)/libliui_a-enclosure_list_view.Tpo -c -o libliui_a-enclosure_list_view.o `test -f 'enclosure_list_view.c' || echo '$(srcdir)/'`enclosure_list_view.c
 @am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/libliui_a-enclosure_list_view.Tpo $(DEPDIR)/libliui_a-enclosure_list_view.Po
--- liferea-1.6.4.orig/src/ui/eggtrayicon.h
+++ liferea-1.6.4/src/ui/eggtrayicon.h
@@ -1,80 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */
-/* eggtrayicon.h
- * Copyright (C) 2002 Anders Carlsson <andersca@gnu.org>
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the
- * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
- * Boston, MA 02111-1307, USA.
- */
-
-#ifndef __EGG_TRAY_ICON_H__
-#define __EGG_TRAY_ICON_H__
-
-#include <gtk/gtk.h>
-#ifdef GDK_WINDOWING_X11
-#include <gdk/gdkx.h>
-#endif
-
-G_BEGIN_DECLS
-
-#define EGG_TYPE_TRAY_ICON		(egg_tray_icon_get_type ())
-#define EGG_TRAY_ICON(obj)		(G_TYPE_CHECK_INSTANCE_CAST ((obj), EGG_TYPE_TRAY_ICON, EggTrayIcon))
-#define EGG_TRAY_ICON_CLASS(klass)	(G_TYPE_CHECK_CLASS_CAST ((klass), EGG_TYPE_TRAY_ICON, EggTrayIconClass))
-#define EGG_IS_TRAY_ICON(obj)		(G_TYPE_CHECK_INSTANCE_TYPE ((obj), EGG_TYPE_TRAY_ICON))
-#define EGG_IS_TRAY_ICON_CLASS(klass)	(G_TYPE_CHECK_CLASS_TYPE ((klass), EGG_TYPE_TRAY_ICON))
-#define EGG_TRAY_ICON_GET_CLASS(obj)	(G_TYPE_INSTANCE_GET_CLASS ((obj), EGG_TYPE_TRAY_ICON, EggTrayIconClass))
-	
-typedef struct _EggTrayIcon	  EggTrayIcon;
-typedef struct _EggTrayIconClass  EggTrayIconClass;
-
-struct _EggTrayIcon
-{
-  GtkPlug parent_instance;
-
-  guint stamp;
-  
-#ifdef GDK_WINDOWING_X11
-  Atom selection_atom;
-  Atom manager_atom;
-  Atom system_tray_opcode_atom;
-  Atom orientation_atom;
-  Window manager_window;
-#endif
-  GtkOrientation orientation;
-};
-
-struct _EggTrayIconClass
-{
-  GtkPlugClass parent_class;
-};
-
-GType        egg_tray_icon_get_type       (void);
-
-EggTrayIcon *egg_tray_icon_new_for_screen (GdkScreen   *screen,
-					   const gchar *name);
-
-EggTrayIcon *egg_tray_icon_new            (const gchar *name);
-
-guint        egg_tray_icon_send_message   (EggTrayIcon *icon,
-					   gint         timeout,
-					   const char  *message,
-					   gint         len);
-void         egg_tray_icon_cancel_message (EggTrayIcon *icon,
-					   guint        id);
-
-GtkOrientation egg_tray_icon_get_orientation (EggTrayIcon *icon);
-					    
-G_END_DECLS
-
-#endif /* __EGG_TRAY_ICON_H__ */
--- liferea-1.6.4.orig/src/ui/ui_tray.c
+++ liferea-1.6.4/src/ui/ui_tray.c
@@ -3,6 +3,7 @@
  * 
  * Copyright (C) 2003-2009 Lars Lindner <lars.lindner@gmail.com>
  * Copyright (C) 2004 Christophe Barbe <christophe.barbe@ufies.org>
+ * Copyright (C) 2009 Hubert Figuiere <hub@figuiere.net>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -30,7 +31,6 @@
 
 #include "common.h"
 #include "conf.h"
-#include "eggtrayicon.h"
 #include "feedlist.h"
 #include "net.h"
 #include "ui/liferea_shell.h"
@@ -40,20 +40,14 @@
 #include "ui/ui_tray.h"
 
 // FIXME: determine this from Pango or Cairo somehow...
-#define	FONT_CHAR_WIDTH	6
+#define FONT_CHAR_WIDTH 6
 #define FONT_CHAR_HEIGHT 8
 
-#define TRAY_ICON_WIDTH	16
-#define TRAY_ICON_HEIGHT 16
-
 static struct trayIcon_priv {
 	int		trayCount;		/**< reference counter */
 	GdkPixbuf	*currentIcon;		/**< currently displayed icon */
 	
-	EggTrayIcon 	*widget;		/**< the tray icon widget */
-	GtkWidget	*image;			/**< render widget in the notification area */
-	GtkWidget	*alignment;
-	GtkWidget	*eventBox;
+	GtkStatusIcon 	*status_icon;		/**< the tray icon widget */
 } *trayIcon_priv = NULL;
 
 static void ui_tray_install(void);
@@ -61,112 +55,130 @@ static void ui_tray_install(void);
 static void
 ui_tray_tooltip_set (const gchar *message)
 {
-	gtk_widget_set_tooltip_text(GTK_WIDGET(trayIcon_priv->eventBox), message);
+	gtk_status_icon_set_tooltip_text(trayIcon_priv->status_icon, message);
 }
 
-static void ui_tray_expose_cb() {
+static GdkPixbuf*
+ui_tray_make_icon (void)
+{
 	cairo_t		*c;
+	cairo_surface_t	*cs;
 	gchar		*str;
 	guint		newItems;
-	GtkRequisition	requisition;
-	
-	gtk_widget_size_request(GTK_WIDGET(trayIcon_priv->widget), &requisition);
-	
+	gint		size, i, j;
+	gint		w, h;
+	int		stride, pstride;
+	unsigned char	*data, *row;
+	guchar		*pixels, *p;
+	GdkPixbuf	*out;
+
 	/* We expect currentIcon to be a 16x16 image and we will 
 	   render a colored area with height 10 in the middle of 
 	   the image with 8pt text inside */
 
-	gdk_draw_pixbuf(GDK_DRAWABLE(trayIcon_priv->image->window), 
-	                NULL, trayIcon_priv->currentIcon, 0, 0, 
-			(requisition.width > TRAY_ICON_WIDTH)?(requisition.width - TRAY_ICON_WIDTH)/2 - 1:0, 
-			(requisition.height > TRAY_ICON_HEIGHT)?(requisition.height - TRAY_ICON_HEIGHT)/2 - 1:0, 
-			gdk_pixbuf_get_width(trayIcon_priv->currentIcon), 
-	                gdk_pixbuf_get_height(trayIcon_priv->currentIcon),
-			GDK_RGB_DITHER_NONE, 0, 0);
+	h = gdk_pixbuf_get_height(trayIcon_priv->currentIcon);
+	w = gdk_pixbuf_get_width(trayIcon_priv->currentIcon);
+
+	/* this is a hack as we don't know the size of status icon
+	 * if it is not embedded.
+	 */
+	if(gtk_status_icon_is_embedded (trayIcon_priv->status_icon)) {
+		size = gtk_status_icon_get_size (trayIcon_priv->status_icon);
+	} else {
+		size = MAX(h,w);
+	}
 	
 	if(!conf_get_bool_value(SHOW_NEW_COUNT_IN_TRAY))
-		return;
+		return trayIcon_priv->currentIcon;
 	
 	newItems = feedlist_get_new_item_count();
+
+	cs = cairo_image_surface_create (CAIRO_FORMAT_ARGB32, size, size);
+	c = cairo_create (cs);
+	cairo_set_antialias (c, CAIRO_ANTIALIAS_NONE);
+
+	gdk_cairo_set_source_pixbuf (c, trayIcon_priv->currentIcon,
+	                             (size - w) / 2, (size - h) / 2);
+	cairo_paint (c);
+
 	if(newItems > 0) {
 		guint textWidth, textStart;
-		str = g_strdup_printf("%d", newItems);
+		/* GtkStatusIcon doesn't allow non-square icons yet, so the
+		 * part that doesn't fit is just cropped. Don't put a large
+		 * text there then, otherwise it won't appear entirely.
+		 */
+		if (newItems > 99)
+			str = g_strdup_printf ("99+");
+		else
+			str = g_strdup_printf ("%d", newItems);
 		textWidth = strlen(str) * FONT_CHAR_WIDTH;
 		
-		if(textWidth + 2 > TRAY_ICON_WIDTH)
+		if(textWidth + 2 > size)
 			textStart = 1;
 		else
-			textStart = TRAY_ICON_WIDTH/2 - textWidth/2;
+			textStart = size/2 - textWidth/2;
 
-		c = gdk_cairo_create(trayIcon_priv->image->window);
-		cairo_rectangle(c, textStart - 1, 3, textWidth + 1, FONT_CHAR_HEIGHT + 2);
-		cairo_set_source_rgb(c, 1, 0.50, 0.10);	// orange
+		cairo_rectangle(c, textStart - 1, size/2 - (FONT_CHAR_HEIGHT + 2)/2,
+				textWidth + 1, FONT_CHAR_HEIGHT + 2);
+		cairo_set_source_rgba(c, 1, 0.50, 0.10, 1.0);	// orange
 		cairo_fill(c);
 
-		cairo_set_source_rgb(c, 1, 1, 1);		
-		cairo_move_to(c, textStart - 1, 3 + FONT_CHAR_HEIGHT);
+		cairo_set_source_rgba(c, 1, 1, 1, 1.0);
+		cairo_move_to(c, textStart - 1, size/2 - (FONT_CHAR_HEIGHT + 2)/2 + FONT_CHAR_HEIGHT);
 		cairo_select_font_face(c, "Sans", CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT_NORMAL);
 		cairo_set_font_size(c, FONT_CHAR_HEIGHT + 2);
 		cairo_show_text(c, str);
-		cairo_destroy(c);
 
 		g_free(str);
 	}
+
+	stride = cairo_image_surface_get_stride (cs);
+	data = cairo_image_surface_get_data (cs);
+
+	out = gdk_pixbuf_new (GDK_COLORSPACE_RGB, TRUE, 8, size, size);
+	pstride = gdk_pixbuf_get_rowstride (out);
+	pixels = gdk_pixbuf_get_pixels (out);
+	for (i = 0; i < size; i++) {
+		row = data + (i * stride);
+		p = pixels + (i * pstride);
+		for (j = 0; j < size; j++) {
+			guint32 px = *(guint32*)row;
+			p[0] = (px & 0xff0000) >> 16;
+			p[1] = (px & 0xff00) >> 8;
+			p[2] = (px & 0xff);
+			p[3] = (px & 0xff000000) >> 24;
+			p += 4;
+			row += 4;
+		}
+	}
+
+	cairo_destroy(c);
+	cairo_surface_destroy (cs);
+
+	return out;
 }
 
+
 static void
 ui_tray_icon_set (gint newItems, GdkPixbuf *icon)
 {
-	guint 	width;
 
-	g_assert (trayIcon_priv->widget);
+	g_assert (trayIcon_priv->status_icon);
 
 	/* Having two code branches here to have real transparency
 	   at least with new count disabled... */
 	if (conf_get_bool_value (SHOW_NEW_COUNT_IN_TRAY)) {	
-		width = ((guint) log10 (newItems) + 1) * FONT_CHAR_WIDTH;
-		width += 2; /* number color border */
-		width += 2; /* tray icon padding */;
-		if (width < 16)
-			width = 16;
 
 		trayIcon_priv->currentIcon = icon;
 
-		if (trayIcon_priv->image)
-			gtk_widget_destroy (trayIcon_priv->image);
-
-		if (trayIcon_priv->alignment)
-			gtk_widget_destroy (trayIcon_priv->alignment);
-
-		trayIcon_priv->alignment = gtk_alignment_new (0.5, 0.5, 0.0, 0.0);
-		trayIcon_priv->image = gtk_drawing_area_new ();
-		gtk_widget_set_size_request (trayIcon_priv->image, width, 16);
-		g_signal_connect (G_OBJECT (trayIcon_priv->image), "expose_event",  
-                        	  G_CALLBACK (ui_tray_expose_cb), NULL);
-
-		gtk_container_add (GTK_CONTAINER (trayIcon_priv->eventBox), trayIcon_priv->alignment);
-		gtk_container_add (GTK_CONTAINER (trayIcon_priv->alignment), trayIcon_priv->image);
-		gtk_widget_show_all (GTK_WIDGET(trayIcon_priv->widget));
+		gtk_status_icon_set_from_pixbuf (trayIcon_priv->status_icon, ui_tray_make_icon ());
 	} else {
 		/* Skip loading icon if already displayed. */
 		if (icon == trayIcon_priv->currentIcon)
 			return;
 		trayIcon_priv->currentIcon = icon;
-
-		if (trayIcon_priv->image)
-			gtk_widget_destroy (trayIcon_priv->image);
-
-		if (trayIcon_priv->alignment) {
-			gtk_widget_destroy (trayIcon_priv->alignment);
-			trayIcon_priv->alignment = NULL;
-		}
-
-		trayIcon_priv->alignment = gtk_alignment_new (0.5, 0.5, 0.0, 0.0);
-		trayIcon_priv->image = gtk_image_new_from_pixbuf (icon);
-		gtk_container_add (GTK_CONTAINER (trayIcon_priv->eventBox), trayIcon_priv->alignment);
-		gtk_container_add (GTK_CONTAINER (trayIcon_priv->alignment), trayIcon_priv->image);
-		gtk_widget_show_all (GTK_WIDGET (trayIcon_priv->widget));
-   	}
+		gtk_status_icon_set_from_pixbuf(trayIcon_priv->status_icon, icon);
+	}
 }
 
 void
@@ -216,72 +228,41 @@ ui_tray_update (void)
 	g_free (msg);
 }
 
-/* a click on the systray icon should show the program window
-   if invisible or hide it if visible */
+
 static void
-tray_icon_pressed (GtkWidget *button, GdkEventButton *event, EggTrayIcon *icon)
+tray_icon_popup (GtkStatusIcon *status_icon,
+                 guint          button,
+                 guint          activate_time,
+                 gpointer       user_data)
 {
-	if ((event->type == GDK_2BUTTON_PRESS) || (event->type == GDK_3BUTTON_PRESS))
-		return;  /* ignore double and triple clicks */
-
-	switch (event->button) {
-		case 1:
-			liferea_shell_toggle_visibility ();
-			break;
-		case 3:
-			ui_popup_systray_menu (event->button, event->time);
-			break;
-	}
-}
-
-static gboolean ui_tray_create_cb() {
-
-	ui_tray_install();
-	
-	return FALSE; /* for when we're called by the glib idle handler */
+	ui_popup_systray_menu (&gtk_status_icon_position_menu, button, activate_time,
+	                       status_icon);
 }
 
 
+/* a click on the systray icon should show the program window
+   if invisible or hide it if visible */
 static void
-ui_tray_embedded_cb(GtkWidget *widget, void *data)
-{
-	/* Nothing to do */
+tray_icon_activate (GtkStatusIcon * status_icon, gpointer user_data)
+{	
+	liferea_shell_toggle_visibility ();
 }
 
 
-static void ui_tray_destroyed_cb(GtkWidget *widget, void *data) {
-
-	g_object_unref(G_OBJECT(trayIcon_priv->widget));
-	g_free(trayIcon_priv);
-	trayIcon_priv = NULL;
-	
-	if (0 == ui_tray_get_count ())
-		liferea_shell_present ();
-	
-	/* And make it re-appear when the notification area reappears */
-	g_idle_add(ui_tray_create_cb, NULL);
-	
-}
-
 static void ui_tray_install(void) {
 
 	g_assert(!trayIcon_priv);
 	trayIcon_priv = g_new0(struct trayIcon_priv, 1);
 
-	trayIcon_priv->widget = egg_tray_icon_new(PACKAGE);
-	trayIcon_priv->eventBox = gtk_event_box_new();
+	trayIcon_priv->status_icon = gtk_status_icon_new();
 	
-	g_signal_connect(trayIcon_priv->eventBox, "button_press_event",
-	                 G_CALLBACK(tray_icon_pressed), trayIcon_priv->widget);
-	g_signal_connect(G_OBJECT(trayIcon_priv->widget), "embedded",
-	                 G_CALLBACK(ui_tray_embedded_cb), NULL);
-	g_signal_connect(G_OBJECT(trayIcon_priv->widget), "destroy",
-	                 G_CALLBACK(ui_tray_destroyed_cb), NULL);
+	g_signal_connect(trayIcon_priv->status_icon, "activate",
+	                 G_CALLBACK(tray_icon_activate), NULL);  
+	g_signal_connect(trayIcon_priv->status_icon, "popup-menu",
+	                 G_CALLBACK(tray_icon_popup), NULL);
 	
-	liferea_shell_setup_URL_receiver (trayIcon_priv->eventBox);
-	
-	gtk_container_add(GTK_CONTAINER(trayIcon_priv->widget), trayIcon_priv->eventBox);
-	g_object_ref(G_OBJECT(trayIcon_priv->widget));
+// No URL dropping support on the status icon.
+// liferea_shell_setup_URL_receiver (trayIcon_priv->eventBox);
 	
 	ui_tray_update();
 	trayIcon_priv->trayCount++;
@@ -289,13 +270,9 @@ static void ui_tray_install(void) {
 
 static void ui_tray_remove(void) {
 
-	g_assert(trayIcon_priv->widget);
+	g_assert(trayIcon_priv->status_icon);
 	
-	g_signal_handlers_disconnect_by_func(G_OBJECT(trayIcon_priv->widget),
-	                                     G_CALLBACK(ui_tray_destroyed_cb), NULL);
-	gtk_widget_destroy(trayIcon_priv->image);
-	g_object_unref(G_OBJECT(trayIcon_priv->widget));
-	gtk_object_destroy(GTK_OBJECT(trayIcon_priv->widget));
+	g_object_unref(G_OBJECT(trayIcon_priv->status_icon));
 	g_free(trayIcon_priv);
 	trayIcon_priv = NULL;
 
@@ -322,17 +299,25 @@ ui_tray_get_count(void)
 
 gboolean ui_tray_get_origin(gint *x, gint *y) {
 
+	GdkRectangle rect;
 	if(!trayIcon_priv)
 		return FALSE;
 
-	gdk_window_get_origin(GTK_WIDGET(trayIcon_priv->widget)->window, x, y);	
+	gtk_status_icon_get_geometry(trayIcon_priv->status_icon, NULL,
+	                             &rect, NULL);
+	*x = rect.x;
+	*y = rect.y;
+
 	return TRUE;
 }
 
 void ui_tray_size_request(GtkRequisition *requisition) {
 
+	gint size;
 	if(!trayIcon_priv)
 		return;
 
-	gtk_widget_size_request(GTK_WIDGET(trayIcon_priv->widget), requisition);
+	size = gtk_status_icon_get_size(trayIcon_priv->status_icon);
+	requisition->width = requisition->height = size;
 }
+
--- liferea-1.6.4.orig/src/ui/eggtrayicon.c
+++ liferea-1.6.4/src/ui/eggtrayicon.c
@@ -1,566 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */
-/* eggtrayicon.c
- * Copyright (C) 2002 Anders Carlsson <andersca@gnu.org>
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the
- * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
- * Boston, MA 02111-1307, USA.
- */
-
-#include <config.h>
-#include <string.h>
-#include <libintl.h>
-
-#include "eggtrayicon.h"
-
-#include <gdkconfig.h>
-#if defined (GDK_WINDOWING_X11)
-#include <gdk/gdkx.h>
-#include <X11/Xatom.h>
-#elif defined (GDK_WINDOWING_WIN32)
-#include <gdk/gdkwin32.h>
-#endif
-
-#ifndef EGG_COMPILATION
-#ifndef _
-#define _(x) dgettext (GETTEXT_PACKAGE, x)
-#define N_(x) x
-#endif
-#else
-#define _(x) x
-#define N_(x) x
-#endif
-
-#define SYSTEM_TRAY_REQUEST_DOCK    0
-#define SYSTEM_TRAY_BEGIN_MESSAGE   1
-#define SYSTEM_TRAY_CANCEL_MESSAGE  2
-
-#define SYSTEM_TRAY_ORIENTATION_HORZ 0
-#define SYSTEM_TRAY_ORIENTATION_VERT 1
-
-enum {
-  PROP_0,
-  PROP_ORIENTATION
-};
-         
-static GtkPlugClass *parent_class = NULL;
-
-static void egg_tray_icon_init (EggTrayIcon *icon);
-static void egg_tray_icon_class_init (EggTrayIconClass *klass);
-
-static void egg_tray_icon_get_property (GObject    *object,
-					guint       prop_id,
-					GValue     *value,
-					GParamSpec *pspec);
-
-static void egg_tray_icon_realize   (GtkWidget *widget);
-static void egg_tray_icon_unrealize (GtkWidget *widget);
-
-static void egg_tray_icon_add (GtkContainer *container,
-			       GtkWidget    *widget);
-
-#ifdef GDK_WINDOWING_X11
-static void egg_tray_icon_update_manager_window    (EggTrayIcon *icon,
-						    gboolean     dock_if_realized);
-static void egg_tray_icon_manager_window_destroyed (EggTrayIcon *icon);
-#endif
-
-GType
-egg_tray_icon_get_type (void)
-{
-  static GType our_type = 0;
-
-  if (our_type == 0)
-    {
-      static const GTypeInfo our_info =
-      {
-	sizeof (EggTrayIconClass),
-	(GBaseInitFunc) NULL,
-	(GBaseFinalizeFunc) NULL,
-	(GClassInitFunc) egg_tray_icon_class_init,
-	NULL, /* class_finalize */
-	NULL, /* class_data */
-	sizeof (EggTrayIcon),
-	0,    /* n_preallocs */
-	(GInstanceInitFunc) egg_tray_icon_init,
-	NULL /* value_table */
-      };
-
-      our_type = g_type_register_static (GTK_TYPE_PLUG, "EggTrayIcon", &our_info, 0);
-    }
-
-  return our_type;
-}
-
-static void
-egg_tray_icon_init (EggTrayIcon *icon)
-{
-  icon->stamp = 1;
-  icon->orientation = GTK_ORIENTATION_HORIZONTAL;
-  
-  gtk_widget_add_events (GTK_WIDGET (icon), GDK_PROPERTY_CHANGE_MASK);
-}
-
-static void
-egg_tray_icon_class_init (EggTrayIconClass *klass)
-{
-  GObjectClass *gobject_class = (GObjectClass *)klass;
-  GtkWidgetClass *widget_class = (GtkWidgetClass *)klass;
-  GtkContainerClass *container_class = (GtkContainerClass *)klass;
-
-  parent_class = g_type_class_peek_parent (klass);
-
-  gobject_class->get_property = egg_tray_icon_get_property;
-
-  widget_class->realize   = egg_tray_icon_realize;
-  widget_class->unrealize = egg_tray_icon_unrealize;
-
-  container_class->add = egg_tray_icon_add;
-
-  g_object_class_install_property (gobject_class,
-				   PROP_ORIENTATION,
-				   g_param_spec_enum ("orientation",
-						      _("Orientation"),
-						      _("The orientation of the tray."),
-						      GTK_TYPE_ORIENTATION,
-						      GTK_ORIENTATION_HORIZONTAL,
-						      G_PARAM_READABLE));
-
-#if defined (GDK_WINDOWING_X11)
-  /* Nothing */
-#elif defined (GDK_WINDOWING_WIN32)
-  g_warning ("Port eggtrayicon to Win32");
-#else
-  g_warning ("Port eggtrayicon to this GTK+ backend");
-#endif
-}
-
-static void
-egg_tray_icon_get_property (GObject    *object,
-			    guint       prop_id,
-			    GValue     *value,
-			    GParamSpec *pspec)
-{
-  EggTrayIcon *icon = EGG_TRAY_ICON (object);
-
-  switch (prop_id)
-    {
-    case PROP_ORIENTATION:
-      g_value_set_enum (value, icon->orientation);
-      break;
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
-}
-
-#ifdef GDK_WINDOWING_X11
-
-static void
-egg_tray_icon_get_orientation_property (EggTrayIcon *icon)
-{
-  Display *xdisplay;
-  Atom type;
-  int format;
-  union {
-	gulong *prop;
-	guchar *prop_ch;
-  } prop = { NULL };
-  gulong nitems;
-  gulong bytes_after;
-  int error, result;
-
-  g_assert (icon->manager_window != None);
-
-  if (!GTK_IS_WIDGET (icon))
-    return;
-  
-  xdisplay = GDK_DISPLAY_XDISPLAY (gtk_widget_get_display (GTK_WIDGET (icon)));
-
-  gdk_error_trap_push ();
-  type = None;
-  result = XGetWindowProperty (xdisplay,
-			       icon->manager_window,
-			       icon->orientation_atom,
-			       0, G_MAXLONG, FALSE,
-			       XA_CARDINAL,
-			       &type, &format, &nitems,
-			       &bytes_after, &(prop.prop_ch));
-  error = gdk_error_trap_pop ();
-
-  if (error || result != Success)
-    return;
-
-  if (type == XA_CARDINAL)
-    {
-      GtkOrientation orientation;
-
-      orientation = (prop.prop [0] == SYSTEM_TRAY_ORIENTATION_HORZ) ?
-					GTK_ORIENTATION_HORIZONTAL :
-					GTK_ORIENTATION_VERTICAL;
-
-      if (icon->orientation != orientation)
-	{
-	  icon->orientation = orientation;
-
-	  g_object_notify (G_OBJECT (icon), "orientation");
-	}
-    }
-
-  if (prop.prop)
-    XFree (prop.prop);
-}
-
-static GdkFilterReturn
-egg_tray_icon_manager_filter (GdkXEvent *xevent, GdkEvent *event, gpointer user_data)
-{
-  EggTrayIcon *icon = user_data;
-  XEvent *xev = (XEvent *)xevent;
-
-  if (xev->xany.type == ClientMessage &&
-      xev->xclient.message_type == icon->manager_atom &&
-      xev->xclient.data.l[1] == icon->selection_atom)
-    {
-      egg_tray_icon_update_manager_window (icon, TRUE);
-    }
-  else if (xev->xany.window == icon->manager_window)
-    {
-      if (xev->xany.type == PropertyNotify &&
-	  xev->xproperty.atom == icon->orientation_atom)
-	{
-	  egg_tray_icon_get_orientation_property (icon);
-	}
-      if (xev->xany.type == DestroyNotify)
-	{
-	  egg_tray_icon_manager_window_destroyed (icon);
-	}
-    }
-  return GDK_FILTER_CONTINUE;
-}
-
-#endif  
-
-static void
-egg_tray_icon_unrealize (GtkWidget *widget)
-{
-#ifdef GDK_WINDOWING_X11
-  EggTrayIcon *icon = EGG_TRAY_ICON (widget);
-  GdkWindow *root_window;
-
-  if (icon->manager_window != None)
-    {
-      GdkWindow *gdkwin;
-
-      gdkwin = gdk_window_lookup_for_display (gtk_widget_get_display (widget),
-                                              icon->manager_window);
-
-      gdk_window_remove_filter (gdkwin, egg_tray_icon_manager_filter, icon);
-    }
-
-  root_window = gdk_screen_get_root_window (gtk_widget_get_screen (widget));
-
-  gdk_window_remove_filter (root_window, egg_tray_icon_manager_filter, icon);
-
-  if (GTK_WIDGET_CLASS (parent_class)->unrealize)
-    (* GTK_WIDGET_CLASS (parent_class)->unrealize) (widget);
-#endif
-}
-
-#ifdef GDK_WINDOWING_X11
-
-static void
-egg_tray_icon_send_manager_message (EggTrayIcon *icon,
-				    long         message,
-				    Window       window,
-				    long         data1,
-				    long         data2,
-				    long         data3)
-{
-  XClientMessageEvent ev;
-  Display *display;
-  
-  ev.type = ClientMessage;
-  ev.window = window;
-  ev.message_type = icon->system_tray_opcode_atom;
-  ev.format = 32;
-  ev.data.l[0] = gdk_x11_get_server_time (GTK_WIDGET (icon)->window);
-  ev.data.l[1] = message;
-  ev.data.l[2] = data1;
-  ev.data.l[3] = data2;
-  ev.data.l[4] = data3;
-
-  display = GDK_DISPLAY_XDISPLAY (gtk_widget_get_display (GTK_WIDGET (icon)));
-  
-  gdk_error_trap_push ();
-  XSendEvent (display,
-	      icon->manager_window, False, NoEventMask, (XEvent *)&ev);
-  XSync (display, False);
-  gdk_error_trap_pop ();
-}
-
-static void
-egg_tray_icon_send_dock_request (EggTrayIcon *icon)
-{
-  egg_tray_icon_send_manager_message (icon,
-				      SYSTEM_TRAY_REQUEST_DOCK,
-				      icon->manager_window,
-				      gtk_plug_get_id (GTK_PLUG (icon)),
-				      0, 0);
-}
-
-static void
-egg_tray_icon_update_manager_window (EggTrayIcon *icon,
-				     gboolean     dock_if_realized)
-{
-  Display *xdisplay;
-  
-  if (icon->manager_window != None)
-    return;
-
-  xdisplay = GDK_DISPLAY_XDISPLAY (gtk_widget_get_display (GTK_WIDGET (icon)));
-  
-  XGrabServer (xdisplay);
-  
-  icon->manager_window = XGetSelectionOwner (xdisplay,
-					     icon->selection_atom);
-
-  if (icon->manager_window != None)
-    XSelectInput (xdisplay,
-		  icon->manager_window, StructureNotifyMask|PropertyChangeMask);
-
-  XUngrabServer (xdisplay);
-  XFlush (xdisplay);
-  
-  if (icon->manager_window != None)
-    {
-      GdkWindow *gdkwin;
-
-      gdkwin = gdk_window_lookup_for_display (gtk_widget_get_display (GTK_WIDGET (icon)),
-					      icon->manager_window);
-      
-      gdk_window_add_filter (gdkwin, egg_tray_icon_manager_filter, icon);
-
-      if (dock_if_realized && GTK_WIDGET_REALIZED (icon))
-	egg_tray_icon_send_dock_request (icon);
-
-      egg_tray_icon_get_orientation_property (icon);
-    }
-}
-
-static void
-egg_tray_icon_manager_window_destroyed (EggTrayIcon *icon)
-{
-  GdkWindow *gdkwin;
-  
-  g_return_if_fail (icon->manager_window != None);
-
-  if (!GTK_IS_WIDGET (icon))
-    return;
-
-  gdkwin = gdk_window_lookup_for_display (gtk_widget_get_display (GTK_WIDGET (icon)),
-					  icon->manager_window);
-      
-  gdk_window_remove_filter (gdkwin, egg_tray_icon_manager_filter, icon);
-
-  icon->manager_window = None;
-
-  egg_tray_icon_update_manager_window (icon, TRUE);
-}
-
-#endif
-
-static gboolean
-transparent_expose_event (GtkWidget *widget, GdkEventExpose *event, gpointer user_data)
-{
-  gdk_window_clear_area (widget->window, event->area.x, event->area.y,
-			 event->area.width, event->area.height);
-  return FALSE;
-}
-
-static void
-make_transparent_again (GtkWidget *widget, GtkStyle *previous_style,
-			gpointer user_data)
-{
-  gdk_window_set_back_pixmap (widget->window, NULL, TRUE);
-}
-
-static void
-make_transparent (GtkWidget *widget, gpointer user_data)
-{
-  if (GTK_WIDGET_NO_WINDOW (widget) || GTK_WIDGET_APP_PAINTABLE (widget))
-    return;
-
-  gtk_widget_set_app_paintable (widget, TRUE);
-  gtk_widget_set_double_buffered (widget, FALSE);
-  gdk_window_set_back_pixmap (widget->window, NULL, TRUE);
-  g_signal_connect (widget, "expose_event",
-		    G_CALLBACK (transparent_expose_event), NULL);
-  g_signal_connect_after (widget, "style_set",
-			  G_CALLBACK (make_transparent_again), NULL);
-}	
-
-static void
-egg_tray_icon_realize (GtkWidget *widget)
-{
-#ifdef GDK_WINDOWING_X11
-  EggTrayIcon *icon = EGG_TRAY_ICON (widget);
-  GdkScreen *screen;
-  GdkDisplay *display;
-  Display *xdisplay;
-  char buffer[256];
-  GdkWindow *root_window;
-
-  if (GTK_WIDGET_CLASS (parent_class)->realize)
-    GTK_WIDGET_CLASS (parent_class)->realize (widget);
-
-  make_transparent (widget, NULL);
-
-  screen = gtk_widget_get_screen (widget);
-  display = gdk_screen_get_display (screen);
-  xdisplay = gdk_x11_display_get_xdisplay (display);
-
-  /* Now see if there's a manager window around */
-  g_snprintf (buffer, sizeof (buffer),
-	      "_NET_SYSTEM_TRAY_S%d",
-	      gdk_screen_get_number (screen));
-
-  icon->selection_atom = XInternAtom (xdisplay, buffer, False);
-  
-  icon->manager_atom = XInternAtom (xdisplay, "MANAGER", False);
-  
-  icon->system_tray_opcode_atom = XInternAtom (xdisplay,
-						   "_NET_SYSTEM_TRAY_OPCODE",
-						   False);
-
-  icon->orientation_atom = XInternAtom (xdisplay,
-					"_NET_SYSTEM_TRAY_ORIENTATION",
-					False);
-
-  egg_tray_icon_update_manager_window (icon, FALSE);
-  egg_tray_icon_send_dock_request (icon);
-
-  root_window = gdk_screen_get_root_window (screen);
-  
-  /* Add a root window filter so that we get changes on MANAGER */
-  gdk_window_add_filter (root_window,
-			 egg_tray_icon_manager_filter, icon);
-#endif
-}
-
-static void
-egg_tray_icon_add (GtkContainer *container, GtkWidget *widget)
-{
-  g_signal_connect (widget, "realize",
-		    G_CALLBACK (make_transparent), NULL);
-  GTK_CONTAINER_CLASS (parent_class)->add (container, widget);
-}
-
-EggTrayIcon *
-egg_tray_icon_new_for_screen (GdkScreen *screen, const char *name)
-{
-  g_return_val_if_fail (GDK_IS_SCREEN (screen), NULL);
-
-  return g_object_new (EGG_TYPE_TRAY_ICON, "screen", screen, "title", name, NULL);
-}
-
-EggTrayIcon*
-egg_tray_icon_new (const gchar *name)
-{
-  return g_object_new (EGG_TYPE_TRAY_ICON, "title", name, NULL);
-}
-
-guint
-egg_tray_icon_send_message (EggTrayIcon *icon,
-			    gint         timeout,
-			    const gchar *message,
-			    gint         len)
-{
-  guint stamp;
-  
-  g_return_val_if_fail (EGG_IS_TRAY_ICON (icon), 0);
-  g_return_val_if_fail (timeout >= 0, 0);
-  g_return_val_if_fail (message != NULL, 0);
-		     
-#ifdef GDK_WINDOWING_X11
-  if (icon->manager_window == None)
-    return 0;
-#endif
-
-  if (len < 0)
-    len = strlen (message);
-
-  stamp = icon->stamp++;
-  
-#ifdef GDK_WINDOWING_X11
-  /* Get ready to send the message */
-  egg_tray_icon_send_manager_message (icon, SYSTEM_TRAY_BEGIN_MESSAGE,
-				      (Window)gtk_plug_get_id (GTK_PLUG (icon)),
-				      timeout, len, stamp);
-
-  /* Now to send the actual message */
-  gdk_error_trap_push ();
-  while (len > 0)
-    {
-      XClientMessageEvent ev;
-      Display *xdisplay;
-
-      xdisplay = GDK_DISPLAY_XDISPLAY (gtk_widget_get_display (GTK_WIDGET (icon)));
-      
-      ev.type = ClientMessage;
-      ev.window = (Window)gtk_plug_get_id (GTK_PLUG (icon));
-      ev.format = 8;
-      ev.message_type = XInternAtom (xdisplay,
-				     "_NET_SYSTEM_TRAY_MESSAGE_DATA", False);
-      if (len > 20)
-	{
-	  memcpy (&ev.data, message, 20);
-	  len -= 20;
-	  message += 20;
-	}
-      else
-	{
-	  memcpy (&ev.data, message, len);
-	  len = 0;
-	}
-
-      XSendEvent (xdisplay,
-		  icon->manager_window, False, StructureNotifyMask, (XEvent *)&ev);
-      XSync (xdisplay, False);
-    }
-  gdk_error_trap_pop ();
-#endif
-
-  return stamp;
-}
-
-void
-egg_tray_icon_cancel_message (EggTrayIcon *icon,
-			      guint        id)
-{
-  g_return_if_fail (EGG_IS_TRAY_ICON (icon));
-  g_return_if_fail (id > 0);
-#ifdef GDK_WINDOWING_X11  
-  egg_tray_icon_send_manager_message (icon, SYSTEM_TRAY_CANCEL_MESSAGE,
-				      (Window)gtk_plug_get_id (GTK_PLUG (icon)),
-				      id, 0, 0);
-#endif
-}
-
-GtkOrientation
-egg_tray_icon_get_orientation (EggTrayIcon *icon)
-{
-  g_return_val_if_fail (EGG_IS_TRAY_ICON (icon), GTK_ORIENTATION_HORIZONTAL);
-
-  return icon->orientation;
-}
--- liferea-1.6.4.orig/src/ui/ui_popup.c
+++ liferea-1.6.4/src/ui/ui_popup.c
@@ -57,13 +57,19 @@ on_toggle_visibility (void)
 }
 
 static void
-ui_popup_menu (GtkWidget *menu, guint button, guint32 activate_time)
+ui_popup_menu_at_pos (GtkWidget *menu, GtkMenuPositionFunc func, guint button, guint32 activate_time, gpointer user_data)
 {
 	g_signal_connect_after (G_OBJECT(menu), "unmap-event", G_CALLBACK(gtk_widget_destroy), NULL);
 
 	gtk_widget_show_all (menu);
 
-	gtk_menu_popup (GTK_MENU(menu), NULL, NULL, NULL, NULL, button, activate_time);
+	gtk_menu_popup (GTK_MENU(menu), NULL, NULL, func, user_data, button, activate_time);
+}
+
+static void
+ui_popup_menu (GtkWidget *menu, guint button, guint32 activate_time)
+{
+	ui_popup_menu_at_pos(menu, NULL, button, activate_time, NULL);
 }
 
 static GtkWidget*
@@ -161,7 +167,7 @@ ui_popup_enclosure_menu (enclosurePtr en
 }
 
 void
-ui_popup_systray_menu (guint button, guint32 activate_time)
+ui_popup_systray_menu (GtkMenuPositionFunc func, guint button, guint32 activate_time, gpointer user_data)
 {
 	GtkWidget	*menu;
 	GtkWidget 	*mainwindow = liferea_shell_get_window ();
@@ -177,7 +183,7 @@ ui_popup_systray_menu (guint button, gui
 	ui_popup_add_menuitem (menu, _("_Show Liferea"), on_toggle_visibility, NULL, NULL, (!(gdk_window_get_state (mainwindow->window) & GDK_WINDOW_STATE_ICONIFIED) && GTK_WIDGET_VISIBLE (mainwindow)) + UI_POPUP_ITEM_IS_TOGGLE);
 	ui_popup_add_menuitem (menu, _("_Quit"), on_popup_quit, NULL, GTK_STOCK_QUIT, 0);
 
-	ui_popup_menu (menu, button, activate_time);
+	ui_popup_menu_at_pos (menu, func, button, activate_time, user_data);
 }
 
 /* popup callback wrappers */
--- liferea-1.6.4.orig/src/ui/Makefile.am
+++ liferea-1.6.4/src/ui/Makefile.am
@@ -12,7 +12,6 @@ libliui_a_CFLAGS = $(PACKAGE_CFLAGS) $(D
 libliui_a_SOURCES = \
 	auth_dialog.c auth_dialog.h \
 	browser_tabs.c browser_tabs.h \
-	eggtrayicon.c eggtrayicon.h \
 	enclosure_list_view.c enclosure_list_view.h \
 	itemview.c itemview.h \
 	liferea_dialog.c liferea_dialog.h \
--- liferea-1.6.4.orig/src/ui/ui_popup.h
+++ liferea-1.6.4/src/ui/ui_popup.h
@@ -43,10 +43,12 @@ void ui_popup_item_menu (itemPtr item, g
  * Shows a popup menu for the systray icon.
  * (Offline mode, Close, Minimize...)
  *
+ * @param func  the function to calculate the position to popup
  * @param button	the mouse button which was pressed to initiate the event
  * @param activate_time	the time at which the activation event occurred
+ * @param user_data  the user data to pass to func.
  */
-void ui_popup_systray_menu (guint button, guint32 activate_time);
+void ui_popup_systray_menu (GtkMenuPositionFunc func, guint button, guint32 activate_time, gpointer user_data);
 
 /**
  * Shows a popup menu for the enclosure list view.
--- liferea-1.6.4.orig/po/POTFILES.in
+++ liferea-1.6.4/po/POTFILES.in
@@ -74,8 +74,6 @@ src/vfolder.c
 src/vfolder.h
 src/xml.c
 src/xml.h
-src/ui/eggtrayicon.c
-src/ui/eggtrayicon.h
 src/ui/enclosure_list_view.c
 src/ui/enclosure_list_view.h
 src/ui/itemview.c
