Index: gtk+-3.0.9/gdk/gdkwindow.c
===================================================================
--- gtk+-3.0.9.orig/gdk/gdkwindow.c	2011-06-07 08:29:40.860881065 +0200
+++ gtk+-3.0.9/gdk/gdkwindow.c	2011-06-07 08:30:21.297081582 +0200
@@ -2410,6 +2410,10 @@
  *
  * See gdk_display_add_client_message_filter() if you are interested
  * in X ClientMessage events.
+ *
+ * If you are interested in X GenericEvents, bear in mind that
+ * XGetEventData() has been already called on the event, and
+ * XFreeEventData() must not be called within @function.
  **/
 void
 gdk_window_add_filter (GdkWindow     *window,
Index: gtk+-3.0.9/gdk/x11/gdkdevicemanager-xi2.c
===================================================================
--- gtk+-3.0.9.orig/gdk/x11/gdkdevicemanager-xi2.c	2011-06-07 08:15:02.136197362 +0200
+++ gtk+-3.0.9/gdk/x11/gdkdevicemanager-xi2.c	2011-06-07 08:29:18.380769587 +0200
@@ -91,7 +91,8 @@
 static void         gdk_x11_device_manager_xi2_select_window_events (GdkEventTranslator *translator,
                                                                      Window              window,
                                                                      GdkEventMask        event_mask);
-
+static GdkWindow *  gdk_x11_device_manager_xi2_get_window           (GdkEventTranslator *translator,
+                                                                     XEvent             *xevent);
 
 enum {
   PROP_0,
@@ -561,6 +562,7 @@
   iface->translate_event = gdk_x11_device_manager_xi2_translate_event;
   iface->get_handled_events = gdk_x11_device_manager_xi2_get_handled_events;
   iface->select_window_events = gdk_x11_device_manager_xi2_select_window_events;
+  iface->get_window = gdk_x11_device_manager_xi2_get_window;
 }
 
 static void
@@ -1007,43 +1009,27 @@
   gboolean return_val = TRUE;
   GdkWindow *window;
   XIEvent *ev;
-  Display *dpy;
 
-  dpy = GDK_DISPLAY_XDISPLAY (display);
   device_manager = (GdkX11DeviceManagerXI2 *) translator;
   cookie = &xevent->xcookie;
 
   if (xevent->type != GenericEvent)
     return gdk_x11_device_manager_xi2_translate_core_event (translator, display, event, xevent);
-
-  if (!XGetEventData (dpy, cookie))
+  else if (cookie->extension != device_manager->opcode)
     return FALSE;
 
-  if (cookie->type != GenericEvent ||
-      cookie->extension != device_manager->opcode)
-    {
-      XFreeEventData (dpy, cookie);
-      return FALSE;
-    }
-
   ev = (XIEvent *) cookie->data;
 
   window = get_event_window (translator, ev);
 
   if (window && GDK_WINDOW_DESTROYED (window))
-    {
-      XFreeEventData (dpy, cookie);
-      return FALSE;
-    }
+    return FALSE;
 
   if (ev->evtype == XI_Motion ||
       ev->evtype == XI_ButtonRelease)
     {
       if (_gdk_x11_moveresize_handle_event (xevent))
-        {
-          XFreeEventData (dpy, cookie);
-          return FALSE;
-        }
+        return FALSE;
     }
 
   switch (ev->evtype)
@@ -1325,8 +1311,6 @@
       event->any.type = GDK_NOTHING;
     }
 
-  XFreeEventData (dpy, cookie);
-
   return return_val;
 }
 
@@ -1366,6 +1350,24 @@
   g_free (event_mask.mask);
 }
 
+static GdkWindow *
+gdk_x11_device_manager_xi2_get_window (GdkEventTranslator *translator,
+                                       XEvent             *xevent)
+{
+  GdkX11DeviceManagerXI2 *device_manager;
+  XIEvent *ev;
+
+  device_manager = (GdkX11DeviceManagerXI2 *) translator;
+
+  if (xevent->type != GenericEvent ||
+      xevent->xcookie.extension != device_manager->opcode)
+    return NULL;
+
+  ev = (XIEvent *) xevent->xcookie.data;
+
+  return get_event_window (translator, ev);
+}
+
 #else /* XINPUT_2 */
 
 static void
Index: gtk+-3.0.9/gdk/x11/gdkeventsource.c
===================================================================
--- gtk+-3.0.9.orig/gdk/x11/gdkeventsource.c	2011-06-07 08:15:11.743439030 +0200
+++ gtk+-3.0.9/gdk/x11/gdkeventsource.c	2011-06-07 08:25:06.887522506 +0200
@@ -97,11 +97,30 @@
 }
 
 static GdkWindow *
-gdk_event_source_get_filter_window (GdkEventSource *event_source,
-                                    XEvent         *xevent)
+gdk_event_source_get_filter_window (GdkEventSource      *event_source,
+                                    XEvent              *xevent,
+                                    GdkEventTranslator **event_translator)
 {
+  GList *list = event_source->translators;
   GdkWindow *window;
 
+  *event_translator = NULL;
+
+  while (list)
+    {
+      GdkEventTranslator *translator = list->data;
+
+      list = list->next;
+      window = _gdk_x11_event_translator_get_window (translator,
+                                                     event_source->display,
+                                                     xevent);
+      if (window)
+        {
+          *event_translator = translator;
+          return window;
+        }
+    }
+
   window = gdk_x11_window_lookup_for_display (event_source->display,
                                               xevent->xany.window);
 
@@ -151,11 +170,21 @@
                                   XEvent         *xevent)
 {
   GdkEvent *event = gdk_event_new (GDK_NOTHING);
-  GList *list = event_source->translators;
-  GdkFilterReturn result;
+  GdkFilterReturn result = GDK_FILTER_CONTINUE;
+  GdkEventTranslator *event_translator;
   GdkWindow *filter_window;
+  Display *dpy;
+
+  dpy = GDK_DISPLAY_XDISPLAY (event_source->display);
+
+  /* Get cookie data here so it's available
+   * to every event translator and event filter.
+   */
+  if (xevent->type == GenericEvent)
+    XGetEventData (dpy, &xevent->xcookie);
 
-  filter_window = gdk_event_source_get_filter_window (event_source, xevent);
+  filter_window = gdk_event_source_get_filter_window (event_source, xevent,
+                                                      &event_translator);
   if (filter_window)
     event->any.window = g_object_ref (filter_window);
 
@@ -165,48 +194,53 @@
       /* Apply global filters */
 
       result = gdk_event_apply_filters (xevent, event, NULL);
+    }
+
+  if (result == GDK_FILTER_CONTINUE &&
+      filter_window && filter_window->filters)
+    {
+      /* Apply per-window filters */
+      result = gdk_event_apply_filters (xevent, event, filter_window);
+    }
+
+  if (result != GDK_FILTER_CONTINUE)
+    {
+      if (xevent->type == GenericEvent)
+        XFreeEventData (dpy, &xevent->xcookie);
 
       if (result == GDK_FILTER_REMOVE)
         {
           gdk_event_free (event);
           return NULL;
         }
-      else if (result == GDK_FILTER_TRANSLATE)
+      else /* GDK_FILTER_TRANSLATE */
         return event;
     }
 
-  if (filter_window)
-    {
-      /* Apply per-window filters */
-      GdkFilterReturn result;
-
-      if (filter_window->filters)
-	{
-	  result = gdk_event_apply_filters (xevent, event,
-					    filter_window);
-
-          if (result == GDK_FILTER_REMOVE)
-            {
-              gdk_event_free (event);
-              return NULL;
-            }
-          else if (result == GDK_FILTER_TRANSLATE)
-            return event;
-        }
-    }
-
   gdk_event_free (event);
   event = NULL;
 
-  while (list && !event)
+  if (event_translator)
     {
-      GdkEventTranslator *translator = list->data;
-
-      list = list->next;
-      event = _gdk_x11_event_translator_translate (translator,
+      /* Event translator was gotten before in get_filter_window() */
+      event = _gdk_x11_event_translator_translate (event_translator,   
                                                    event_source->display,
                                                    xevent);
     }
+  else
+    {
+      GList *list = event_source->translators;
+
+      while (list && !event)
+        {
+          GdkEventTranslator *translator = list->data;
+
+          list = list->next;
+          event = _gdk_x11_event_translator_translate (translator,
+                                                       event_source->display,
+                                                       xevent);
+        }
+    }
 
   if (event &&
       (event->type == GDK_ENTER_NOTIFY ||
@@ -217,6 +251,9 @@
       handle_focus_change (&event->crossing);
     }
 
+  if (xevent->type == GenericEvent)
+    XFreeEventData (dpy, &xevent->xcookie);
+
   return event;
 }
 
Index: gtk+-3.0.9/gdk/x11/gdkeventtranslator.c
===================================================================
--- gtk+-3.0.9.orig/gdk/x11/gdkeventtranslator.c	2011-06-07 08:21:29.734445694 +0200
+++ gtk+-3.0.9/gdk/x11/gdkeventtranslator.c	2011-06-07 08:26:13.543853032 +0200
@@ -20,7 +20,7 @@
 #include "config.h"
 
 #include "gdkeventtranslator.h"
-
+#include "gdkwindow-x11.h"
 
 typedef GdkEventTranslatorIface GdkEventTranslatorInterface;
 G_DEFINE_INTERFACE (GdkEventTranslator, _gdk_x11_event_translator, G_TYPE_OBJECT);
@@ -87,3 +87,24 @@
   if (iface->select_window_events)
     iface->select_window_events (translator, window, event_mask);
 }
+
+GdkWindow *
+_gdk_x11_event_translator_get_window (GdkEventTranslator *translator,
+                                      GdkDisplay         *display,
+                                      XEvent             *xevent)
+{
+  GdkEventTranslatorIface *iface;
+  GdkWindow *window = NULL;
+
+  g_return_val_if_fail (GDK_IS_EVENT_TRANSLATOR (translator), NULL);
+
+  iface = GDK_EVENT_TRANSLATOR_GET_IFACE (translator);
+
+  if (iface->get_window)
+    window = iface->get_window (translator, xevent);
+
+  if (!window)
+    window = gdk_x11_window_lookup_for_display (display, xevent->xany.window);
+
+  return window;
+}
Index: gtk+-3.0.9/gdk/x11/gdkeventtranslator.h
===================================================================
--- gtk+-3.0.9.orig/gdk/x11/gdkeventtranslator.h	2011-06-07 08:21:31.894456415 +0200
+++ gtk+-3.0.9/gdk/x11/gdkeventtranslator.h	2011-06-07 08:26:57.220069609 +0200
@@ -49,6 +49,8 @@
   void         (* select_window_events) (GdkEventTranslator *translator,
                                          Window              window,
                                          GdkEventMask        event_mask);
+  GdkWindow *  (* get_window)           (GdkEventTranslator *translator,
+                                         XEvent             *xevent);
 };
 
 GType      _gdk_x11_event_translator_get_type (void) G_GNUC_CONST;
@@ -60,6 +62,9 @@
 void         _gdk_x11_event_translator_select_window_events (GdkEventTranslator *translator,
                                                              Window              window,
                                                              GdkEventMask        event_mask);
+GdkWindow *  _gdk_x11_event_translator_get_window           (GdkEventTranslator *translator,
+                                                             GdkDisplay         *display,
+                                                             XEvent             *xevent);
 
 G_END_DECLS
 
