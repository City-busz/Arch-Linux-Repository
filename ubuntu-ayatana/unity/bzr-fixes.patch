diff -Naur unity-4.24.0/plugins/unityshell/src/BamfLauncherIcon.cpp teszt/plugins/unityshell/src/BamfLauncherIcon.cpp
--- unity-4.24.0.orig/plugins/unityshell/src/BamfLauncherIcon.cpp	2011-10-12 14:02:40.000000000 +0200
--- unity-4.24.0/plugins/unityshell/src/BamfLauncherIcon.cpp	2011-11-12 16:14:56.678266000 +0100
@@ -78,6 +78,7 @@
 
   if (arg.source != ActionArg::SWITCHER)
   {
+    bool any_visible = false;
     for (l = bamf_view_get_children(BAMF_VIEW(m_App)); l; l = l->next)
     {
       view = static_cast <BamfView*> (l->data);
@@ -85,13 +86,18 @@
       if (BAMF_IS_WINDOW(view))
       {
         Window xid = bamf_window_get_xid(BAMF_WINDOW(view));
+
+        if (WindowManager::Default ()->IsWindowOnCurrentDesktop(xid))
+          any_visible = true;
         if (!WindowManager::Default ()->IsWindowMapped(xid))
         {
           active = false;
-          break;
         }
       }
     }
+
+    if (!any_visible)
+      active = false;
   }
 
   /* Behaviour:
@@ -566,6 +572,7 @@
   GList* children, *l;
   BamfView* view;
   bool any_urgent = false;
+  bool any_visible = false;
 
   children = bamf_view_get_children(BAMF_VIEW(m_App));
 
@@ -581,6 +588,10 @@
       Window xid = bamf_window_get_xid(BAMF_WINDOW(view));
       bool urgent = bamf_view_is_urgent(view);
 
+      if (WindowManager::Default ()->IsWindowOnCurrentDesktop (xid) &&
+          WindowManager::Default ()->IsWindowVisible (xid))
+        any_visible = true;
+
       if (any_urgent)
       {
         if (urgent)
@@ -591,17 +602,28 @@
         if (urgent)
         {
           windows.clear();
+          any_visible = false;
           any_urgent = true;
         }
-        windows.push_back(xid);
       }
+      windows.push_back(xid);
     }
   }
 
   g_list_free(children);
   if (arg.source != ActionArg::SWITCHER)
-    WindowManager::Default()->FocusWindowGroup(windows,
-      WindowManager::FocusVisibility::ForceUnminimizeInvisible);
+  {
+    if (any_visible)
+    {
+      WindowManager::Default()->FocusWindowGroup(windows,
+       WindowManager::FocusVisibility::ForceUnminimizeInvisible);
+    }
+    else
+    {
+      WindowManager::Default()->FocusWindowGroup(windows,
+       WindowManager::FocusVisibility::ForceUnminimizeOnCurrentDesktop);
+    }
+  }
   else
     WindowManager::Default()->FocusWindowGroup(windows,
       WindowManager::FocusVisibility::OnlyVisible);
diff -Naur unity-4.24.0/plugins/unityshell/src/DashController.cpp teszt/plugins/unityshell/src/DashController.cpp
--- unity-4.24.0.orig/plugins/unityshell/src/DashController.cpp	2011-10-12 14:02:40.000000000 +0200
--- unity-4.24.0/plugins/unityshell/src/DashController.cpp	2011-11-12 16:14:56.678266000 +0100
@@ -131,6 +131,8 @@
   SetupDashView();
   Relayout();
   ensure_id_ = 0;
+
+  on_realize.emit ();
 }
 
 nux::BaseWindow* DashController::window() const
diff -Naur unity-4.24.0/plugins/unityshell/src/DashController.h teszt/plugins/unityshell/src/DashController.h
--- unity-4.24.0.orig/plugins/unityshell/src/DashController.h	2011-10-12 14:02:40.000000000 +0200
--- unity-4.24.0/plugins/unityshell/src/DashController.h	2011-11-12 16:14:56.678266000 +0100
@@ -54,6 +54,8 @@
   nux::Property<int> launcher_width;
   nux::Property<int> panel_height;
 
+  sigc::signal<void> on_realize;
+
 protected:
   const gchar* GetName();
   void AddProperties(GVariantBuilder* builder);
diff -Naur unity-4.24.0/plugins/unityshell/src/LensView.cpp teszt/plugins/unityshell/src/LensView.cpp
--- unity-4.24.0.orig/plugins/unityshell/src/LensView.cpp	2011-10-12 14:02:40.000000000 +0200
--- unity-4.24.0/plugins/unityshell/src/LensView.cpp	2011-11-12 16:14:56.678266000 +0100
@@ -145,7 +145,9 @@
 {
   layout_ = new nux::HLayout(NUX_TRACKER_LOCATION);
   
-  layout_->SetHorizontalExternalMargin(8);
+  // Breaks the sizing of the whole dash causing some colums to be clipped from result view.
+  // look in to this for P.
+  //  layout_->SetHorizontalExternalMargin(8);
 
   scroll_view_ = new LensScrollView(new PlacesVScrollBar(NUX_TRACKER_LOCATION),
                                     NUX_TRACKER_LOCATION);
diff -Naur unity-4.24.0/plugins/unityshell/src/PanelView.cpp teszt/plugins/unityshell/src/PanelView.cpp
--- unity-4.24.0.orig/plugins/unityshell/src/PanelView.cpp	2011-10-12 14:02:40.000000000 +0200
--- unity-4.24.0/plugins/unityshell/src/PanelView.cpp	2011-11-12 16:14:56.678266000 +0100
@@ -374,7 +374,7 @@
   _last_height = geo.height;
   _is_dirty = false;
 
-  if (_dash_is_open && (_menu_view->GetMaximizedWindow() == 0))
+  if (_dash_is_open)
   {
     if (_bg_layer)
       delete _bg_layer;
diff -Naur unity-4.24.0/plugins/unityshell/src/PluginAdapter.cpp teszt/plugins/unityshell/src/PluginAdapter.cpp
--- unity-4.24.0.orig/plugins/unityshell/src/PluginAdapter.cpp	2011-10-12 14:02:40.000000000 +0200
--- unity-4.24.0/plugins/unityshell/src/PluginAdapter.cpp	2011-11-12 16:14:56.678266000 +0100
@@ -489,6 +489,19 @@
   return true;
 }
 
+bool
+PluginAdapter::IsWindowVisible(guint32 xid)
+{
+  Window win = (Window) xid;
+  CompWindow* window;
+
+  window = m_Screen->findWindow(win);
+  if (window)
+    return !(window->state () & CompWindowStateHiddenMask);
+
+  return true;
+}
+
 void
 PluginAdapter::Restore(guint32 xid)
 {
@@ -562,6 +575,7 @@
   CompWindow* top_win = NULL;
   bool any_on_current = false;
   bool any_mapped = false;
+  bool forced_unminimize = false;
 
   /* sort the list */
   CompWindowList windows;
@@ -609,13 +623,29 @@
         * not going to be accessible by either switcher
         * or scale, so unconditionally unminimize those
         * windows when the launcher icon is activated */
-       if (focus_visibility == WindowManager::FocusVisibility::ForceUnminimizeInvisible &&
-           win->mapNum () == 0)
+       if ((focus_visibility == WindowManager::FocusVisibility::ForceUnminimizeOnCurrentDesktop &&
+            WindowManager::Default ()->IsWindowOnCurrentDesktop(win->id ())) ||
+            (focus_visibility == WindowManager::FocusVisibility::ForceUnminimizeInvisible &&
+             win->mapNum () == 0))
+       {
+         bool is_mapped = win->mapNum () != 0;
+         top_win = win;
          win->unminimize ();
+
+         forced_unminimize = true;
+
+         /* Initially minimized windows dont get raised */
+         if (!is_mapped)
+           win->raise ();
+       }
        else if ((any_mapped && !win->minimized()) || !any_mapped)
        {
-         win->raise();
-         top_win = win;
+         if (!forced_unminimize ||
+             WindowManager::Default ()->IsWindowOnCurrentDesktop (win->id ()))
+         {
+           win->raise();
+           top_win = win;
+         }
        }
     }
   }
diff -Naur unity-4.24.0/plugins/unityshell/src/PluginAdapter.h teszt/plugins/unityshell/src/PluginAdapter.h
--- unity-4.24.0.orig/plugins/unityshell/src/PluginAdapter.h	2011-10-12 14:02:40.000000000 +0200
--- unity-4.24.0/plugins/unityshell/src/PluginAdapter.h	2011-11-12 16:14:56.678266000 +0100
@@ -117,6 +117,7 @@
   bool IsWindowOnCurrentDesktop(guint xid);
   bool IsWindowObscured(guint xid);
   bool IsWindowMapped(guint xid);
+  bool IsWindowVisible(guint32 xid);
   void Restore(guint32 xid);
   void Minimize(guint32 xid);
   void Close(guint32 xid);
diff -Naur unity-4.24.0/plugins/unityshell/src/unityshell.cpp teszt/plugins/unityshell/src/unityshell.cpp
--- unity-4.24.0.orig/plugins/unityshell/src/unityshell.cpp	2011-10-12 14:02:40.000000000 +0200
--- unity-4.24.0/plugins/unityshell/src/unityshell.cpp	2011-11-12 16:14:56.678266000 +0100
@@ -2380,6 +2380,20 @@
     glDeleteTextures (1, &mFBTexture);
 }
 
+void UnityScreen::OnDashRealized ()
+{
+  /* stack any windows named "onboard" above us */
+  for (CompWindow *w : screen->windows ())
+  {
+    if (w->resName() == "onboard")
+    {
+      Window xid = dashController->window()->GetInputWindowId();
+      XSetTransientForHint (screen->dpy(), w->id(), xid);
+      w->raise ();
+    }
+  }
+}
+
 /* Start up the launcher */
 void UnityScreen::initLauncher(nux::NThread* thread, void* InitData)
 {
@@ -2436,6 +2450,7 @@
 
   /* Setup Places */
   self->dashController = DashController::Ptr(new DashController());
+  self->dashController->on_realize.connect (sigc::mem_fun (self, &UnityScreen::OnDashRealized));
 
   /* FIXME: this should not be manual, should be managed with a
      show/hide callback like in GAIL
@@ -2491,11 +2506,24 @@
 
   if (window->state () & CompWindowStateFullscreenMask)
     UnityScreen::get (screen)->fullscreen_windows_.push_back(window);
-  
-  if (window->resName() == "onboard")
+
+  /* We might be starting up so make sure that
+   * we don't deref the dashcontroller that doesnt
+   * exist */
+  DashController::Ptr dp = UnityScreen::get (screen)->dashController;
+
+  if (dp)
   {
-    Window xid = UnityScreen::get (screen)->dashController->window()->GetInputWindowId();
-    XSetTransientForHint (screen->dpy(), window->id(), xid);
+    nux::BaseWindow* w = dp->window ();
+
+    if (w)
+    {
+      if (window->resName() == "onboard")
+      {
+        Window xid = dp->window()->GetInputWindowId();
+        XSetTransientForHint (screen->dpy(), window->id(), xid);
+      }
+    }
   }
 }
 
diff -Naur unity-4.24.0/plugins/unityshell/src/unityshell.h teszt/plugins/unityshell/src/unityshell.h
--- unity-4.24.0.orig/plugins/unityshell/src/unityshell.h	2011-10-12 14:02:40.000000000 +0200
--- unity-4.24.0/plugins/unityshell/src/unityshell.h	2011-11-12 16:14:56.678266000 +0100
@@ -269,6 +269,8 @@
   void restartLauncherKeyNav();
   void OnLauncherHiddenChanged();
 
+  void OnDashRealized ();
+
   static void OnQuicklistEndKeyNav(GVariant* data, void* value);
   static void OnLauncherStartKeyNav(GVariant* data, void* value);
   static void OnLauncherEndKeyNav(GVariant* data, void* value);
diff -Naur unity-4.24.0/plugins/unityshell/src/WindowManager.cpp teszt/plugins/unityshell/src/WindowManager.cpp
--- unity-4.24.0.orig/plugins/unityshell/src/WindowManager.cpp	2011-10-12 14:02:40.000000000 +0200
--- unity-4.24.0/plugins/unityshell/src/WindowManager.cpp	2011-11-12 16:14:56.678266000 +0100
@@ -68,6 +68,11 @@
     return true;
   }
 
+  bool IsWindowVisible(guint32 xid)
+  {
+    return true;
+  }
+
   void Restore(guint32 xid)
   {
     g_debug("%s", G_STRFUNC);
diff -Naur unity-4.24.0/plugins/unityshell/src/WindowManager.h teszt/plugins/unityshell/src/WindowManager.h
--- unity-4.24.0.orig/plugins/unityshell/src/WindowManager.h	2011-10-12 14:02:40.000000000 +0200
--- unity-4.24.0/plugins/unityshell/src/WindowManager.h	2011-11-12 16:14:56.678266000 +0100
@@ -48,7 +48,8 @@
   enum class FocusVisibility
   {
     OnlyVisible,
-    ForceUnminimizeInvisible
+    ForceUnminimizeInvisible,
+    ForceUnminimizeOnCurrentDesktop
   };
 
   static WindowManager* Default();
@@ -59,6 +60,7 @@
   virtual bool IsWindowOnCurrentDesktop(guint32 xid) = 0;
   virtual bool IsWindowObscured(guint32 xid) = 0;
   virtual bool IsWindowMapped(guint32 xid) = 0;
+  virtual bool IsWindowVisible(guint32 xid) = 0;
 
   virtual void ShowDesktop() = 0;
 
diff -Naur unity-4.24.0/services/CMakeLists.txt teszt/services/CMakeLists.txt
--- unity-4.24.0.orig/services/CMakeLists.txt	2011-10-12 14:02:40.000000000 +0200
--- unity-4.24.0/services/CMakeLists.txt	2011-11-12 16:14:56.678266000 +0100
@@ -39,7 +39,7 @@
     "-DGETTEXT_PACKAGE=\"unity\""
     "-DINDICATORDIR=\"${_indicatordir}\""
     "-DINDICATORICONDIR=\"${_iconsdir}\""
-    "-Werror -Wall"
+    "-Wall"
     )
 add_definitions(${CFLAGS})
 
diff -Naur unity-4.24.0/services/panel-service.c teszt/services/panel-service.c
--- unity-4.24.0.orig/services/panel-service.c	2011-10-12 14:02:40.000000000 +0200
--- unity-4.24.0/services/panel-service.c	2011-11-12 16:14:56.678266000 +0100
@@ -1160,8 +1160,11 @@
 
           if (entry2geometry_hash == NULL)
           {
+            //FIXME - this leaks memory but i'm not 100% on the logic,
+            // using g_free as the keys destructor function causes all
+            // kinds of problems 
             entry2geometry_hash = g_hash_table_new_full (g_direct_hash, g_direct_equal,
-                                                         g_free, g_free);
+                                                        NULL, g_free);
             g_hash_table_insert (priv->panel2entries_hash, g_strdup (panel_id),
                                  entry2geometry_hash);
           }
