Description: Add an optional feature that makes metacity save in a window property
             a pixmap of each window before it is unmapped.
Author: Ugo Riboni <ugo.riboni@canonical.com>
Forwarded: not-needed
Bug: https://bugs.launchpad.net/unity-2d/+bug/696864

Index: metacity-2.34.1/src/compositor/compositor-xrender.c
===================================================================
--- metacity-2.34.1.orig/src/compositor/compositor-xrender.c	2011-09-16 21:05:22.280001668 +0100
+++ metacity-2.34.1/src/compositor/compositor-xrender.c	2011-09-16 21:05:27.880001566 +0100
@@ -35,6 +35,7 @@
 
 #include <gdk/gdk.h>
 
+#include "prefs.h"
 #include "display.h"
 #include "screen.h"
 #include "frame.h"
@@ -967,7 +968,7 @@
       if (!cw->shadow) 
         {
           double opacity = SHADOW_OPACITY;
-          if (cw->opacity != (guint) OPAQUE)
+          if (meta_prefs_get_compositor_effects() && cw->opacity != (guint) OPAQUE)
             opacity = opacity * ((double) cw->opacity) / ((double) OPAQUE);
           
           cw->shadow = shadow_picture (display, screen, cw->shadow_type, 
@@ -1298,7 +1299,8 @@
                 XFixesDestroyRegion (xdisplay, shadow_clip);
             }
 
-          if ((cw->opacity != (guint) OPAQUE) && !(cw->alpha_pict)) 
+          if (meta_prefs_get_compositor_effects() &&
+              (cw->opacity != (guint) OPAQUE) && !(cw->alpha_pict))
             {
               cw->alpha_pict = solid_picture (display, screen, FALSE,
                                               (double) cw->opacity / OPAQUE,
@@ -2607,7 +2609,7 @@
   info->overlays = 0;
   info->clip_changed = TRUE;
 
-  info->have_shadows = (g_getenv("META_DEBUG_NO_SHADOW") == NULL);
+  info->have_shadows = meta_prefs_get_compositor_effects() && (g_getenv("META_DEBUG_NO_SHADOW") == NULL);
   if (info->have_shadows)
     {
       meta_verbose ("Enabling shadows\n");
@@ -2995,6 +2997,35 @@
 #endif
 }
 
+static void
+prefs_changed_callback (MetaPreference pref,
+                        gpointer       data)
+{
+  MetaCompositorXRender *compositor;
+  MetaDisplay *display;
+  GSList *index;
+
+  if (pref != META_PREF_COMPOSITOR_EFFECTS)
+    return;
+
+  compositor = (MetaCompositorXRender *) data;
+  if (compositor == NULL)
+    return;
+
+  display = compositor->display;
+
+  for (index = meta_display_get_screens (display); index; index = index->next)
+    {
+      MetaScreen *screen = index->data;
+      if (screen == NULL)
+        continue;
+
+      MetaCompScreen *screen_info = meta_screen_get_compositor_data (screen);
+      if (screen_info != NULL)
+        screen_info->have_shadows = meta_prefs_get_compositor_effects ();
+    }
+}
+
 static MetaCompositor comp_info = {
   xrender_destroy,
   xrender_manage_screen,
@@ -3068,6 +3099,8 @@
   xrc->enabled = TRUE;
   g_timeout_add (2000, (GSourceFunc) timeout_debug, xrc);
 
+  meta_prefs_add_listener (prefs_changed_callback, xrc);
+
   return compositor;
 #else
   return NULL;
Index: metacity-2.34.1/src/core/atomnames.h
===================================================================
--- metacity-2.34.1.orig/src/core/atomnames.h	2011-09-16 21:05:22.240001667 +0100
+++ metacity-2.34.1/src/core/atomnames.h	2011-09-16 21:05:27.880001566 +0100
@@ -70,6 +70,7 @@
 item(TIMESTAMP)
 item(VERSION)
 item(ATOM_PAIR)
+item(_METACITY_WINDOW_CAPTURE)
 
 /* Oddities: These are used, and we need atoms for them,
  * but when we need all _NET_WM hints (i.e. when we're making
Index: metacity-2.34.1/src/core/prefs.c
===================================================================
--- metacity-2.34.1.orig/src/core/prefs.c	2011-09-16 21:05:27.850001570 +0100
+++ metacity-2.34.1/src/core/prefs.c	2011-09-16 21:05:27.880001566 +0100
@@ -96,6 +96,8 @@
 static char *cursor_theme = NULL;
 static int   cursor_size = 24;
 static gboolean compositing_manager = FALSE;
+static gboolean compositor_effects = TRUE;
+static gboolean capture_before_unmap = FALSE;
 static gboolean resize_with_right_button = FALSE;
 static gboolean force_fullscreen = TRUE;
 static gboolean hide_decorator_tooltip = FALSE;
@@ -425,6 +427,16 @@
       &show_maximized_titlebars,
       FALSE,
     },
+    { "/apps/metacity/general/compositor_effects",
+      META_PREF_COMPOSITOR_EFFECTS,
+      &compositor_effects,
+      TRUE,
+    },
+    { "/apps/metacity/general/capture_before_unmap",
+      META_PREF_CAPTURE_BEFORE_UNMAP,
+      &capture_before_unmap,
+      FALSE,
+    },
     { NULL, 0, NULL, FALSE },
   };
 
@@ -1773,6 +1785,12 @@
 
     case META_PREF_COMPOSITING_MANAGER:
       return "COMPOSITING_MANAGER";
+      
+    case META_PREF_COMPOSITOR_EFFECTS:
+      return "COMPOSITOR_EFFECTS";
+
+    case META_PREF_CAPTURE_BEFORE_UNMAP:
+      return "CAPTURE_BEFORE_UNMAP";
 
     case META_PREF_RESIZE_WITH_RIGHT_BUTTON:
       return "RESIZE_WITH_RIGHT_BUTTON";
@@ -2780,6 +2798,18 @@
 #endif
 }
 
+gboolean
+meta_prefs_get_compositor_effects (void)
+{
+  return compositor_effects;
+}
+
+gboolean
+meta_prefs_get_capture_before_unmap (void)
+{
+  return capture_before_unmap;
+}
+
 #ifndef HAVE_GCONF
 static void
 init_button_layout(void)
Index: metacity-2.34.1/src/core/screen.c
===================================================================
--- metacity-2.34.1.orig/src/core/screen.c	2011-09-16 21:05:22.250001667 +0100
+++ metacity-2.34.1/src/core/screen.c	2011-09-16 21:05:27.880001566 +0100
@@ -1280,7 +1280,9 @@
       entries[i].key = (MetaTabEntryKey) window->xwindow;
       entries[i].title = window->title;
 
-      win_pixbuf = get_window_pixbuf (window, &width, &height);
+      win_pixbuf = NULL;
+      if (meta_prefs_get_compositor_effects())
+        win_pixbuf = get_window_pixbuf (window, &width, &height);
       if (win_pixbuf == NULL)
         entries[i].icon = g_object_ref (window->icon);
       else
Index: metacity-2.34.1/src/core/window.c
===================================================================
--- metacity-2.34.1.orig/src/core/window.c	2011-09-16 21:05:27.700001571 +0100
+++ metacity-2.34.1/src/core/window.c	2011-09-16 21:06:30.880000450 +0100
@@ -973,6 +973,47 @@
     }
 }
 
+static void
+save_pixmap_for_window(MetaWindow *window)
+{
+    MetaDisplay *display = meta_window_get_display(window);
+    if (display == NULL)
+      return;
+
+    MetaCompositor *compositor = meta_display_get_compositor(display);
+    if (compositor != NULL) {
+      Pixmap pixmap = meta_compositor_get_window_pixmap(compositor, window);
+      if (pixmap == None)
+        return;
+
+      Window xwindow = meta_window_get_xwindow(window);
+      meta_error_trap_push (display);
+      int success = XChangeProperty (meta_display_get_xdisplay(display),
+                                     xwindow,
+                                     display->atom__METACITY_WINDOW_CAPTURE,
+                                     XA_PIXMAP,
+                                     32, PropModeReplace, (guchar*) &pixmap, 1);
+      meta_error_trap_pop (display, FALSE);
+      if (!success)
+        meta_warning("Failed to save capture property on window %lu\n", xwindow);
+    }
+}
+
+static void
+remove_pixmap_for_window(MetaWindow *window)
+{
+    MetaDisplay *display = meta_window_get_display(window);
+    if (display == NULL)
+      return;
+
+    Window xwindow = meta_window_get_xwindow(window);
+    meta_error_trap_push (display);
+    XDeleteProperty(meta_display_get_xdisplay(display),
+                    xwindow,
+                    display->atom__METACITY_WINDOW_CAPTURE);
+    meta_error_trap_pop (display, FALSE);
+}
+
 void
 meta_window_free (MetaWindow  *window,
                   guint32      timestamp)
@@ -981,6 +1022,10 @@
   
   meta_verbose ("Unmanaging 0x%lx\n", window->xwindow);
 
+  /* As a precaution remove the property holding the id of the
+     captured pixmap first, so it can't be accessed anymore. */
+  remove_pixmap_for_window(window);
+
   if (window->display->compositor)
     meta_compositor_free_window (window->display->compositor, window);
   
@@ -1480,6 +1525,9 @@
     {
       gboolean on_workspace;
 
+      if (!showing && meta_prefs_get_capture_before_unmap())
+        save_pixmap_for_window(window);
+      
       on_workspace = meta_window_located_on_workspace (window, 
                                                        window->screen->active_workspace);
       
@@ -1524,6 +1572,15 @@
     }
   else
     {
+      /* Remove the property with the captured pixmap id before
+         we actually proceed to show the window, as the pixmap will
+         be destroyed by the compositor as soon as the window is
+         mapped. This will leave a small gap in which neither the
+         actual window pixmap nor the property holding the captured
+         pixmap are available, but it's safer than having the
+         property reference a pixmap that doesn't exist anymore. */
+      remove_pixmap_for_window(window);
+
       meta_window_show (window);
     }
 }
Index: metacity-2.34.1/src/include/prefs.h
===================================================================
--- metacity-2.34.1.orig/src/include/prefs.h	2011-09-16 21:05:27.860001569 +0100
+++ metacity-2.34.1/src/include/prefs.h	2011-09-16 21:05:27.880001566 +0100
@@ -59,6 +59,8 @@
   META_PREF_CURSOR_THEME,
   META_PREF_CURSOR_SIZE,
   META_PREF_COMPOSITING_MANAGER,
+  META_PREF_COMPOSITOR_EFFECTS,
+  META_PREF_CAPTURE_BEFORE_UNMAP,
   META_PREF_RESIZE_WITH_RIGHT_BUTTON,
   META_PREF_FORCE_FULLSCREEN,
   META_PREF_HIDE_DECORATOR_TOOLTIP,
@@ -120,6 +122,8 @@
 int         meta_prefs_get_cursor_size       (void);
 gboolean    meta_prefs_get_compositing_manager (void);
 gboolean    meta_prefs_get_force_fullscreen  (void);
+gboolean    meta_prefs_get_compositor_effects (void);
+gboolean    meta_prefs_get_capture_before_unmap (void);
 
 /**
  * Sets whether the compositor is turned on.
Index: metacity-2.34.1/src/metacity.schemas.in.in
===================================================================
--- metacity-2.34.1.orig/src/metacity.schemas.in.in	2011-09-16 21:05:27.860001569 +0100
+++ metacity-2.34.1/src/metacity.schemas.in.in	2011-09-16 21:05:27.880001566 +0100
@@ -386,6 +386,43 @@
         </long>
       </locale>
     </schema>
+    
+    <schema>
+      <key>/schemas/apps/metacity/general/compositor_effects</key>
+      <applyto>/apps/metacity/general/compositor_effects</applyto>
+      <owner>metacity</owner>
+      <type>bool</type>
+      <default>true</default>
+      <locale name="C">
+       <short>Compositor effects</short>
+        <long>
+          Determines if compositor-related effects are enabled or not.
+          More specifically, it disables the shadows below windows, the
+          support for windows opacity and the windows previews in the
+          alt+tab window switcher.
+          It does not have any effect if compositing_manager is disabled.
+        </long>
+      </locale>
+    </schema>
+
+    <schema>
+      <key>/schemas/apps/metacity/general/capture_before_unmap</key>
+      <applyto>/apps/metacity/general/capture_before_unmap</applyto>
+      <owner>metacity</owner>
+      <type>bool</type>
+      <default>false</default>
+      <locale name="C">
+       <short>Capture Before Unmap</short>
+        <long>
+          Determines whether or not before a window is unmapped (e.g. when
+          it is sent to another workspace or minimized) a pixmap of the
+          current state of the window is captured and stored in a property
+          on the window itself. This allows interested clients (e.g.
+          workspace switchers) to be able to display previews of any window.
+          Note that this will only work if compositing_manager is enabled too.
+        </long>
+      </locale>
+    </schema>
 
     <schema>
       <key>/schemas/apps/metacity/workspace_names/name</key>
