=== modified file 'src/core/display.c'
Index: metacity-2.34.1/src/core/display.c
===================================================================
--- metacity-2.34.1.orig/src/core/display.c	2011-08-18 00:09:44.199438223 -0400
+++ metacity-2.34.1/src/core/display.c	2011-08-18 00:10:26.650462017 -0400
@@ -2010,6 +2010,8 @@
         }
       break;
     case MapNotify:
+      if (window && meta_prefs_get_auto_maximize_windows())
+        meta_window_auto_maximize (window);
       break;
     case MapRequest:
       if (window == NULL)
Index: metacity-2.34.1/src/core/prefs.c
===================================================================
--- metacity-2.34.1.orig/src/core/prefs.c	2011-08-18 00:10:19.830297517 -0400
+++ metacity-2.34.1/src/core/prefs.c	2011-08-18 00:10:26.650462017 -0400
@@ -103,6 +103,7 @@
 static gboolean hide_decorator_tooltip = FALSE;
 static gboolean show_maximized_titlebars = TRUE;
 static gboolean workspace_switcher_keyboard_cycle = FALSE;
+static gboolean auto_maximize_windows = FALSE;
 
 static MetaVisualBellType visual_bell_type = META_VISUAL_BELL_FULLSCREEN_FLASH;
 static MetaButtonLayout button_layout;
@@ -443,6 +444,11 @@
       &workspace_switcher_keyboard_cycle,
       FALSE,
     },
+    { "/apps/metacity/general/auto_maximize_windows",
+      META_PREF_AUTO_MAXIMIZE_WINDOWS,
+      &auto_maximize_windows,
+      FALSE,
+    },
     { NULL, 0, NULL, FALSE },
   };
 
@@ -1812,6 +1818,9 @@
       
     case META_PREF_WORKSPACE_SWITCHER_KEYBOARD_CYCLE:
       return "WORKSPACE_SWITCHER_KEYBOARD_CYCLE";
+
+    case META_PREF_AUTO_MAXIMIZE_WINDOWS:
+      return "META_PREF_AUTO_MAXIMIZE_WINDOWS";
     }
 
   return "(unknown)";
@@ -2773,6 +2782,12 @@
   return workspace_switcher_keyboard_cycle;
 }
 
+gboolean
+meta_prefs_get_auto_maximize_windows (void)
+{
+  return auto_maximize_windows;
+}
+
 guint
 meta_prefs_get_mouse_button_resize (void)
 {
Index: metacity-2.34.1/src/core/window-private.h
===================================================================
--- metacity-2.34.1.orig/src/core/window-private.h	2011-03-08 04:31:53.000000000 -0500
+++ metacity-2.34.1/src/core/window-private.h	2011-08-18 00:10:26.650462017 -0400
@@ -410,6 +410,7 @@
 void        meta_window_maximize_internal  (MetaWindow        *window,
                                             MetaMaximizeFlags  directions,
                                             MetaRectangle     *saved_rect);
+void        meta_window_auto_maximize      (MetaWindow  *window);
 void        meta_window_unmaximize         (MetaWindow        *window,
                                             MetaMaximizeFlags  directions);
 void        meta_window_make_above         (MetaWindow  *window);
Index: metacity-2.34.1/src/core/window.c
===================================================================
--- metacity-2.34.1.orig/src/core/window.c	2011-08-18 00:10:11.330092500 -0400
+++ metacity-2.34.1/src/core/window.c	2011-08-18 00:10:26.660462267 -0400
@@ -54,8 +54,9 @@
 #include <X11/extensions/shape.h>
 #endif
 
-static int destroying_windows_disallowed = 0;
+#define AUTO_MAXIMIZE_MINIMUM_COVERAGE 0.75
 
+static int destroying_windows_disallowed = 0;
 
 static void     update_sm_hints           (MetaWindow     *window);
 static void     update_net_frame_extents  (MetaWindow     *window);
@@ -2696,6 +2697,30 @@
     }
 }
 
+void
+meta_window_auto_maximize (MetaWindow *window)
+{
+  const MetaXineramaScreenInfo* info;
+  int screen_surface, window_surface;
+  double coverage;
+
+  if (window->type != META_WINDOW_NORMAL || !window->has_maximize_func)
+    return;
+
+  if (window->maximized_horizontally || window->maximized_vertically)
+    return;
+
+  info = meta_screen_get_xinerama_for_window (window->display->active_screen, window);
+  g_return_if_fail (info);
+  screen_surface = info->rect.width * info->rect.height;
+  g_return_if_fail (screen_surface != 0);
+  window_surface = window->rect.width * window->rect.height;
+  coverage = (double)(window_surface) / screen_surface;
+
+  if (coverage > AUTO_MAXIMIZE_MINIMUM_COVERAGE && coverage <= 1.0)
+    meta_window_maximize (window, META_MAXIMIZE_HORIZONTAL | META_MAXIMIZE_VERTICAL);
+}
+
 static void
 unmaximize_window_before_freeing (MetaWindow        *window)
 {
Index: metacity-2.34.1/src/include/prefs.h
===================================================================
--- metacity-2.34.1.orig/src/include/prefs.h	2011-08-18 00:10:19.830297517 -0400
+++ metacity-2.34.1/src/include/prefs.h	2011-08-18 00:10:26.660462267 -0400
@@ -65,7 +65,8 @@
   META_PREF_FORCE_FULLSCREEN,
   META_PREF_HIDE_DECORATOR_TOOLTIP,
   META_PREF_SHOW_MAXIMIZED_TITLEBARS,
-  META_PREF_WORKSPACE_SWITCHER_KEYBOARD_CYCLE
+  META_PREF_AUTO_MAXIMIZE_WINDOWS,
+  META_PREF_WORKSPACE_SWITCHER_KEYBOARD_CYCLE,
 } MetaPreference;
 
 typedef void (* MetaPrefsChangedFunc) (MetaPreference pref,
@@ -127,6 +128,7 @@
 gboolean    meta_prefs_get_capture_before_unmap (void);
 gboolean    meta_prefs_get_workspace_switcher_keyboard_cycle (void);
 
+gboolean    meta_prefs_get_auto_maximize_windows (void);
 
 /**
  * Sets whether the compositor is turned on.
Index: metacity-2.34.1/src/metacity.schemas.in.in
===================================================================
--- metacity-2.34.1.orig/src/metacity.schemas.in.in	2011-08-18 00:10:19.830297517 -0400
+++ metacity-2.34.1/src/metacity.schemas.in.in	2011-08-18 00:10:26.660462267 -0400
@@ -357,6 +357,21 @@
     </schema>
 
     <schema>
+      <key>/schemas/apps/metacity/general/auto_maximize_windows</key>
+      <applyto>/apps/metacity/general/auto_maximize_windows</applyto>
+      <owner>metacity</owner>
+      <type>bool</type>
+      <default>false</default>
+      <locale name="C">
+        <short>Automatically Maximize Windows</short>
+        <long>
+          Determines if windows should be automatically maximized when shown
+          if they already cover most of the screen.
+        </long>
+      </locale>
+    </schema>
+
+    <schema>
       <key>/schemas/apps/metacity/general/audible_bell</key>
       <applyto>/apps/metacity/general/audible_bell</applyto>      
       <owner>metacity</owner>
